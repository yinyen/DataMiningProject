*------------------------------------------------------------*
User:                yinyen
Date:                December 19, 2019
Time:                15:20:44
Site:                12600285
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 19, 2019
Time:                15:20:29
*------------------------------------------------------------*
14715  proc freq data=EMWS1.VarClus_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.VarClusMETA;
14717  run;
 
NOTE: There were 46 observations read from the data set EMWS1.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
14718  proc print data=WORK.VarClusMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 8 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMEXCEPTIONSTRING=;
15099  *------------------------------------------------------------*;
15100  * VarClus: Generation of macros and macro variables;
15101  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15102  *------------------------------------------------------------*;
 
15103  %let EMEXCEPTIONSTRING=;
15104  *------------------------------------------------------------*;
15105  * TRAIN: VarClus;
15106  *------------------------------------------------------------*;
15107  %let EM_ACTION = TRAIN;
15108  %let syscc = 0;
15109
15110  %macro main;
15111
15112     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15113     %include temp;
15114     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15115     %include temp;
15116     filename temp;
15117
15118    %SetProperties;
15119
15120     %if %upcase(&EM_ACTION) = CREATE %then %do;
15121         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15122         %include temp;
15123         filename temp;
15124         %create;
15125     %end;
15126     %else
15127     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15128          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15129             %include temp;
15130             filename temp;
15131             %train;
15132     %end;
15133     %else
15134     %if %upcase(&EM_ACTION) = SCORE %then %do;
15135             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15136             %include temp;
15137             filename temp;
15138             %score;
15139     %end;
15140     %else
15141     %if %upcase(&EM_ACTION) = REPORT %then %do;
15142             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15143             %include temp;
15144             filename temp;
15145             %report;
15146     %end;
15147     /*
15148     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15149         %put 'OPENING TABLE';
15150     %end;
15151     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15152         %put 'CLOSE TABLE';
15153     %end;
15154     */
15155  %mend main;
15156  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15157 +
15158 +/* Initialize property macro variables */
15159 +%macro SetProperties;
15160 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15161 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15162 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15163 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15164 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15165 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15166 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15167 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15168 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15169 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15170 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15171 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15172 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15173 +
15174 +%mend SetProperties;
15175 +
15176 +%Macro MakeDummyVariables(indata=,
15177 +                          outvar=,
15178 +                          outdata=,
15179 +                          fileref=,
15180 +                          recreatecmeta=N, /* optional */
15181 +                          incmeta=,     /* optional */
15182 +                          outcmeta=,    /* optional */
15183 +                          ndummyvars=_ndummyvars
15184 +                          );
15185 +    %global &ndummyvars;
15186 +
15187 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15188 +       class
15189 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15190 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15191 +    ;
15192 +    run;
15193 +    %let &ndummyvars = 0;
15194 +    data _null_;
15195 +    %let dsid = %sysfunc(open(work._classout));
15196 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15197 +    %let dsid = %sysfunc(close(&dsid));
15198 +    run;
15199 +
15200 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15201 +       input
15202 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15203 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15204 +        / level=nominal stdize=no;
15205 +       make outvar = &outvar;
15206 +       score data = &indata out =&outdata;
15207 +       code  file=  "&fileref";
15208 +    run;
15209 +    %if &recreatecmeta eq Y %then %do;
15210 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15211 +    data _tmpds;
15212 +        set _tmpds;
15213 +           ROLE = 'INPUT';
15214 +           LEVEL = 'INTERVAL';
15215 +           CREATOR='DMZIP';
15216 +           if NAME = '_TYPE_' then delete;
15217 +    run;
15218 +    data &outcmeta;
15219 +         set &incmeta _tmpds;
15220 +    run;
15221 +    %end;
15222 +    proc datasets lib=work nolist;
15223 +      delete  _dmdbdat _dmdbcat _classout
15224 +    %if &recreatecmeta eq Y %then %do;
15225 +    _tmpds
15226 +    %end;
15227 +    ;
15228 +    quit;
15229 +%Mend MakeDummyVariables;
15230 +
15231 +/*--- Determine Optimal Number of Cluster ----
15232 +%macro FindClusNum(statds=, groupds=, minvariation=);
15233 +   %global optnclus;
15234 +   data varclus_tmp(drop=_NAME_);
15235 +      set &statDs;
15236 +      where _type_ ='PROPOR';
15237 +   run;
15238 +   proc sort data=varclus_tmp;
15239 +      by _NCL_;
15240 +   run;
15241 +   proc transpose data=varclus_tmp out=varclus_tmp;
15242 +      by _NCL_;
15243 +      var %EM_INTERVAL_INPUT
15244 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15245 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15246 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15247 +          %do i = 2 %to &nvar;
15248 +          %let varname = %sysfunc(varname(&dsid, &i));
15249 +          &varname
15250 +          %end;
15251 +      %end;
15252 +   ;
15253 +   run;
15254 +
15255 +   %if &minVariation eq %then %do;
15256 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15257 +   %end;
15258 +   %if ^(0<&minVariation<100) %then %do;
15259 +       %let minVariation = 90;
15260 +   %end;
15261 +
15262 +   data _null_;
15263 +      set varclus_tmp end=eof;
15264 +      by _NCL_;
15265 +      retain flag 0;
15266 +      if first._ncl_ then flag=0;
15267 +      if .<col1 < &minVariation then flag=1;
15268 +      if last._ncl_ and ^flag then do;
15269 +         call symput('OPTNCL', _ncl_);
15270 +         stop;
15271 +      end;
15272 +     if eof then call symput('OPTNCL', _ncl_);
15273 +   run;
15274 +
15275 +   %let optnclus = &OPTNCL;
15276 +
15277 +   data varclus_tmp(drop=_NCL_ _NAME_);
15278 +      set &statDs;
15279 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15280 +   run;
15281 +   proc sort data=varclus_tmp;
15282 +      by _TYPE_;
15283 +   run;
15284 +   proc transpose data=varclus_tmp out=varclus_tmp;
15285 +      by _TYPE_;
15286 +   run;
15287 +   proc sort data=varclus_tmp;
15288 +      by _name_ _type_;
15289 +   run;
15290 +
15291 +  proc transpose data=varclus_tmp out=&groupds;
15292 +      by _NAME_;
15293 +   run;
15294 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15295 +      by Cluster descending Rsquare;
15296 +      where Cluster ne 0;
15297 +   run;
15298 +   proc datasets lib=work nolist mt=(DATA VIEW);
15299 +      delete varclus_tmp;
15300 +   run;
15301 +   quit;
15302 +%mend findClusNum;
15303 +*/
15304 +
15305 +%macro getNclusfromTrain(inoutstat=, nc=);
15306 +%global &nc;
15307 +data _null_;
15308 +    set &inoutstat end=eof;
15309 +    if eof then do;
15310 +    call symput("&nc", _ncl_);
15311 +    end;
15312 +run;
15313 +%mend  getNclusfromTrain;
15314 +
15315 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15316 +
15317 +     *--- Build Code to Modify Metadata ---*;
15318 +     filename X "&deltacodefile";
15319 +     data _null_;
15320 +        FILE X;
15321 +        set &groupds end=eof;
15322 +        /*by Cluster;*/
15323 +         if _N_=1 then do;
15324 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15325 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15326 +           %end;
15327 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15328 +           put "if upcase(strip(NAME)) in (";
15329 +        end;
15330 +        if Strip(upcase(Selected)) eq 'YES' then do;
15331 +           string = '"'!!trim(left(VARIABLE))!!'"';
15332 +           put string;
15333 +        end;
15334 +        if eof then do;
15335 +           put ') then ROLE="INPUT";';
15336 +           put 'else ROLE="REJECTED";';
15337 +           put 'end;';
15338 +
15339 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15340 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15341 +           %end;
15342 +        end;
15343 +     run;
15344 +     quit;
15345 +
15346 +     filename X;
15347 +
15348 +     quit;
15349 +%mend MakeDeltaCode;
15350 +
15351 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15352 +    %if ^%sysfunc(exist(&statds)) %then %do;
15353 +         %goto doendc;
15354 +    %end;
15355 +
15356 +    data &corrds(drop=_TYPE_ _NCL_) ;
15357 +       set &statds;
15358 +       where _type_ eq 'CORR' ;
15359 +    run ;
15360 +    proc sort data=&corrds;
15361 +       by _NAME_ ;
15362 +    run ;
15363 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15364 +      BY _NAME_ ;
15365 +    run ;
15366 +    data &corrplotds;
15367 +       length _Y_ $100;
15368 +       set &corrplotDs;
15369 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15370 +    run ;
15371 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15372 +       set &corrplotds;
15373 +       where _LABEL_ ne '' ;
15374 +       keep _TMP_ _LABEL_ ;
15375 +    run ;
15376 +    data _null_;
15377 +       nobs=0;
15378 +       dsid = open('varclus_match');
15379 +       if dsid then do;
15380 +          nobs = attrn(dsid, 'NOBS');
15381 +          dsid = close(dsid);
15382 +       end;
15383 +       call symput ('CORR_NOBS', nobs);
15384 +    run;
15385 +    %if &corr_nobs %then %do;
15386 +        proc sort data=varclus_match;
15387 +           by _name_;
15388 +        run ;
15389 +        proc sort data=&corrplotds;
15390 +           by _name_;
15391 +        run ;
15392 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15393 +           merge varclus_match &corrplotds;
15394 +           by _NAME_ ;
15395 +           if _X_ eq '' then _X_=_NAME_ ;
15396 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15397 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15398 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15399 +
15400 +       run ;
15401 +    %end;
15402 +    %else %do;
15403 +        proc sort data=&corrplotds;
15404 +           by _name_;
15405 +        run ;
15406 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15407 +           set &corrplotds;
15408 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15409 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15410 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15411 +
15412 +        run ;
15413 +    %end;
15414 +    proc sort data=&corrplotds;
15415 +       by _X_ _Y_;
15416 +    run ;
15417 +    proc datasets lib=work nolist mt=(DATA VIEW);
15418 +       delete varclus_match;
15419 +    run;
15420 +    quit;
15421 +
15422 +%doendc:
15423 +
15424 +%mend MakeVarClusCorrData;
15425 +
15426 +%macro MakeStatPlotData(statds= , outstatplotds=);
15427 +   %if %sysfunc(exist(&statds)) %then %do;
15428 +
15429 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15430 +          set &statDs;
15431 +          where _type_ in('MEAN', 'STD', 'N');
15432 +       run ;
15433 +       proc transpose data=varclus_tmp out=&outstatplotds;
15434 +          id _TYPE_ ;
15435 +       run ;
15436 +       data &outstatplotds;
15437 +          set &outstatplotds(obs=1000);
15438 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15439 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15440 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15441 +          else SCALEDSTD= STD ;
15442 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15443 +       run ;
15444 +       proc sort data=&outstatplotds;
15445 +          by descending SCALEDSTD ;
15446 +       run ;
15447 +       proc datasets lib=work nolist mt=(DATA VIEW);
15448 +          delete varclus_tmp;
15449 +       run;
15450 +       quit;
15451 +    %end;
15452 +
15453 +%mend MakeStatPlotData;
15454 +
15455 +
15456 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15457 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15458 +    data &EM_USER_OUTSTATSCORE;
15459 +          set &indata;
15460 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15461 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15462 +          if _TYPE_ = 'STD' then _NAME_='STD';
15463 +          DROP _TYPE_ _NCL_;
15464 +     run;
15465 +
15466 +     filename _file_  "&fileRef";
15467 +
15468 +     data _null_;
15469 +        FILE _file_ MOD;
15470 +        put ' ';
15471 +        put '/*-------------------------------------------------*/';
15472 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
15473 +        put '/*-------------------------------------------------*/';
15474 +        put ' ';
15475 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
15476 +
15477 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
15478 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15479 +
15480 +        %let k = 1;
15481 +        %do %while(^%sysfunc(fetch(&dsid)));
15482 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15483 +                %if &k > 2 %then %do;
15484 +                 %let cn = %eval(&k-2);
15485 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
15486 +                %end;
15487 +                %let k = %eval(&k+1);
15488 +        %end;
15489 +
15490 +        %let rc = %sysfunc(rewind(&dsid));
15491 +
15492 +        %do i= 2 %to &nvar;
15493 +            %let _varname =  %sysfunc(varname(&dsid, &i));
15494 +            %do %while(^%sysfunc(fetch(&dsid)));
15495 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15496 +                %if &_name = MEAN %then
15497 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
15498 +                %else %if &_name = STD %then
15499 +                %let _std = %sysfunc(getvarn(&dsid, &i));
15500 +                %else %do;
15501 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
15502 +                      %let abscoeff = %sysfunc(abs(&coeff));
15503 +                          %if &abscoeff >  0 %then %do;
15504 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
15505 +                           %end;
15506 +                 %end;
15507 +             %end;
15508 +             %let rc = %sysfunc(rewind(&dsid));
15509 +         %end;
15510 +
15511 +        %let dsid= %sysfunc(close(&dsid));
15512 +       run;
15513 +%mend CreateScoreCode;
15514 +
15515 +
15516 +
15517 +/*----------------------------------------------------------
15518 +    Instead of using %MakeRSquareData,
15519 +    %MakeVarClusResultTable at macro2.source is used
15520 + +----------------------------------------------------------*/
15521 +
15522 +
15523 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
15524 +
15525 +/* modifying  from ods rsquare = data */
15526 +
15527 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
15528 +    Length Cluster $16;
15529 +    length Variable $32;
15530 +    Length VariableLabel $64;
15531 +    set &indata; retain CurrentCluster;
15532 +    if NumberOfClusters ^= &ncluster then delete;
15533 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
15534 +    CurrentCluster = Cluster;
15535 +   run;
15536 +proc sort data =&outdata ;
15537 +     by Cluster RsquareRatio;
15538 +run;
15539 +data _tmprsq(drop=index);
15540 +     set &outdata; by Cluster;
15541 +     if first.Cluster then do;
15542 +     index = strip(scan(Cluster,2 ));
15543 +     Variable = "Clus"||index;
15544 +     VariableLabel = "Cluster Component "||index;
15545 +     OwnCluster = 1;
15546 +     NextClosest = .;
15547 +     RsquareRatio = 0;
15548 +     output;
15549 +     end;
15550 +run;
15551 +
15552 +proc sort data = _tmprsq ;
15553 +     by Cluster RsquareRatio;
15554 +run;
15555 +data &outdata;
15556 +     set &outdata _tmprsq;
15557 +by Cluster;
15558 +run;
15559 +
15560 +
15561 +/* Just create the Selected variable with all YES */
15562 +
15563 +data &outdata;
15564 +    set &outdata; by cluster;
15565 +    length Selected $8;
15566 +    Selected = 'YES';
15567 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15568 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15569 +    rename OwnCluster = RSqWithClusterComp;
15570 +    rename NextClosest = RSqWithNextClusComp;
15571 +run;
15572 +
15573 +
15574 +/* Selected = Y/N will be done %score section -----
15575 +
15576 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
15577 +data &outdata;
15578 +    set &outdata; by cluster;
15579 +    length Selected $8;
15580 +    if first.Cluster then Selected = 'YES';
15581 +    else Selected = 'NO';
15582 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15583 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15584 +    rename OwnCluster = RSqWithClusterComp;
15585 +    rename NextClosest = RSqWithNextClusComp;
15586 +run;
15587 +%end;
15588 +%else %do;
15589 +data &outdata;
15590 +    set &outdata; by cluster;
15591 +    if last.Cluster then Selected = 'YES';
15592 +    else Selected = 'NO';
15593 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15594 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15595 +    rename OwnCluster = RSqWithClusterComp;
15596 +    rename NextClosest = RSqWithNextClusComp;
15597 +run;
15598 +%end;
15599 +---------------------------------------------------------------*/
15600 +
15601 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
15602 +/* to calculate NextClosestClusRsq */
15603 +proc transpose data = &inClusRSquare  out=_clusRsq;
15604 +      by cluster;
15605 +      run;
15606 +data _clusRsq;
15607 +     set _clusRsq;
15608 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
15609 +run;
15610 +
15611 +proc sort data=_clusRsq;
15612 +    by cluster col1;
15613 +    run;
15614 +data _clusRsq(drop=_NAME_ _LABEL_);
15615 +     set _clusRsq; by cluster;
15616 +     if last.Cluster then output;
15617 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
15618 +     rename COL1 = RSqWithNextClusComp;
15619 +     rename Cluster = Variable;
15620 +     label  Cluster = "Variable";
15621 +run;
15622 +
15623 +proc sort data =&outdata;
15624 +     by Variable;
15625 +run;
15626 +data &outdata;
15627 +    merge &outdata _clusRsq;
15628 +    by Variable;
15629 +run;
15630 +proc sort data =&outdata;
15631 +by Cluster  RsquareRatio;
15632 +run;
15633 +quit;
15634 +%end;
15635 +
15636 +proc datasets lib = work nolist;
15637 +     delete _tmprsq _clusRsq;
15638 +     run;
15639 +quit;
15640 +
15641 +%mend MakeRSquareData;
15642 +
15643 +
15644 +/*-------------------------------------------------------------------------*/
15645 +
15646 +
15647 +
15648 +%macro ModifyCorr(indata=,
15649 +                  outdata=,
15650 +                  rsquare = Y
15651 +                  );
15652 +    data corr_tmp;
15653 +        set &indata;
15654 +    run;
15655 +     proc sql;
15656 +           update &indata
15657 +           set
15658 +     %let dsid = %sysfunc(open(work.corr_tmp));
15659 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
15660 +          %do i = 4 %to &nvar;
15661 +          %let _name = %sysfunc(varname(&dsid, &i));
15662 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
15663 +            %else  %let _name_md = &_name;
15664 +            %if &i < &nvar %then %do;
15665 +               &_name = 1- &_name_md ,
15666 +            %end;
15667 +            %else %do;
15668 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
15669 +            %end;
15670 +          %end;
15671 +      %let dsid= %sysfunc(close(&dsid));
15672 +
15673 +      select * from &indata;
15674 +      run;
15675 +      proc datasets lib = work nolist;
15676 +           delete corr_tmp;
15677 +      run;
15678 +      quit;
15679 +
15680 + %mend ModifyCorr;
15681 +
15682 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
15683 +    data &outdata(drop= _NCL_  _TYPE_);
15684 +       set &indata;
15685 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
15686 +       rename _NAME_ = Cluster;
15687 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15688 +    run;
15689 +    %if &RSquare eq Y %then %do;
15690 +     data corr_tmp;
15691 +        set &outdata;
15692 +     run;
15693 +
15694 +     data &outdata(drop=i);
15695 +          set &outdata;
15696 +          %let dsid = %sysfunc(open(work.corr_tmp));
15697 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15698 +          %do i = 2 %to &nvar;
15699 +            %let _name = %sysfunc(varname(&dsid, &i));
15700 +            %let _name_md = &_name.**2;
15701 +                &_name = &_name_md;
15702 +          %end;
15703 +      %let dsid= %sysfunc(close(&dsid));
15704 +      run;
15705 +      proc datasets lib = work nolist;
15706 +           delete corr_tmp;
15707 +      run;
15708 +
15709 +    %end;
15710 +     quit;
15711 +%mend MakeClusStructCorrData;
15712 +
15713 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
15714 +    data &outdata(drop= _NCL_  _TYPE_);
15715 +       set &indata;
15716 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15717 +       rename _NAME_ = Cluster;
15718 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15719 +    run;
15720 +    data corr_tmp;
15721 +        set &outdata;
15722 +    run;
15723 +
15724 +    %let dsid = %sysfunc(open(work.corr_tmp));
15725 +    %let nclus2= %eval(&ncluster+1);
15726 +    data &outdata;
15727 +         set &outdata;
15728 +          %do i = 2 %to &nclus2;
15729 +          %let i_1 = %eval(&i-1);
15730 +            %let _name = %sysfunc(varname(&dsid, &i));
15731 +            %let _newName = Clus&i_1;
15732 +                rename &_name = &_newName; ;
15733 +                *label &_name ="Cluster &i_1";
15734 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15735 +          %end;
15736 +          keep Cluster
15737 +          %do i = 2 %to &nclus2;
15738 +                %let _name = %sysfunc(varname(&dsid, &i));
15739 +                &_name
15740 +          %end;
15741 +          ;
15742 +    %let dsid= %sysfunc(close(&dsid));
15743 +     run;
15744 +     quit;
15745 +
15746 +    %if &RSquare eq Y %then %do;
15747 +
15748 +       data corr_tmp;
15749 +        set &outdata;
15750 +     run;
15751 +
15752 +     data &outdata(drop=i);
15753 +          set &outdata;
15754 +          %let dsid = %sysfunc(open(work.corr_tmp));
15755 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15756 +          %do i = 2 %to &nvar;
15757 +            %let _name = %sysfunc(varname(&dsid, &i));
15758 +            %let _name_md = &_name.**2;
15759 +                &_name = &_name_md;
15760 +          %end;
15761 +      %let dsid= %sysfunc(close(&dsid));
15762 +      run;
15763 +    %end;
15764 +
15765 +    %if &makeplotds eq Y %then %do;
15766 +     proc transpose data = &outdata
15767 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15768 +          by cluster;
15769 +     run;
15770 +     data &plotds;
15771 +          set  &plotds;
15772 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15773 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15774 +     run;
15775 +     %end;
15776 +     proc datasets lib = work nolist;
15777 +           delete corr_tmp;
15778 +     run;
15779 +     quit;
15780 +%mend MakeInterClusCorrData;
15781 +
15782 +
15783 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15784 +
15785 +data &outlink(drop = Selected);
15786 +     set &indata;
15787 +     LINKID = _N_;
15788 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15789 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15790 +run;
15791 +data &outnode(keep=NODEID TYPE LABEL);
15792 +    set &indata;
15793 +    length TYPE $16;
15794 +    rename Variable = NODEID;
15795 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15796 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15797 +    then  TYPE = "CLUSTER";
15798 +    else  TYPE="VARIABLE";
15799 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15800 +run;
15801 +quit;
15802 +%mend MakeClusConstellData;
15803 +
15804 +
15805 +
15806 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15807 +
15808 +data &outlink(drop = Selected);
15809 +     set &indata;
15810 +     LINKID = _N_;
15811 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15812 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15813 +run;
15814 +data &outnode(keep=NODEID TYPE LABEL);
15815 +    set &indata;
15816 +    length TYPE $16;
15817 +    rename Variable = NODEID;
15818 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15819 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15820 +    then  TYPE = "CLUSTER";
15821 +    else  TYPE="VARIABLE";
15822 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15823 +run;
15824 +quit;
15825 +%mend MakeClusConstellData;
15826 +
15827 +
15828 +/*--- This will work only when inds is not a view data -------
15829 +
15830 +%macro getNVarNObs(inds=, nvar=, nobs=);
15831 +
15832 +    %global &nvar;
15833 +    %global &nobs;
15834 +    data _null_;
15835 +         dsid = open("&inds");
15836 +         nv = attrn(dsid, 'NVAR');
15837 +         no = attrn(dsid, 'NOBS');
15838 +         dsid = close(dsid);
15839 +         call symput("&nvar", nv);
15840 +         call symput("&nobs", no);
15841 +    run;
15842 +    quit;
15843 +%mend  getNVarNObs;
15844 +
15845 ++---------------------------------------------------------------*/
15846 +
15847 +
15848 +%macro getNVar(inds=, nvar=);
15849 +    %global &nvar;
15850 +    data _null_;
15851 +         dsid = open("&inds");
15852 +         nv = attrn(dsid, 'NVAR');
15853 +         dsid = close(dsid);
15854 +         call symput("&nvar", nv);
15855 +    run;
15856 +    quit;
15857 +%mend  getNVar;
15858 +
15859 +
15860 +
15861 +%macro getNObs(inds=, nobs=);
15862 +    %global &nobs;
15863 +    data _null_;
15864 +        set &inds end=eof;
15865 +        if eof then call symput("&nobs", _N_);
15866 +    run;
15867 +    quit;
15868 +%mend  getNObs;
15869 +
15870 +%Macro CreateVarclusMeta(trainnum=);
15871 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
15872 +    data &EM_USER_VARCLUSMETA;
15873 +         length TrainNum 8.;
15874 +         length NewTrain $8;
15875 +         length NGCluster 8.;
15876 +         length ExportedComp $16;
15877 +         length HideVariable $8;
15878 +         TrainNum = &trainnum;
15879 +         NewTrain = "Y";
15880 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
15881 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
15882 +         NGCluster = 0; /* zero means no twostage */
15883 +   run;
15884 +   quit;
15885 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
15886 +
15887 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
15888 +    data &outdata(drop= _NCL_  _TYPE_);
15889 +       set &indata;
15890 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15891 +       %if &globalclusid ne %then %do;
15892 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
15893 +       rename _NAME_ = Cluster;
15894 +       %end;
15895 +       %else %do;
15896 +        _NAME_ = upcase(_NAME_);
15897 +       rename _NAME_ = Cluster;
15898 +       %end;
15899 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15900 +    run;
15901 +    data corr_tmp;
15902 +        set &outdata;
15903 +    run;
15904 +
15905 +    %let dsid = %sysfunc(open(work.corr_tmp));
15906 +    %let nclus2= %eval(&ncluster+1);
15907 +    data &outdata;
15908 +         set &outdata;
15909 +          %do i = 2 %to &nclus2;
15910 +          %let i_1 = %eval(&i-1);
15911 +            %let _name = %sysfunc(varname(&dsid, &i));
15912 +            %if &globalclusid ne %then
15913 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
15914 +                     rename &_name = &_newName;
15915 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
15916 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
15917 +                %end;
15918 +            %else
15919 +                %do; %let _newName = CLUS&i_1;
15920 +                     rename &_name = &_newName;
15921 +                     *label &_name ="Cluster &i_1";
15922 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15923 +                %end;
15924 +          %end;
15925 +          keep Cluster
15926 +          %do i = 2 %to &nclus2;
15927 +                %let _name = %sysfunc(varname(&dsid, &i));
15928 +                &_name
15929 +          %end;
15930 +          ;
15931 +    %let dsid= %sysfunc(close(&dsid));
15932 +     run;
15933 +     quit;
15934 +
15935 +    %if &RSquare eq Y %then %do;
15936 +
15937 +       data corr_tmp;
15938 +        set &outdata;
15939 +     run;
15940 +
15941 +     data &outdata;
15942 +          set &outdata;
15943 +          %let dsid = %sysfunc(open(work.corr_tmp));
15944 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15945 +          %do i = 2 %to &nvar;
15946 +            %let _name = %sysfunc(varname(&dsid, &i));
15947 +            %let _name_md = &_name.**2;
15948 +                &_name = &_name_md;
15949 +          %end;
15950 +      %let dsid= %sysfunc(close(&dsid));
15951 +      run;
15952 +    %end;
15953 +
15954 +    %if &makeplotds eq Y %then %do;
15955 +     proc transpose data = &outdata
15956 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15957 +          by cluster;
15958 +     run;
15959 +     data &plotds;
15960 +          set  &plotds;
15961 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15962 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15963 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15964 +     run;
15965 +     %end;
15966 +     proc datasets lib = work nolist;
15967 +           delete corr_tmp;
15968 +     run;
15969 +     quit;
15970 +%mend MakeInterClusCorrData;
15971 +
15972 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
15973 +    data _tmpds(drop= _NCL_);
15974 +       set &indata;
15975 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
15976 +       %if &globalclusid ne %then %do;
15977 +           _NAME_ = "GC&globalclusid.";
15978 +       rename _NAME_ = Cluster;
15979 +       %end;
15980 +       %else %do;
15981 +        _NAME_ = "CLUS";
15982 +        rename _NAME_ = Cluster;
15983 +       %end;
15984 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15985 +    run;
15986 +    proc transpose data =_tmpds out =&outdata;
15987 +    run;
15988 +
15989 +    data &outdata(drop=COL1);
15990 +        %if &globalclusid ne %then %do;
15991 +        length GCluster $16;
15992 +        %end;
15993 +        length Cluster $32;
15994 +        length _NAME_ $32;
15995 +         set &outdata;
15996 +         _NAME_ = upcase(_NAME_);
15997 +         rename _NAME_=Variable;
15998 +         *label _NAME_="Variable";
15999 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16000 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16001 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16002 +
16003 +         %if &globalclusid ne %then %do;
16004 +          GCluster = "GC&globalclusid";
16005 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
16006 +         %end;
16007 +         %else %do;
16008 +         Cluster = "CLUS"||strip(COL1);
16009 +        %end;
16010 +         rename COL2 = RSqWithOwnClusComp;
16011 +         *label COL2 = "R-Square With Own Cluster Component";
16012 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16013 +
16014 +   run;
16015 +   proc sort data =&outdata;
16016 +        by Cluster RSqWithOwnClusComp;
16017 +   run;
16018 +   proc datasets lib = work nolist;
16019 +           delete _tmpds;
16020 +   run;
16021 +   quit;
16022 +%mend MakeOwnRSquare;
16023 +
16024 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16025 +    data &outdata(drop= _NCL_  _TYPE_);
16026 +       %if &globalclusid ne %then %do;
16027 +        length GCluster $16;
16028 +        %end;
16029 +       set &indata;
16030 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16031 +       %if &globalclusid ne %then %do;
16032 +         GCluster = "GC&globalclusid";
16033 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16034 +         rename _NAME_ = Cluster;
16035 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16036 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16037 +
16038 +       %end;
16039 +       %else %do;
16040 +         _NAME_ = upcase(_NAME_);
16041 +         rename _NAME_ = Cluster;
16042 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16043 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16044 +
16045 +       %end;
16046 +     run;
16047 +    %if &RSquare eq Y %then %do;
16048 +     data corr_tmp;
16049 +          set &outdata;
16050 +     run;
16051 +     %let istart = 2;
16052 +     %if &globalclusid ne %then %let istart = 3;
16053 +     data &outdata;
16054 +          set &outdata;
16055 +          %let dsid = %sysfunc(open(work.corr_tmp));
16056 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16057 +          %do i =&istart %to &nvar;
16058 +            %let _name = %sysfunc(varname(&dsid, &i));
16059 +            %let _name_md = &_name.**2;
16060 +                &_name = &_name_md;
16061 +          %end;
16062 +      %let dsid= %sysfunc(close(&dsid));
16063 +      run;
16064 +      proc datasets lib = work nolist;
16065 +           delete corr_tmp;
16066 +      run;
16067 +    %end;
16068 +     quit;
16069 +%mend MakeClusStructCorrData;
16070 +
16071 +/*
16072 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16073 +*/
16074 +
16075 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16076 +
16077 +     /* The indata should be the outdata
16078 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16079 +
16080 +     proc sort data =&indata out=_tmpclusRsq;
16081 +     by cluster;
16082 +     run;
16083 +
16084 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16085 +      by cluster;
16086 +     run;
16087 +
16088 +     proc sort data=_tmpclusRsq;
16089 +        by _NAME_ COL1;
16090 +     run;
16091 +
16092 +     data _tmpclusRsq;
16093 +         length _NAME_ $32;
16094 +         set _tmpclusRsq; by _NAME_;
16095 +          _NAME_ = upcase(_NAME_);
16096 +          %if &ncluster ne 1 %then %do;
16097 +             if last._NAME_ then delete;
16098 +          %end;
16099 +          %else %do;
16100 +             COL1 = 0;
16101 +          %end;
16102 +     run;
16103 +     /* need to sort again */
16104 +     proc sort data=_tmpclusRsq;
16105 +        by _NAME_ COL1;
16106 +     run;
16107 +
16108 +     data &outdata;
16109 +         set _tmpclusRsq; by _NAME_;
16110 +         Cluster = upcase(Cluster);
16111 +         if last._NAME_ then output;
16112 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16113 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16114 +         rename COL1 = RSqWithNextClusComp;
16115 +         Cluster = upcase(Cluster);
16116 +         rename Cluster = ClosestCluster;
16117 +         *label  Cluster = "Next Closest Cluster";
16118 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16119 +         rename _NAME_ = Variable;
16120 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16121 +    run;
16122 +
16123 +
16124 +    %if &globalclusid ne %then %do;
16125 +    data &outdata;
16126 +       length GCluster $16;
16127 +       set &outdata;
16128 +       GCluster = "GC&globalclusid";
16129 +       run;
16130 +    %end;
16131 +    proc datasets lib = work nolist;
16132 +           delete _tmpclusRsq;
16133 +    run;
16134 +    quit;
16135 +%mend FindNextClosestClusByVar;
16136 +
16137 +
16138 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16139 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16140 +     proc sort data =&indata out=_tmpclusRsq;
16141 +     by cluster;
16142 +     run;
16143 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16144 +     by cluster;
16145 +     run;
16146 +     proc sort data=_tmpclusRsq;
16147 +        by _NAME_ col1;
16148 +     run;
16149 +     data _tmpclusRsq;
16150 +         length _NAME_ $32;
16151 +         set _tmpclusRsq; by _NAME_;
16152 +          _NAME_ = upcase(_NAME_);
16153 +          %if &ncluster ne 1 %then %do;
16154 +             if last._NAME_ then delete;
16155 +          %end;
16156 +          %else %do;
16157 +             COL1 = 0;
16158 +          %end;
16159 +     run;
16160 +     data &outdata;
16161 +         set _tmpclusRsq; by _NAME_;
16162 +         Cluster = upcase(Cluster);
16163 +         if last._NAME_ then output;
16164 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16165 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16166 +         rename COL1 = RSqWithNextClusComp;
16167 +         Cluster = upcase(Cluster);
16168 +         rename Cluster = ClosestCluster;
16169 +         *label  Cluster = "Next Closest Cluster";
16170 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16171 +         rename _NAME_ = Variable;
16172 +         *label  _NAME_ = "Variable";
16173 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16174 +
16175 +    run;
16176 +    %if &globalclusid ne %then %do;
16177 +    data &outdata;
16178 +       length GCluster $16;
16179 +       set &outdata;
16180 +       GCluster = "GC&globalclusid";
16181 +       run;
16182 +    %end;
16183 +
16184 +    proc datasets lib = work nolist;
16185 +           delete _tmpclusRsq;
16186 +    run;
16187 +
16188 +    quit;
16189 +%mend FindNextClosestClusByCluster;
16190 +
16191 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16192 +/*----
16193 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16194 +-----------*/
16195 +
16196 +proc sort data =&indata1;
16197 +    by Variable;
16198 +run;
16199 +proc sort data =&indata2;
16200 +    by Variable;
16201 +run;
16202 +data &outdata;
16203 +    merge &indata1 &indata2;
16204 +    by Variable;
16205 +    length Type $16;
16206 +    Type = 'Variable';
16207 +    *label Type ='Type';
16208 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16209 +run;
16210 +
16211 +
16212 +data &indata3;
16213 +    set  &indata3 ;
16214 +    length RSqWithOwnClusComp 8.;
16215 +    Cluster = Variable;
16216 +    RSqWithOwnClusComp = 1;
16217 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16218 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16219 +    length Type $16;
16220 +    Type = 'ClusterComp';
16221 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16222 +
16223 +;
16224 +run;
16225 +
16226 +proc sort data=&outdata;
16227 +    by Cluster;
16228 +run;
16229 +proc sort data =&indata3;
16230 +    by Cluster;
16231 +run;
16232 +
16233 +data &outdata;
16234 +     set &outdata &indata3;
16235 +     by Cluster;
16236 +run;
16237 +
16238 +
16239 +/* Create the Selected variable with all YES */
16240 +
16241 +data &outdata;
16242 +     set &outdata;
16243 +     length RsqRatio 8.;
16244 +     length Selected $8;
16245 +     *label RSqRatio = "1-R**2 Ratio";
16246 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16247 +     *label Selected = "Variable Selected";
16248 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16249 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16250 +     Selected ='YES';
16251 +     rename _LABEL_ = Label;
16252 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16253 +run;
16254 +
16255 +
16256 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16257 +        Just create the Selected variable with all YES at the step above
16258 + +------------------------------------------------------------------------------+
16259 +
16260 +proc sort data=&outdata;
16261 +    by Cluster RsqRatio;
16262 +run;
16263 +
16264 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16265 +data &outdata;
16266 +     set &outdata; by Cluster;
16267 +     length Selected $8;
16268 +     label Selected = "Variable Selected";
16269 +     if  first.Cluster then Selected ='Yes';
16270 +     else Selected = 'No';
16271 +    run;
16272 +%end;
16273 +%else %do;
16274 +data &outdata(drop = _var _varchange);
16275 +     set &outdata; retain _var 0; by Cluster;
16276 +     length Selected $8;
16277 +     label Selected = "Variable Selected";
16278 +     if first.Cluster then  _varchange = 0;
16279 +     else _varchange =1;
16280 +     if _var ne _varchange then  Selected  = 'Yes';
16281 +     else Selected = 'No';
16282 +     if last.cluster then  _var = 0;
16283 +     else _var = _varchange;
16284 +run;
16285 +%end;
16286 +
16287 +--------------------------------------------------------------*/
16288 +
16289 +quit;
16290 +%mend MakeVarClusResultTable;
16291 +
16292 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16293 +     proc sort data =&indata;
16294 +        by cluster;
16295 +     run;
16296 +     proc transpose data =&indata
16297 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16298 +          by cluster;
16299 +     run;
16300 +     data &outdata;
16301 +          set  &outdata;
16302 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16303 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16304 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16305 +     run;
16306 +     %if &globalclusid ne %then %do;
16307 +     data &outdata;
16308 +          Length GCluster $16;
16309 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16310 +          set  &outdata;
16311 +          GCluster ="GC&globalclusid.";
16312 +          run;
16313 +     %end;
16314 +
16315 +%Mend MakePlotDataFromCorrTable;
16316 +
16317 +
16318 +%macro MakeCorrelation(indata=,
16319 +                       outstat=_tmpoutstat,
16320 +                       corrmatrix=N,
16321 +                       outcorr=_tmpoutcorr,
16322 +                       includeclassvar=N,
16323 +                       target=,
16324 +                       freq=,
16325 +                       weight=);
16326 +   %if &target eq  %then %do;
16327 +
16328 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16329 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16330 +       %if &includeclassvar eq Y %then %do;
16331 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16332 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16333 +          %do i = 2 %to &nvar;
16334 +          %let varname = %sysfunc(varname(&dsid, &i));
16335 +          &varname
16336 +          %end;
16337 +       %end;
16338 +       ;
16339 +      %if &freq ne  %then %do;
16340 +          freq &freq;
16341 +      %end;
16342 +      %if &weight ne  %then %do;
16343 +          weight &weight;
16344 +      %end;
16345 +
16346 +      run;
16347 +      %if &corrmatrix eq Y %then %do;
16348 +      data  &outcorr (drop = _NCL_ _TYPE_);
16349 +           set  &outstat ;
16350 +           if _TYPE_ ='CORR' then output;
16351 +      run;
16352 +      %end;
16353 +    %end;
16354 +    %else %do;
16355 +       proc corr data=&indata outp=&outstat noprint;
16356 +            var
16357 +       %let dsid = %sysfunc(open(&indata));
16358 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16359 +          %do i = 1 %to &nvar;
16360 +              %let _name = %sysfunc(varname(&dsid, &i));
16361 +              %if &_name ne &target %then;
16362 +              &_name
16363 +           %end;
16364 +        %let dsid= %sysfunc(close(&dsid));
16365 +        ;
16366 +        with &target;
16367 +        run;
16368 +    %end;
16369 +    quit;
16370 +%mend MakeCorrelation;
16371 +
16372 +
16373 +%macro MakeCorrelationDistance(indata=,
16374 +                               outdata=,
16375 +                               rsquare = N
16376 +                               );
16377 +    data corr_tmp;
16378 +        set &indata;
16379 +        if _N_ = 1 then do;
16380 +           output;
16381 +           stop;
16382 +         end;
16383 +    run;
16384 +    %if &outdata ne  %then %let  _outdata = &outdata;
16385 +    %else %let _outdata = &indata;
16386 +
16387 +    data &_outdata;
16388 +         set &indata;
16389 +
16390 +         %let dsid = %sysfunc(open(work.corr_tmp));
16391 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16392 +          %do i = 2 %to &nvar;
16393 +              %let _name = %sysfunc(varname(&dsid, &i));
16394 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16395 +              %else  %let _name_md = &_name;
16396 +              &_name = 1- &_name_md;
16397 +          %end;
16398 +      %let dsid= %sysfunc(close(&dsid));
16399 +      run;
16400 +      proc datasets lib = work nolist;
16401 +           delete corr_tmp;
16402 +      run;
16403 +      quit;
16404 +  %mend MakeCorrelationDistance;
16405 +
16406 +
16407 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16408 +                                   rsquare = N
16409 +                                   );
16410 +    data corr_tmp;
16411 +        set &indata;
16412 +    run;
16413 +    proc sql noprint;
16414 +           update &indata
16415 +           set
16416 +     %let dsid = %sysfunc(open(work.corr_tmp));
16417 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16418 +          %do i = 4 %to &nvar;
16419 +          %let _name = %sysfunc(varname(&dsid, &i));
16420 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16421 +            %else  %let _name_md = &_name;
16422 +            %if &i < &nvar %then %do;
16423 +               &_name = 1- &_name_md ,
16424 +            %end;
16425 +            %else %do;
16426 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16427 +            %end;
16428 +          %end;
16429 +      %let dsid= %sysfunc(close(&dsid));
16430 +
16431 +      select * from &indata;
16432 +      run;
16433 +     data &indata( drop = _NCL_);
16434 +           set &indata;
16435 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16436 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16437 +     run;
16438 +     data &indata(DROP = _NCL_);
16439 +           set &indata;
16440 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16441 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16442 +           rename _NAME_ = _VAR_;
16443 +     run;
16444 +     proc datasets lib = work nolist;
16445 +           delete corr_tmp;
16446 +     run;
16447 +     quit;
16448 + %mend UpdateOutStatCorrToDistance;
16449 +
16450 +
16451 +%macro HierClusWithCorr(indata= ,
16452 +                        ncluster=,
16453 +                        method = Ward,
16454 +                        outtree = _outtree,
16455 +                        idvar =_VAR_,
16456 +                        outdata=,
16457 +                        rescore = N,
16458 +                        newncluster=
16459 +                        );
16460 +      %global &newncluster;
16461 +      %if &rescore ne Y %then %do;
16462 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16463 +                   method=&method outtree=&outtree noprint;
16464 +           id &idvar;
16465 +      run;
16466 +      %end;
16467 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16468 +      run;
16469 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
16470 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
16471 +      run;
16472 +      data _outcontent;
16473 +          set _outcontent;
16474 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
16475 +          index = 1;
16476 +          rename NAME = _NAME_;
16477 +      run;
16478 +      proc sort data=_outcontent;
16479 +          by _NAME_;
16480 +      run;
16481 +      proc sort data =&outdata;
16482 +           by _NAME_;
16483 +      run;
16484 +      data &outdata(drop=index);
16485 +          merge &outdata _outcontent;
16486 +          by _NAME_;
16487 +          if index = . then delete;
16488 +      run;
16489 +      /*-----------------------------------------------------------*/
16490 +      data &outdata;
16491 +           length CLUSNAME $16;
16492 +           set &outdata;
16493 +           if CLUSTER > &ncluster then delete;
16494 +           CLUSNAME='GC'||strip(CLUSTER);
16495 +           *label CLUSNAME = "Cluster Name";
16496 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
16497 +           rename _NAME_ = VARIABLE ;
16498 +           *label _NAME_ = "Variable";
16499 +           *label CLUSTER = "Cluster";
16500 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16501 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16502 +      run;
16503 +      proc sort data=&outdata out=&outdata;
16504 +           by CLUSTER;
16505 +      run;
16506 +      proc means data =&outdata noprint;
16507 +           output out=_meanout;
16508 +      run;
16509 +      data _null_;
16510 +            set _meanout;
16511 +            if strip(_STAT_) eq 'MAX' then do;
16512 +            call symput("&newncluster", CLUSTER);
16513 +            stop;
16514 +            end;
16515 +      run;
16516 +
16517 +      proc datasets lib = work nolist;
16518 +           delete _outcontent _meanout;
16519 +      run;
16520 +      quit;
16521 +%mend  HierClusWithCorr;
16522 +
16523 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
16524 +
16525 +     data _tmpindata;
16526 +          set &indata;
16527 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16528 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16529 +          if _TYPE_ = 'STD' then _NAME_='STD';
16530 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
16531 +          DROP _TYPE_ _NCL_;
16532 +     run;
16533 +
16534 +     filename _file_  "&fileRef";
16535 +
16536 +     data _null_;
16537 +        FILE _file_ MOD;
16538 +        put ' ';
16539 +        put "/*-------------------------------------------------*/";
16540 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
16541 +        put "/*-------------------------------------------------*/";
16542 +        put ' ';
16543 +        %let dsid = %sysfunc(open(work._tmpindata));
16544 +
16545 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16546 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16547 +        %let k = 1;
16548 +        %do %while(^%sysfunc(fetch(&dsid)));
16549 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16550 +               %if &k > 2 %then %do;
16551 +                %let cn = %eval(&k-2);
16552 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
16553 +                %end;
16554 +                %let k = %eval(&k+1);
16555 +
16556 +        %end;
16557 +        %let rc = %sysfunc(rewind(&dsid));
16558 +
16559 +        %do j= 2 %to &nvar;
16560 +            %let _varname = %sysfunc(varname(&dsid, &j));
16561 +            %do %while(^%sysfunc(fetch(&dsid)));
16562 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16563 +                %if &_name = MEAN %then
16564 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
16565 +                %else %if &_name = STD %then
16566 +                %let _std = %sysfunc(getvarn(&dsid, &j));
16567 +                %else %do;
16568 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
16569 +                      %let abscoeff = %sysfunc(abs(&coeff));
16570 +                          %if &abscoeff >  0 %then %do;
16571 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16572 +                           %end;
16573 +                 %end;
16574 +             %end;
16575 +             %let rc = %sysfunc(rewind(&dsid));
16576 +         %end;
16577 +
16578 +        %let dsid= %sysfunc(close(&dsid));
16579 +
16580 +     run;
16581 +
16582 +     filename _file_;
16583 +     proc datasets lib = work nolist;
16584 +           delete _tmpindata;
16585 +     run;
16586 +     quit;
16587 +%mend CreateScoreCode2;
16588 +
16589 +
16590 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
16591 +
16592 +     /*--- Build Code to Modify Metadata ---*/
16593 +     filename X "&deltacodefile";
16594 +     data _null_;
16595 +        FILE X;
16596 +        set &groupds end=eof;
16597 +        if _N_=1 then do;
16598 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16599 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16600 +           %end;
16601 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16602 +           put "if upcase(strip(NAME)) in (";
16603 +        end;
16604 +        if Strip(upcase(Selected)) eq 'YES' then do;
16605 +           string = '"'!!trim(left(VARIABLE))!!'"';
16606 +           put string;
16607 +        end;
16608 +        if eof then do;
16609 +           put ') then ROLE="INPUT";';
16610 +           put 'else ROLE="REJECTED";';
16611 +           put 'end;';
16612 +
16613 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16614 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16615 +           %end;
16616 +        end;
16617 +     run;
16618 +     quit;
16619 +
16620 +     filename X;
16621 +     quit;
16622 +%mend MakeDeltaCode2;
16623 +
16624 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
16625 +  %global &ngc;
16626 +  data _null_;
16627 +  %if &indata ne %then %do;
16628 +      %let dsid = %sysfunc(open(&indata));
16629 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
16630 +      %let dsid = %sysfunc(close(&dsid));
16631 +  %end;
16632 +  %else %do;
16633 +       %let nvar = %eval(&ninput+&ndummy); ;
16634 +  %end;
16635 +  %let numgc = %eval(&nvar/&div+2);
16636 +  %let &ngc = &numgc;
16637 +   run;
16638 +  quit;
16639 +%mend getInitialGClusterNumber;
16640 +
16641 +
16642 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
16643 +data &outlink(drop = Selected);
16644 +     set &indata;
16645 +     LINKID = _N_;
16646 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
16647 +run;
16648 +data &outnode(keep=NODEID TYPE LABEL);
16649 +    set &indata;
16650 +    length TYPE $16;
16651 +    rename VARIABLE = NODEID;
16652 +    *label  CLUSNAME="Node ID";
16653 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16654 +    TYPE = "VARIABLE";
16655 +    *label TYPE = "Node Type";
16656 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16657 +    run;
16658 +data _tmp(keep=NODEID TYPE LABEL);
16659 +    set &indata;
16660 +    length TYPE $16;
16661 +    rename CLUSNAME = NODEID;
16662 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16663 +    TYPE = "GCLUSTER";
16664 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16665 +    run;
16666 +proc sort data=_tmp;
16667 +    by NODEID;
16668 +run;
16669 +data _tmp;
16670 +    set _tmp; by NODEID;
16671 +    if first.NODEID then output;
16672 +run;
16673 +proc sort data=&outnode;
16674 +    by NODEID;
16675 +run;
16676 +data  &outnode;
16677 +    set _tmp &outnode;
16678 +run;
16679 +proc datasets lib = work nolist;
16680 +     delete _tmp;
16681 +run;
16682 +quit;
16683 +%mend MakeGobalConstellData;
16684 +
16685 +/* Make contellation plot data among GCLUSTERS */
16686 +
16687 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
16688 +
16689 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
16690 +     set &indata;
16691 +     LINKID = _N_;
16692 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
16693 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
16694 +     end;
16695 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
16696 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
16697 +     end;
16698 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
16699 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
16700 +    end;
16701 +run;
16702 +
16703 +data _tmp_outrsquare;
16704 +        set &inoutrsq;
16705 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
16706 +run;
16707 +
16708 +proc freq data =_tmp_outrsquare noprint;
16709 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
16710 +run;
16711 +
16712 +data &outnode(keep=_NAME_ TYPE LABEL);
16713 +    set &outlink;
16714 +    length TYPE $16;
16715 +    length LABEL $100;
16716 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
16717 +
16718 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16719 +    TYPE = "GCLUSTER";
16720 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16721 +    end;
16722 +    else do;
16723 +    TYPE= "ROOT";
16724 +    LABEL= _NAME_;
16725 +    end;
16726 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16727 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16728 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16729 +    run;
16730 +
16731 +proc sort data=&outnode;
16732 +     by _NAME_;
16733 +proc sort data=_tmp_GCLUSFREQ;
16734 +     by _NAME_;
16735 +run;
16736 +
16737 +data  &outnode;
16738 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
16739 +     if COUNT=. then COUNT=1;
16740 +run;
16741 +
16742 +proc datasets lib = work nolist;
16743 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
16744 +run;
16745 +
16746 +quit;
16747 +%Mend MakeGClusterConstData;
16748 +
16749 +
16750 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
16751 +
16752 +    data _gscoretmpds;
16753 +          set &indata;
16754 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
16755 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16756 +          if _TYPE_ = 'STD' then _NAME_='STD';
16757 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
16758 +          DROP _TYPE_ _NCL_;
16759 +     run;
16760 +
16761 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
16762 +        GCluster Component &globalclusid ------ */
16763 +
16764 +    filename _file_  "&fileref";
16765 +
16766 +    data _null_;
16767 +        %if &globalclusid eq 1 %then %do;
16768 +          FILE _file_;
16769 +        %end;
16770 +        %else %do;
16771 +          FILE _file_ MOD;
16772 +        %end;
16773 +
16774 +        %let dsid = %sysfunc(open(work._gscoretmpds));
16775 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16776 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16777 +
16778 +        %let k = 1;
16779 +        %do %while(^%sysfunc(fetch(&dsid)));
16780 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16781 +                %if &k > 2 %then %do;
16782 +                put "&_name = 0 ; ";
16783 +                %end;
16784 +                %let k = %eval(&k+1);
16785 +        %end;
16786 +
16787 +        %let rc = %sysfunc(rewind(&dsid));
16788 +        %do i= 2 %to &nvar;
16789 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16790 +            %do %while(^%sysfunc(fetch(&dsid)));
16791 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16792 +                %if &_name = MEAN %then
16793 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16794 +                %else %if &_name = STD %then
16795 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16796 +                %else %do;
16797 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16798 +                      %let abscoeff = %sysfunc(abs(&coeff));
16799 +                          %if &abscoeff >  0 %then %do;
16800 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16801 +                           %end;
16802 +                 %end;
16803 +             %end;
16804 +             %let rc = %sysfunc(rewind(&dsid));
16805 +
16806 +         %end;
16807 +
16808 +        %let dsid= %sysfunc(close(&dsid));
16809 +       run;
16810 +
16811 +
16812 +       proc datasets lib=work nolist;
16813 +            delete _gscoretmpds;
16814 +       run;
16815 +      quit;
16816 +
16817 +%mend CreateGClusterScoreCode;
16818 +
16819 +
16820 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
16821 +
16822 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
16823 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
16824 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
16825 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
16826 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
16827 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
16828 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
16829 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
16830 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
16831 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
16832 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
16833 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
16834 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
16835 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
16836 +
16837 +   filename gsfile "&gscorecode";
16838 +
16839 +   data &EM_USER_GSCORE;
16840 +             set &indata;
16841 +             %include  gsfile;
16842 +        keep
16843 +        %do i=1 %to &ngcluster;
16844 +         %let gcvarname = GC&i;
16845 +         &gcvarname
16846 +        %end;
16847 +     ;
16848 +   run;
16849 +
16850 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
16851 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
16852 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
16853 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
16854 +    noprint  ;
16855 +     var
16856 +       %do i=1 %to &ngcluster;
16857 +         %let gcvarname = GC&i;
16858 +         &gcvarname
16859 +        %end;
16860 +   ;
16861 +   run;
16862 +
16863 +
16864 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
16865 +   data &EM_USER_GSCORECORRPLOT ;
16866 +        set &EM_USER_GSCORECORRPLOT;
16867 +        rename _X_ = X;
16868 +        rename _Y_ = Y;
16869 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16870 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16871 +   run;
16872 +
16873 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
16874 +
16875 +   data &EM_USER_GSCORETREE;
16876 +        length _NAME_ $32;
16877 +        length _LABEL_ $100;
16878 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
16879 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16880 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16881 +        end;else do;
16882 +         _LABEL_ = _NAME_;
16883 +        end;
16884 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16885 +
16886 +   run;
16887 +
16888 +   quit;
16889 +
16890 +%mend MakeGClusterCorrelation;
16891 +
16892 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
16893 +
16894 +
16895 +%macro train;
16896 +
16897 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
16898 +   %include temp;
16899 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
16900 +   %include temp;
16901 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
16902 +   %include temp;
16903 +   filename temp;
16904 +
16905 +   %let VARCLUS_MAXNUMOBS = 100000;
16906 +   %let VARCLUS_MAXNUMVAR = 200;
16907 +   %let trainnum = 0;
16908 +   %let error = 0;
16909 +
16910 +   %if &EM_IMPORT_DATA eq %then %do;
16911 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16912 +       %let  error = 1;
16913 +       %goto endtrain;
16914 +   %end;
16915 +
16916 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
16917 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16918 +        %let  error = 1;
16919 +        %goto endline;
16920 +    %end;
16921 +
16922 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
16923 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
16924 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
16925 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
16926 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
16927 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
16928 +
16929 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
16930 +        %if  &_num_input_total < 2 %then %do;
16931 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16932 +            %let error = 2;
16933 +            %goto endtrain;
16934 +        %end;
16935 +   %end;
16936 +   %else %do;
16937 +         %if  &_num_input_interval < 2 %then %do;
16938 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16939 +         %let error = 2;
16940 +         %goto endtrain;
16941 +         %end;
16942 +   %end;
16943 +
16944 +   %em_checkerror();
16945 +
16946 +   %if &EMEXCEPTIONSTRING ne %then %do;
16947 +       %goto endtrain;
16948 +   %end;
16949 +
16950 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
16951 +
16952 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
16953 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
16954 +                             outvar=&EM_USER_OUTDUMMY,
16955 +                             outdata=_newtrainds,
16956 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
16957 +
16958 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16959 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
16960 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16961 +                proc datasets lib=work nolist;
16962 +                delete  _newtrainds;
16963 +                run;
16964 +                quit;
16965 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16966 +                %let error = 3;
16967 +               %goto endtrain;
16968 +            %end;
16969 +        %end;
16970 +
16971 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16972 +             %getNVar(inds=_newtrainds, nvar=_nvar);
16973 +
16974 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
16975 +                %let trainnum = 2;
16976 +            %end;
16977 +            %else %do;
16978 +                %let trainnum = 1;
16979 +            %end;
16980 +        %end;
16981 +    %end;
16982 +    %else %do;
16983 +
16984 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16985 +
16986 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
16987 +
16988 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16989 +
16990 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16991 +                  %let error = 3;
16992 +                 %goto endtrain;
16993 +            %end;
16994 +        %end;
16995 +
16996 +
16997 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16998 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
16999 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
17000 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
17001 +                %let trainnum = 2;
17002 +            %end;
17003 +            %else %do;
17004 +                %let trainnum = 1;
17005 +            %end;
17006 +        %end;
17007 +
17008 +   %end;
17009 +
17010 +    %em_checkerror();
17011 +
17012 +    %if &EMEXCEPTIONSTRING ne %then %do;
17013 +       %let error = 4;
17014 +       %goto endtrain;
17015 +    %end;
17016 +
17017 +    %CreateVarclusMeta(trainnum=&trainnum);
17018 +
17019 +    %if &error > 0 %then  %goto endtrain;
17020 +
17021 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
17022 +
17023 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17024 +           %train1;
17025 +       %end;
17026 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17027 +           %train2;
17028 +       %end;
17029 +
17030 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17031 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17032 +      %em_copyfile(infref=_in, outfref=_out);
17033 +      filename _in;
17034 +      filename _out;
17035 +
17036 +
17037 +   %endtrain:
17038 +
17039 +
17040 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17042 +%macro VarClus(indata=,
17043 +               outstat=,
17044 +               outtree=,
17045 +               vars=,
17046 +               freq=,
17047 +               weight=,
17048 +               includeclassvar=
17049 +               );
17051 +   %if &vars eq %then
17052 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17054 +        /*Add by ruzhan, May 28, 2013*/
17055 +        ods graphics on;
17056 +        %let odspath =;
17057 +        data _null_;
17058 +            path = pathname('WORK');
17059 +            call symput('odspath', path);
17060 +        run;
17061 +        ods listing gpath="&odspath";
17062 +        ods output DENDROGRAM=&outtree;
17063 +       proc varclus data = &indata outstat= &outstat
17064 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17065 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17066 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17067 +        /*-----------------------
17068 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17069 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17070 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17071 +       %end;
17072 +       -------------------------*/
17073 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17074 +            maxc = &EM_PROPERTY_MAXCLUS
17075 +       %end;
17077 +       /*------------------------------------------------------------------------------------------------------
17078 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17079 +        ------------------------------------------------------------------------------------------------------*/
17081 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17082 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17083 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17084 +       %end;
17086 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17087 +            proportion = &EM_PROPERTY_PROPORTION
17088 +       %end;
17089 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17090 +               summary
17091 +       %end;
17093 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17094 +           short
17095 +       %end;
17096 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17097 +           corr trace simple
17098 +       %end;
17099 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17100 +          noprint
17101 +       %end;
17102 +        /*Comment out by ruzhan, May 28, 2013*/
17103 +       /*       outtree=&outtree*/
17104 +       ;
17105 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17107 +      %if &includeclassvar eq Y %then %do;
17108 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17109 +          %if &dsid > 0 %then %do;
17110 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17111 +              %do i = 2 %to &nvar;
17112 +                  %let varname = %sysfunc(varname(&dsid, &i));
17113 +                   &varname
17114 +              %end;
17116 +          %end;
17117 +      %end;
17119 +      ;
17120 +      /*------------------------
17121 +      %if &freq ne  %then %do;
17122 +          freq &freq;
17123 +      %end;
17124 +      %if &weight ne  %then %do;
17125 +          weight &weight;
17126 +      %end;
17127 +      ----------------------------*/
17128 +      %if %EM_FREQ ne %then %do;
17129 +           Freq %EM_FREQ;
17130 +      %end;
17131 +      ;
17132 +    run;
17133 +    ods graphics off;
17134 +    %endline:
17135 +    quit;
17136 +%mend VarClus;
17138 +%macro Train1;
17140 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17141 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17142 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17143 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17144 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17145 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17146 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17147 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17148 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17149 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17150 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17151 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17152 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17154 +   /*
17155 +     %let VARCLUS_MAXNUMOBS = 100;
17156 +     %let VARCLUS_MAXNUMVAR = 200;
17157 +   */
17159 +   /* Train
17161 +   %if &EM_IMPORT_DATA eq %then %do;
17162 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17163 +       %goto endtrain1;
17164 +   %end;
17166 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17167 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17168 +        %goto endtrain1;
17169 +   %end;
17170 +   */
17171 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17172 +       /* moved this to pretrain ------------
17174 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17175 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17176 +                             outvar=&EM_USER_OUTDUMMY,
17177 +                             outdata=_newtrainds,
17178 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17180 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17181 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17182 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17183 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17184 +                %goto endtrain;
17185 +            %end;
17186 +        %end;
17188 +        +-------------------------------------*/
17190 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17191 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17192 +          There is no _newtrainds */
17193 +         %VarClus( indata=&EM_IMPORT_DATA,
17194 +                  outstat=&EM_USER_OUTSTAT,
17195 +                  outtree = &EM_USER_OUTTREE,
17196 +                  includeclassvar=N
17197 +                 );
17198 +        %end;
17199 +        %else %do;
17200 +        %VarClus( indata=_newtrainds,
17201 +                  outstat=&EM_USER_OUTSTAT,
17202 +                  outtree = &EM_USER_OUTTREE,
17203 +                  includeclassvar=Y
17204 +                 );
17205 +         proc datasets lib=work nolist;
17206 +              delete  _newtrainds;
17207 +         run;
17208 +         %end;
17209 +    %end;
17210 +    %else %do;
17212 +        /*----- moved this to pretrain ------------
17213 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17214 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17215 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17216 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17217 +                 %goto endtrain;
17218 +            %end;
17219 +        %end;
17220 +        +-------------------------------------*/
17222 +        %VarClus(indata=&EM_IMPORT_DATA,
17223 +                  outstat=&EM_USER_OUTSTAT,
17224 +                  outtree =&EM_USER_OUTTREE,
17225 +                  includeclassvar=N
17226 +               );
17228 +   %end;
17230 +   %em_checkerror();
17232 +   %if &EMEXCEPTIONSTRING ne %then %do;
17233 +       %goto endtrain1;
17234 +   %end;
17235 +    /*
17236 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17237 +    */
17239 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17241 +    %let gid=;
17243 +    /*--- To make the main result table ----------------------*/
17245 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17246 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17247 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17248 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17249 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17250 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17252 +   /* Inter Cluster Correlation Plot ------------------------*/
17254 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17255 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17257 +   /* Create some other data sets for results ----*/
17259 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17260 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17261 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17263 +  /*---- move this to Score action ------------
17264 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17265 +   */
17267 +   /* create score code at training time */
17268 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17269 +   %endtrain1:
17270 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17273 +%macro VarClus2( indata=,
17274 +                 outdata=,
17275 +                 outstat =outstat,
17276 +                 outrsquare=outrsquare,
17277 +                 outtree = outtree,
17278 +                 outclusstruct = outclusstruct,
17279 +                 outcluscorr =outcluscorr,
17280 +                 outcluscorrplot =outcluscorrplot,
17281 +                 outclusrsquare =outclusrsquare,
17282 +                 outstatplot = outstatplot,
17283 +                 outcorr = outcorr,
17284 +                 outcorrplot = outcorrplot,
17285 +                 clusdata=,
17286 +                 outnode=outnode,
17287 +                 outlink=outlink,
17288 +                 ngroup =1  );
17289 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17290 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17291 +              %goto endline;
17292 +         %end;
17294 +        %global numglobalcluster;
17295 +        %let  numglobalcluster = &ngroup;
17296 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17297 +        %do vci =1 %to &ngroup;
17298 +           data tmp_clusdata;
17299 +                set &clusdata;
17300 +                if CLUSTER ne &vci then delete;
17301 +           run;
17302 +           %let outstatds = &outstat.&vci;
17303 +           %let outrsquareds = &outrsquare.&vci;
17304 +           %let outtreeds = &outtree.&vci;
17305 +           %let outclusstuctds = &outclusstruct.&vci;
17306 +           %let outcluscorrds = &outcluscorr.&vci;
17307 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17308 +           %let outclusrsquareds = &outclussquare.&vci;
17309 +           %let outstatplotds = &outstatplot.&vci;
17310 +           %let outcorrds = &outcorr.&vci;
17311 +           %let outcorrplotds = &outcorrplot.&vci;
17312 +           %let outnodeds = &outnode.&vci;
17313 +           %let outlinkds = &outlink.&vci;
17315 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17316 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17317 +           %let emuseroutstat = &EM_USER_&outstatds;
17319 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17320 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17321 +           %let emuserouttree = &EM_USER_&outtreeds;
17323 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17324 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17325 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17327 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17328 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17329 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17331 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17332 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17333 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17335 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17336 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17337 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17339 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17340 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17341 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17343 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17344 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17345 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17347 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17348 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17349 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17351 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17352 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17353 +           %let emuseroutnode = &EM_USER_&outnodeds;
17355 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17356 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17357 +           %let emuseroutlink = &EM_USER_&outlinkds;
17359 +           /*Add by ruzhan, May 28, 2013*/
17360 +           ods graphics on;
17361 +            %let odspath =;
17362 +            data _null_;
17363 +                path = pathname('WORK');
17364 +                call symput('odspath', path);
17365 +            run;
17366 +            ods listing gpath="&odspath";
17368 +           ods output DENDROGRAM=&emuserouttree;
17370 +           proc varclus data=&indata outstat=&emuseroutstat
17371 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17372 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17373 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17374 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17375 +                  maxc=&EM_PROPERTY_MAXCLUS
17376 +           %end;
17378 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17379 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17380 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17381 +            %end;
17383 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17384 +                proportion = &EM_PROPERTY_PROPORTION
17385 +           %end;
17386 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17387 +               summary
17388 +           %end;
17389 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17390 +               short
17391 +           %end;
17392 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17393 +               corr trace simple
17394 +           %end;
17395 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17396 +               noprint
17397 +           %end;
17398 +            /*Comment out by ruzhan, May 28, 2013*/
17399 +              /*outtree=&emuserouttree*/
17400 +           ;
17401 +           var
17402 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17403 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17404 +                %do %while(^%sysfunc(fetch(&dsid)));
17405 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17406 +                    &_varname
17407 +                %end;
17408 +            %let dsid = %sysfunc(close(&dsid));
17409 +           ;
17410 +           %if %EM_FREQ ne %then %do;
17411 +           Freq %EM_FREQ;
17412 +           %end;
17413 +           run;
17414 +            ods graphics off;
17415 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17417 +            %let gid=&vci;
17418 +            /*--- To make the main result table ----------------------*/
17419 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17420 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17421 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17422 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17423 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17424 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17426 +            /* Inter Cluster Correlation Plot ------------------------*/
17428 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17429 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17431 +           /* Create some other data sets for results ---------------*/
17433 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17434 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17435 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17437 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17439 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17441 +           %if &vci = 1 %then %do;
17442 +           data &EM_USER_OUTRSQUARE;
17443 +                set &emuseroutrsquare;
17444 +           run;
17445 +           %end;
17446 +           %else %do;
17447 +           data &EM_USER_OUTRSQUARE;
17448 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17449 +           run;
17450 +           %end;
17451 +           quit;
17452 +       %end;
17454 +       /*---- move this to Score action ------------
17455 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17456 +       */
17458 +       /* Make Score Gcluster component & correlation  */
17459 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
17461 +       quit;
17462 +       %endline:
17463 +%mend VarClus2;
17466 +%macro Train2;
17468 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17469 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17470 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17471 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17472 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17473 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17474 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17475 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17476 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17477 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17478 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17479 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
17480 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
17481 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
17482 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
17483 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
17484 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
17485 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
17489 +    /* Train */
17491 +   /* moved to pretrain ------------
17493 +   %if &EM_IMPORT_DATA eq %then %do;
17494 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17495 +       %goto endtrain2;
17496 +   %end;
17498 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17499 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17500 +        %goto endtrain2;
17501 +   %end;
17502 +   +-------------------------------------------*/
17504 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17507 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17509 +        /*----- moved to pretrain ------------
17511 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17512 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17513 +                             outvar=&EM_USER_OUTDUMMY,
17514 +                             outdata=_newtrainds,
17515 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
17516 +                              ndummyvars=_ndummyvars
17517 +                            );
17519 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17520 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17521 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17522 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17523 +                %goto endtrain;
17524 +            %end;
17525 +        %end;
17527 +        +---------------------------------------*/
17528 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17529 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17530 +          There is no _newtrainds */
17531 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
17532 +                             outstat=&EM_USER_GOUTSTAT,
17533 +                             corrmatrix=Y,
17534 +                             outcorr=&EM_USER_GOUTCORR,
17535 +                             includeclassvar=N,
17536 +                             freq =%EM_FREQ
17537 +                          );
17538 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17540 +        %end;
17541 +        %else %do;
17542 +         %MakeCorrelation(   indata=_newtrainds,
17543 +                             outstat=&EM_USER_GOUTSTAT,
17544 +                             corrmatrix=Y,
17545 +                             outcorr=&EM_USER_GOUTCORR,
17546 +                             includeclassvar=Y,
17547 +                             freq =%EM_FREQ
17548 +                          );
17549 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
17551 +        %end;
17553 +    %end;
17554 +    %else %do;
17556 +        /* moved to pretrain -------------------
17558 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17559 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17560 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17561 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17562 +                %goto endtrain;
17563 +            %end;
17564 +        %end;
17565 +         +------------------------------------------*/
17567 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
17568 +                          outstat=&EM_USER_GOUTSTAT,
17569 +                          corrmatrix=Y,
17570 +                          outcorr=&EM_USER_GOUTCORR,
17571 +                          includeclassvar=N,
17572 +                          freq =%EM_FREQ
17573 +                          );
17574 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17575 +    %end;
17577 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
17578 +                                rsquare = N
17579 +                                );
17580 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
17581 +                      ncluster=&_ngc,
17582 +                      method = Ward,
17583 +                      outtree =&EM_USER_GOUTTREE,
17584 +                      idvar = _VAR_,
17585 +                      outdata=&EM_USER_GOUTGROUP,
17586 +                      rescore = N,
17587 +                      newncluster=_newnclus
17588 +                        );
17590 +   /* store the number of global cluster */
17592 +   data &EM_USER_VARCLUSMETA;
17593 +        set &EM_USER_VARCLUSMETA;
17594 +        NGCluster = &_newnclus;
17595 +   run;
17597 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
17599 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17600 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17601 +            %VarClus2(indata=&EM_IMPORT_DATA,
17602 +                 clusdata=&EM_USER_GOUTGROUP,
17603 +                 ngroup=&_newnclus);
17604 +         %end;
17605 +         %else %do;
17606 +             %VarClus2(indata=_newtrainds,
17607 +                 clusdata=&EM_USER_GOUTGROUP,
17608 +                 ngroup=&_newnclus);
17610 +         %end;
17612 +   %end;
17613 +   %else %do;
17614 +       %VarClus2(indata=&EM_IMPORT_DATA,
17615 +                 clusdata=&EM_USER_GOUTGROUP,
17616 +                 ngroup=&_newnclus);
17617 +   %end;
17619 +   %em_checkerror();
17620 +   %if &EMEXCEPTIONSTRING ne %then %do;
17621 +       %put &em_codebar;
17622 +       %put Error: Variable clustering failed.;
17623 +       %put &em_codebar;
17624 +       %goto endtrain2;
17625 +   %end;
17626 +   /*
17627 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17628 +   */
17629 +   %endtrain2:
17630 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
17632 +%macro em_copyfile(infref=, outfref=, append=N);
17633 +
17634 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
17635 +
17636 +       %let omode =;
17637 +       %if &append=Y %then
17638 +           %let omode = MOD;
17639 +       data _null_;
17640 +          length line $20000;
17641 +          file &outfref &omode lrecl=20000;
17642 +          fid=fopen("&infref",'i',20000,'v');
17643 +          if fid > 0  then do;
17644 +             do while(^fread(fid));
17645 +                rlen = frlen(fid);
17646 +                rc= fget(fid,line,20000);
17647 +                start = length(line)-length(left(line))+1;
17648 +                line=strip(line);
17649 +                put @start line;
17650 +             end;
17651 +             if fid > 0  then rc=fclose(fid);
17652 +          end;
17653 +       run;
17654 +
17655 +   %end;
17656 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
17657  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:97
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.15 seconds
 
 
 
17658  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           10.08 seconds
      cpu time            0.45 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: The data set EMWS1.VARCLUS_OUTTREE has 19 observations and 3 variables.
NOTE: The data set EMWS1.VARCLUS_OUTSTAT has 66 observations and 16 variables.
NOTE: The PROCEDURE VARCLUS printed page 2.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           10.23 seconds
      cpu time            0.46 seconds
 
 
 
17659  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 66 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 66 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 16 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 16 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 12 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 66 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 13 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 13 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 13 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 13 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 66 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSSTRUCT has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSSTRUCT has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 52 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 52 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 52 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 39 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 39 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 39 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 13 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 13 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 13 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK._OWNRSQ.
NOTE: There were 13 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 13 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 13 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 4 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: There were 4 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 17 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      47048:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      47048:84
NOTE: There were 66 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 16 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 13 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS1.VARCLUS_OUTCORR has 13 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.VARCLUS_OUTCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCORR has 13 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.VARCLUS_OUTCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 169 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 169 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 169 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 156 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 156 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 156 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 156 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 169 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 169 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 156 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 169 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 169 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 169 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 169 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTLINK has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTNODE has 17 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 66 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATSCORE has 6 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file _FILE_ is:
      Filename=C:\Users\yinyen\Desktop\DataMiningProject3\SASEM_Project\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=19Dec2019:15:20:41,
      Create Time=19Dec2019:15:19:43
 
NOTE: 22 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 92.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file _OUT is:
      Filename=C:\Users\yinyen\Desktop\DataMiningProject3\SASEM_Project\Workspaces\EMWS1\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19Dec2019:15:20:41,
      Create Time=19Dec2019:15:19:43
 
NOTE: 22 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 92.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
17660  *------------------------------------------------------------*;
17661  * End TRAIN: VarClus;
17662  *------------------------------------------------------------*;
17663
 
17664  *------------------------------------------------------------*;
17665  * Close any missing semi colons;
17666  *------------------------------------------------------------*;
17667  ;
17668  ;
17669  ;
17670  ;
17671  quit;
17672  *------------------------------------------------------------*;
17673  * Close any unbalanced quotes;
17674  *------------------------------------------------------------*;
17675  /*; *"; *'; */
17676  ;
17677  run;
17678  quit;
17679  /* Reset EM Options */
17680  options formchar="|----|+|---+=|-/\<>*";
17681  options nocenter ls=256 ps=10000;
17682  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                December 19, 2019
Time:                15:20:42
*------------------------------------------------------------*
17784  %let EMEXCEPTIONSTRING=;
17785  *------------------------------------------------------------*;
17786  * SCORE: VarClus;
17787  *------------------------------------------------------------*;
17788  %let EM_ACTION = SCORE;
17789  %let syscc = 0;
17790
17791  %macro main;
17792
17793     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
17794     %include temp;
17795     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
17796     %include temp;
17797     filename temp;
17798
17799    %SetProperties;
17800
17801     %if %upcase(&EM_ACTION) = CREATE %then %do;
17802         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
17803         %include temp;
17804         filename temp;
17805         %create;
17806     %end;
17807     %else
17808     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17809          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
17810             %include temp;
17811             filename temp;
17812             %train;
17813     %end;
17814     %else
17815     %if %upcase(&EM_ACTION) = SCORE %then %do;
17816             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
17817             %include temp;
17818             filename temp;
17819             %score;
17820     %end;
17821     %else
17822     %if %upcase(&EM_ACTION) = REPORT %then %do;
17823             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
17824             %include temp;
17825             filename temp;
17826             %report;
17827     %end;
17828     /*
17829     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
17830         %put 'OPENING TABLE';
17831     %end;
17832     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
17833         %put 'CLOSE TABLE';
17834     %end;
17835     */
17836  %mend main;
17837  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
17838 +
17839 +/* Initialize property macro variables */
17840 +%macro SetProperties;
17841 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
17842 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
17843 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
17844 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
17845 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
17846 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
17847 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
17848 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
17849 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
17850 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
17851 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
17852 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
17853 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
17854 +
17855 +%mend SetProperties;
17856 +
17857 +%Macro MakeDummyVariables(indata=,
17858 +                          outvar=,
17859 +                          outdata=,
17860 +                          fileref=,
17861 +                          recreatecmeta=N, /* optional */
17862 +                          incmeta=,     /* optional */
17863 +                          outcmeta=,    /* optional */
17864 +                          ndummyvars=_ndummyvars
17865 +                          );
17866 +    %global &ndummyvars;
17867 +
17868 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
17869 +       class
17870 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17871 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17872 +    ;
17873 +    run;
17874 +    %let &ndummyvars = 0;
17875 +    data _null_;
17876 +    %let dsid = %sysfunc(open(work._classout));
17877 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
17878 +    %let dsid = %sysfunc(close(&dsid));
17879 +    run;
17880 +
17881 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
17882 +       input
17883 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17884 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17885 +        / level=nominal stdize=no;
17886 +       make outvar = &outvar;
17887 +       score data = &indata out =&outdata;
17888 +       code  file=  "&fileref";
17889 +    run;
17890 +    %if &recreatecmeta eq Y %then %do;
17891 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
17892 +    data _tmpds;
17893 +        set _tmpds;
17894 +           ROLE = 'INPUT';
17895 +           LEVEL = 'INTERVAL';
17896 +           CREATOR='DMZIP';
17897 +           if NAME = '_TYPE_' then delete;
17898 +    run;
17899 +    data &outcmeta;
17900 +         set &incmeta _tmpds;
17901 +    run;
17902 +    %end;
17903 +    proc datasets lib=work nolist;
17904 +      delete  _dmdbdat _dmdbcat _classout
17905 +    %if &recreatecmeta eq Y %then %do;
17906 +    _tmpds
17907 +    %end;
17908 +    ;
17909 +    quit;
17910 +%Mend MakeDummyVariables;
17911 +
17912 +/*--- Determine Optimal Number of Cluster ----
17913 +%macro FindClusNum(statds=, groupds=, minvariation=);
17914 +   %global optnclus;
17915 +   data varclus_tmp(drop=_NAME_);
17916 +      set &statDs;
17917 +      where _type_ ='PROPOR';
17918 +   run;
17919 +   proc sort data=varclus_tmp;
17920 +      by _NCL_;
17921 +   run;
17922 +   proc transpose data=varclus_tmp out=varclus_tmp;
17923 +      by _NCL_;
17924 +      var %EM_INTERVAL_INPUT
17925 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17926 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17927 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
17928 +          %do i = 2 %to &nvar;
17929 +          %let varname = %sysfunc(varname(&dsid, &i));
17930 +          &varname
17931 +          %end;
17932 +      %end;
17933 +   ;
17934 +   run;
17935 +
17936 +   %if &minVariation eq %then %do;
17937 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
17938 +   %end;
17939 +   %if ^(0<&minVariation<100) %then %do;
17940 +       %let minVariation = 90;
17941 +   %end;
17942 +
17943 +   data _null_;
17944 +      set varclus_tmp end=eof;
17945 +      by _NCL_;
17946 +      retain flag 0;
17947 +      if first._ncl_ then flag=0;
17948 +      if .<col1 < &minVariation then flag=1;
17949 +      if last._ncl_ and ^flag then do;
17950 +         call symput('OPTNCL', _ncl_);
17951 +         stop;
17952 +      end;
17953 +     if eof then call symput('OPTNCL', _ncl_);
17954 +   run;
17955 +
17956 +   %let optnclus = &OPTNCL;
17957 +
17958 +   data varclus_tmp(drop=_NCL_ _NAME_);
17959 +      set &statDs;
17960 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
17961 +   run;
17962 +   proc sort data=varclus_tmp;
17963 +      by _TYPE_;
17964 +   run;
17965 +   proc transpose data=varclus_tmp out=varclus_tmp;
17966 +      by _TYPE_;
17967 +   run;
17968 +   proc sort data=varclus_tmp;
17969 +      by _name_ _type_;
17970 +   run;
17971 +
17972 +  proc transpose data=varclus_tmp out=&groupds;
17973 +      by _NAME_;
17974 +   run;
17975 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
17976 +      by Cluster descending Rsquare;
17977 +      where Cluster ne 0;
17978 +   run;
17979 +   proc datasets lib=work nolist mt=(DATA VIEW);
17980 +      delete varclus_tmp;
17981 +   run;
17982 +   quit;
17983 +%mend findClusNum;
17984 +*/
17985 +
17986 +%macro getNclusfromTrain(inoutstat=, nc=);
17987 +%global &nc;
17988 +data _null_;
17989 +    set &inoutstat end=eof;
17990 +    if eof then do;
17991 +    call symput("&nc", _ncl_);
17992 +    end;
17993 +run;
17994 +%mend  getNclusfromTrain;
17995 +
17996 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
17997 +
17998 +     *--- Build Code to Modify Metadata ---*;
17999 +     filename X "&deltacodefile";
18000 +     data _null_;
18001 +        FILE X;
18002 +        set &groupds end=eof;
18003 +        /*by Cluster;*/
18004 +         if _N_=1 then do;
18005 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18006 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18007 +           %end;
18008 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18009 +           put "if upcase(strip(NAME)) in (";
18010 +        end;
18011 +        if Strip(upcase(Selected)) eq 'YES' then do;
18012 +           string = '"'!!trim(left(VARIABLE))!!'"';
18013 +           put string;
18014 +        end;
18015 +        if eof then do;
18016 +           put ') then ROLE="INPUT";';
18017 +           put 'else ROLE="REJECTED";';
18018 +           put 'end;';
18019 +
18020 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18021 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18022 +           %end;
18023 +        end;
18024 +     run;
18025 +     quit;
18026 +
18027 +     filename X;
18028 +
18029 +     quit;
18030 +%mend MakeDeltaCode;
18031 +
18032 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18033 +    %if ^%sysfunc(exist(&statds)) %then %do;
18034 +         %goto doendc;
18035 +    %end;
18036 +
18037 +    data &corrds(drop=_TYPE_ _NCL_) ;
18038 +       set &statds;
18039 +       where _type_ eq 'CORR' ;
18040 +    run ;
18041 +    proc sort data=&corrds;
18042 +       by _NAME_ ;
18043 +    run ;
18044 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18045 +      BY _NAME_ ;
18046 +    run ;
18047 +    data &corrplotds;
18048 +       length _Y_ $100;
18049 +       set &corrplotDs;
18050 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18051 +    run ;
18052 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18053 +       set &corrplotds;
18054 +       where _LABEL_ ne '' ;
18055 +       keep _TMP_ _LABEL_ ;
18056 +    run ;
18057 +    data _null_;
18058 +       nobs=0;
18059 +       dsid = open('varclus_match');
18060 +       if dsid then do;
18061 +          nobs = attrn(dsid, 'NOBS');
18062 +          dsid = close(dsid);
18063 +       end;
18064 +       call symput ('CORR_NOBS', nobs);
18065 +    run;
18066 +    %if &corr_nobs %then %do;
18067 +        proc sort data=varclus_match;
18068 +           by _name_;
18069 +        run ;
18070 +        proc sort data=&corrplotds;
18071 +           by _name_;
18072 +        run ;
18073 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18074 +           merge varclus_match &corrplotds;
18075 +           by _NAME_ ;
18076 +           if _X_ eq '' then _X_=_NAME_ ;
18077 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18078 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18079 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18080 +
18081 +       run ;
18082 +    %end;
18083 +    %else %do;
18084 +        proc sort data=&corrplotds;
18085 +           by _name_;
18086 +        run ;
18087 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18088 +           set &corrplotds;
18089 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18090 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18091 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18092 +
18093 +        run ;
18094 +    %end;
18095 +    proc sort data=&corrplotds;
18096 +       by _X_ _Y_;
18097 +    run ;
18098 +    proc datasets lib=work nolist mt=(DATA VIEW);
18099 +       delete varclus_match;
18100 +    run;
18101 +    quit;
18102 +
18103 +%doendc:
18104 +
18105 +%mend MakeVarClusCorrData;
18106 +
18107 +%macro MakeStatPlotData(statds= , outstatplotds=);
18108 +   %if %sysfunc(exist(&statds)) %then %do;
18109 +
18110 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18111 +          set &statDs;
18112 +          where _type_ in('MEAN', 'STD', 'N');
18113 +       run ;
18114 +       proc transpose data=varclus_tmp out=&outstatplotds;
18115 +          id _TYPE_ ;
18116 +       run ;
18117 +       data &outstatplotds;
18118 +          set &outstatplotds(obs=1000);
18119 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18120 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18121 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18122 +          else SCALEDSTD= STD ;
18123 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18124 +       run ;
18125 +       proc sort data=&outstatplotds;
18126 +          by descending SCALEDSTD ;
18127 +       run ;
18128 +       proc datasets lib=work nolist mt=(DATA VIEW);
18129 +          delete varclus_tmp;
18130 +       run;
18131 +       quit;
18132 +    %end;
18133 +
18134 +%mend MakeStatPlotData;
18135 +
18136 +
18137 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18138 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18139 +    data &EM_USER_OUTSTATSCORE;
18140 +          set &indata;
18141 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18142 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18143 +          if _TYPE_ = 'STD' then _NAME_='STD';
18144 +          DROP _TYPE_ _NCL_;
18145 +     run;
18146 +
18147 +     filename _file_  "&fileRef";
18148 +
18149 +     data _null_;
18150 +        FILE _file_ MOD;
18151 +        put ' ';
18152 +        put '/*-------------------------------------------------*/';
18153 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18154 +        put '/*-------------------------------------------------*/';
18155 +        put ' ';
18156 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18157 +
18158 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18159 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18160 +
18161 +        %let k = 1;
18162 +        %do %while(^%sysfunc(fetch(&dsid)));
18163 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18164 +                %if &k > 2 %then %do;
18165 +                 %let cn = %eval(&k-2);
18166 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18167 +                %end;
18168 +                %let k = %eval(&k+1);
18169 +        %end;
18170 +
18171 +        %let rc = %sysfunc(rewind(&dsid));
18172 +
18173 +        %do i= 2 %to &nvar;
18174 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18175 +            %do %while(^%sysfunc(fetch(&dsid)));
18176 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18177 +                %if &_name = MEAN %then
18178 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18179 +                %else %if &_name = STD %then
18180 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18181 +                %else %do;
18182 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18183 +                      %let abscoeff = %sysfunc(abs(&coeff));
18184 +                          %if &abscoeff >  0 %then %do;
18185 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18186 +                           %end;
18187 +                 %end;
18188 +             %end;
18189 +             %let rc = %sysfunc(rewind(&dsid));
18190 +         %end;
18191 +
18192 +        %let dsid= %sysfunc(close(&dsid));
18193 +       run;
18194 +%mend CreateScoreCode;
18195 +
18196 +
18197 +
18198 +/*----------------------------------------------------------
18199 +    Instead of using %MakeRSquareData,
18200 +    %MakeVarClusResultTable at macro2.source is used
18201 + +----------------------------------------------------------*/
18202 +
18203 +
18204 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18205 +
18206 +/* modifying  from ods rsquare = data */
18207 +
18208 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18209 +    Length Cluster $16;
18210 +    length Variable $32;
18211 +    Length VariableLabel $64;
18212 +    set &indata; retain CurrentCluster;
18213 +    if NumberOfClusters ^= &ncluster then delete;
18214 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18215 +    CurrentCluster = Cluster;
18216 +   run;
18217 +proc sort data =&outdata ;
18218 +     by Cluster RsquareRatio;
18219 +run;
18220 +data _tmprsq(drop=index);
18221 +     set &outdata; by Cluster;
18222 +     if first.Cluster then do;
18223 +     index = strip(scan(Cluster,2 ));
18224 +     Variable = "Clus"||index;
18225 +     VariableLabel = "Cluster Component "||index;
18226 +     OwnCluster = 1;
18227 +     NextClosest = .;
18228 +     RsquareRatio = 0;
18229 +     output;
18230 +     end;
18231 +run;
18232 +
18233 +proc sort data = _tmprsq ;
18234 +     by Cluster RsquareRatio;
18235 +run;
18236 +data &outdata;
18237 +     set &outdata _tmprsq;
18238 +by Cluster;
18239 +run;
18240 +
18241 +
18242 +/* Just create the Selected variable with all YES */
18243 +
18244 +data &outdata;
18245 +    set &outdata; by cluster;
18246 +    length Selected $8;
18247 +    Selected = 'YES';
18248 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18249 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18250 +    rename OwnCluster = RSqWithClusterComp;
18251 +    rename NextClosest = RSqWithNextClusComp;
18252 +run;
18253 +
18254 +
18255 +/* Selected = Y/N will be done %score section -----
18256 +
18257 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18258 +data &outdata;
18259 +    set &outdata; by cluster;
18260 +    length Selected $8;
18261 +    if first.Cluster then Selected = 'YES';
18262 +    else Selected = 'NO';
18263 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18264 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18265 +    rename OwnCluster = RSqWithClusterComp;
18266 +    rename NextClosest = RSqWithNextClusComp;
18267 +run;
18268 +%end;
18269 +%else %do;
18270 +data &outdata;
18271 +    set &outdata; by cluster;
18272 +    if last.Cluster then Selected = 'YES';
18273 +    else Selected = 'NO';
18274 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18275 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18276 +    rename OwnCluster = RSqWithClusterComp;
18277 +    rename NextClosest = RSqWithNextClusComp;
18278 +run;
18279 +%end;
18280 +---------------------------------------------------------------*/
18281 +
18282 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18283 +/* to calculate NextClosestClusRsq */
18284 +proc transpose data = &inClusRSquare  out=_clusRsq;
18285 +      by cluster;
18286 +      run;
18287 +data _clusRsq;
18288 +     set _clusRsq;
18289 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18290 +run;
18291 +
18292 +proc sort data=_clusRsq;
18293 +    by cluster col1;
18294 +    run;
18295 +data _clusRsq(drop=_NAME_ _LABEL_);
18296 +     set _clusRsq; by cluster;
18297 +     if last.Cluster then output;
18298 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18299 +     rename COL1 = RSqWithNextClusComp;
18300 +     rename Cluster = Variable;
18301 +     label  Cluster = "Variable";
18302 +run;
18303 +
18304 +proc sort data =&outdata;
18305 +     by Variable;
18306 +run;
18307 +data &outdata;
18308 +    merge &outdata _clusRsq;
18309 +    by Variable;
18310 +run;
18311 +proc sort data =&outdata;
18312 +by Cluster  RsquareRatio;
18313 +run;
18314 +quit;
18315 +%end;
18316 +
18317 +proc datasets lib = work nolist;
18318 +     delete _tmprsq _clusRsq;
18319 +     run;
18320 +quit;
18321 +
18322 +%mend MakeRSquareData;
18323 +
18324 +
18325 +/*-------------------------------------------------------------------------*/
18326 +
18327 +
18328 +
18329 +%macro ModifyCorr(indata=,
18330 +                  outdata=,
18331 +                  rsquare = Y
18332 +                  );
18333 +    data corr_tmp;
18334 +        set &indata;
18335 +    run;
18336 +     proc sql;
18337 +           update &indata
18338 +           set
18339 +     %let dsid = %sysfunc(open(work.corr_tmp));
18340 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18341 +          %do i = 4 %to &nvar;
18342 +          %let _name = %sysfunc(varname(&dsid, &i));
18343 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18344 +            %else  %let _name_md = &_name;
18345 +            %if &i < &nvar %then %do;
18346 +               &_name = 1- &_name_md ,
18347 +            %end;
18348 +            %else %do;
18349 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18350 +            %end;
18351 +          %end;
18352 +      %let dsid= %sysfunc(close(&dsid));
18353 +
18354 +      select * from &indata;
18355 +      run;
18356 +      proc datasets lib = work nolist;
18357 +           delete corr_tmp;
18358 +      run;
18359 +      quit;
18360 +
18361 + %mend ModifyCorr;
18362 +
18363 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18364 +    data &outdata(drop= _NCL_  _TYPE_);
18365 +       set &indata;
18366 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18367 +       rename _NAME_ = Cluster;
18368 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18369 +    run;
18370 +    %if &RSquare eq Y %then %do;
18371 +     data corr_tmp;
18372 +        set &outdata;
18373 +     run;
18374 +
18375 +     data &outdata(drop=i);
18376 +          set &outdata;
18377 +          %let dsid = %sysfunc(open(work.corr_tmp));
18378 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18379 +          %do i = 2 %to &nvar;
18380 +            %let _name = %sysfunc(varname(&dsid, &i));
18381 +            %let _name_md = &_name.**2;
18382 +                &_name = &_name_md;
18383 +          %end;
18384 +      %let dsid= %sysfunc(close(&dsid));
18385 +      run;
18386 +      proc datasets lib = work nolist;
18387 +           delete corr_tmp;
18388 +      run;
18389 +
18390 +    %end;
18391 +     quit;
18392 +%mend MakeClusStructCorrData;
18393 +
18394 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18395 +    data &outdata(drop= _NCL_  _TYPE_);
18396 +       set &indata;
18397 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18398 +       rename _NAME_ = Cluster;
18399 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18400 +    run;
18401 +    data corr_tmp;
18402 +        set &outdata;
18403 +    run;
18404 +
18405 +    %let dsid = %sysfunc(open(work.corr_tmp));
18406 +    %let nclus2= %eval(&ncluster+1);
18407 +    data &outdata;
18408 +         set &outdata;
18409 +          %do i = 2 %to &nclus2;
18410 +          %let i_1 = %eval(&i-1);
18411 +            %let _name = %sysfunc(varname(&dsid, &i));
18412 +            %let _newName = Clus&i_1;
18413 +                rename &_name = &_newName; ;
18414 +                *label &_name ="Cluster &i_1";
18415 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18416 +          %end;
18417 +          keep Cluster
18418 +          %do i = 2 %to &nclus2;
18419 +                %let _name = %sysfunc(varname(&dsid, &i));
18420 +                &_name
18421 +          %end;
18422 +          ;
18423 +    %let dsid= %sysfunc(close(&dsid));
18424 +     run;
18425 +     quit;
18426 +
18427 +    %if &RSquare eq Y %then %do;
18428 +
18429 +       data corr_tmp;
18430 +        set &outdata;
18431 +     run;
18432 +
18433 +     data &outdata(drop=i);
18434 +          set &outdata;
18435 +          %let dsid = %sysfunc(open(work.corr_tmp));
18436 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18437 +          %do i = 2 %to &nvar;
18438 +            %let _name = %sysfunc(varname(&dsid, &i));
18439 +            %let _name_md = &_name.**2;
18440 +                &_name = &_name_md;
18441 +          %end;
18442 +      %let dsid= %sysfunc(close(&dsid));
18443 +      run;
18444 +    %end;
18445 +
18446 +    %if &makeplotds eq Y %then %do;
18447 +     proc transpose data = &outdata
18448 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18449 +          by cluster;
18450 +     run;
18451 +     data &plotds;
18452 +          set  &plotds;
18453 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18454 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18455 +     run;
18456 +     %end;
18457 +     proc datasets lib = work nolist;
18458 +           delete corr_tmp;
18459 +     run;
18460 +     quit;
18461 +%mend MakeInterClusCorrData;
18462 +
18463 +
18464 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18465 +
18466 +data &outlink(drop = Selected);
18467 +     set &indata;
18468 +     LINKID = _N_;
18469 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18470 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18471 +run;
18472 +data &outnode(keep=NODEID TYPE LABEL);
18473 +    set &indata;
18474 +    length TYPE $16;
18475 +    rename Variable = NODEID;
18476 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18477 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18478 +    then  TYPE = "CLUSTER";
18479 +    else  TYPE="VARIABLE";
18480 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18481 +run;
18482 +quit;
18483 +%mend MakeClusConstellData;
18484 +
18485 +
18486 +
18487 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18488 +
18489 +data &outlink(drop = Selected);
18490 +     set &indata;
18491 +     LINKID = _N_;
18492 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18493 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18494 +run;
18495 +data &outnode(keep=NODEID TYPE LABEL);
18496 +    set &indata;
18497 +    length TYPE $16;
18498 +    rename Variable = NODEID;
18499 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18500 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18501 +    then  TYPE = "CLUSTER";
18502 +    else  TYPE="VARIABLE";
18503 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18504 +run;
18505 +quit;
18506 +%mend MakeClusConstellData;
18507 +
18508 +
18509 +/*--- This will work only when inds is not a view data -------
18510 +
18511 +%macro getNVarNObs(inds=, nvar=, nobs=);
18512 +
18513 +    %global &nvar;
18514 +    %global &nobs;
18515 +    data _null_;
18516 +         dsid = open("&inds");
18517 +         nv = attrn(dsid, 'NVAR');
18518 +         no = attrn(dsid, 'NOBS');
18519 +         dsid = close(dsid);
18520 +         call symput("&nvar", nv);
18521 +         call symput("&nobs", no);
18522 +    run;
18523 +    quit;
18524 +%mend  getNVarNObs;
18525 +
18526 ++---------------------------------------------------------------*/
18527 +
18528 +
18529 +%macro getNVar(inds=, nvar=);
18530 +    %global &nvar;
18531 +    data _null_;
18532 +         dsid = open("&inds");
18533 +         nv = attrn(dsid, 'NVAR');
18534 +         dsid = close(dsid);
18535 +         call symput("&nvar", nv);
18536 +    run;
18537 +    quit;
18538 +%mend  getNVar;
18539 +
18540 +
18541 +
18542 +%macro getNObs(inds=, nobs=);
18543 +    %global &nobs;
18544 +    data _null_;
18545 +        set &inds end=eof;
18546 +        if eof then call symput("&nobs", _N_);
18547 +    run;
18548 +    quit;
18549 +%mend  getNObs;
18550 +
18551 +%Macro CreateVarclusMeta(trainnum=);
18552 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18553 +    data &EM_USER_VARCLUSMETA;
18554 +         length TrainNum 8.;
18555 +         length NewTrain $8;
18556 +         length NGCluster 8.;
18557 +         length ExportedComp $16;
18558 +         length HideVariable $8;
18559 +         TrainNum = &trainnum;
18560 +         NewTrain = "Y";
18561 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18562 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18563 +         NGCluster = 0; /* zero means no twostage */
18564 +   run;
18565 +   quit;
18566 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18567 +
18568 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18569 +    data &outdata(drop= _NCL_  _TYPE_);
18570 +       set &indata;
18571 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18572 +       %if &globalclusid ne %then %do;
18573 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18574 +       rename _NAME_ = Cluster;
18575 +       %end;
18576 +       %else %do;
18577 +        _NAME_ = upcase(_NAME_);
18578 +       rename _NAME_ = Cluster;
18579 +       %end;
18580 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18581 +    run;
18582 +    data corr_tmp;
18583 +        set &outdata;
18584 +    run;
18585 +
18586 +    %let dsid = %sysfunc(open(work.corr_tmp));
18587 +    %let nclus2= %eval(&ncluster+1);
18588 +    data &outdata;
18589 +         set &outdata;
18590 +          %do i = 2 %to &nclus2;
18591 +          %let i_1 = %eval(&i-1);
18592 +            %let _name = %sysfunc(varname(&dsid, &i));
18593 +            %if &globalclusid ne %then
18594 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18595 +                     rename &_name = &_newName;
18596 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18597 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18598 +                %end;
18599 +            %else
18600 +                %do; %let _newName = CLUS&i_1;
18601 +                     rename &_name = &_newName;
18602 +                     *label &_name ="Cluster &i_1";
18603 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18604 +                %end;
18605 +          %end;
18606 +          keep Cluster
18607 +          %do i = 2 %to &nclus2;
18608 +                %let _name = %sysfunc(varname(&dsid, &i));
18609 +                &_name
18610 +          %end;
18611 +          ;
18612 +    %let dsid= %sysfunc(close(&dsid));
18613 +     run;
18614 +     quit;
18615 +
18616 +    %if &RSquare eq Y %then %do;
18617 +
18618 +       data corr_tmp;
18619 +        set &outdata;
18620 +     run;
18621 +
18622 +     data &outdata;
18623 +          set &outdata;
18624 +          %let dsid = %sysfunc(open(work.corr_tmp));
18625 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18626 +          %do i = 2 %to &nvar;
18627 +            %let _name = %sysfunc(varname(&dsid, &i));
18628 +            %let _name_md = &_name.**2;
18629 +                &_name = &_name_md;
18630 +          %end;
18631 +      %let dsid= %sysfunc(close(&dsid));
18632 +      run;
18633 +    %end;
18634 +
18635 +    %if &makeplotds eq Y %then %do;
18636 +     proc transpose data = &outdata
18637 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18638 +          by cluster;
18639 +     run;
18640 +     data &plotds;
18641 +          set  &plotds;
18642 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18643 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18644 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18645 +     run;
18646 +     %end;
18647 +     proc datasets lib = work nolist;
18648 +           delete corr_tmp;
18649 +     run;
18650 +     quit;
18651 +%mend MakeInterClusCorrData;
18652 +
18653 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18654 +    data _tmpds(drop= _NCL_);
18655 +       set &indata;
18656 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18657 +       %if &globalclusid ne %then %do;
18658 +           _NAME_ = "GC&globalclusid.";
18659 +       rename _NAME_ = Cluster;
18660 +       %end;
18661 +       %else %do;
18662 +        _NAME_ = "CLUS";
18663 +        rename _NAME_ = Cluster;
18664 +       %end;
18665 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18666 +    run;
18667 +    proc transpose data =_tmpds out =&outdata;
18668 +    run;
18669 +
18670 +    data &outdata(drop=COL1);
18671 +        %if &globalclusid ne %then %do;
18672 +        length GCluster $16;
18673 +        %end;
18674 +        length Cluster $32;
18675 +        length _NAME_ $32;
18676 +         set &outdata;
18677 +         _NAME_ = upcase(_NAME_);
18678 +         rename _NAME_=Variable;
18679 +         *label _NAME_="Variable";
18680 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18681 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18682 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18683 +
18684 +         %if &globalclusid ne %then %do;
18685 +          GCluster = "GC&globalclusid";
18686 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18687 +         %end;
18688 +         %else %do;
18689 +         Cluster = "CLUS"||strip(COL1);
18690 +        %end;
18691 +         rename COL2 = RSqWithOwnClusComp;
18692 +         *label COL2 = "R-Square With Own Cluster Component";
18693 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18694 +
18695 +   run;
18696 +   proc sort data =&outdata;
18697 +        by Cluster RSqWithOwnClusComp;
18698 +   run;
18699 +   proc datasets lib = work nolist;
18700 +           delete _tmpds;
18701 +   run;
18702 +   quit;
18703 +%mend MakeOwnRSquare;
18704 +
18705 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18706 +    data &outdata(drop= _NCL_  _TYPE_);
18707 +       %if &globalclusid ne %then %do;
18708 +        length GCluster $16;
18709 +        %end;
18710 +       set &indata;
18711 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18712 +       %if &globalclusid ne %then %do;
18713 +         GCluster = "GC&globalclusid";
18714 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18715 +         rename _NAME_ = Cluster;
18716 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18717 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18718 +
18719 +       %end;
18720 +       %else %do;
18721 +         _NAME_ = upcase(_NAME_);
18722 +         rename _NAME_ = Cluster;
18723 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18724 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18725 +
18726 +       %end;
18727 +     run;
18728 +    %if &RSquare eq Y %then %do;
18729 +     data corr_tmp;
18730 +          set &outdata;
18731 +     run;
18732 +     %let istart = 2;
18733 +     %if &globalclusid ne %then %let istart = 3;
18734 +     data &outdata;
18735 +          set &outdata;
18736 +          %let dsid = %sysfunc(open(work.corr_tmp));
18737 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18738 +          %do i =&istart %to &nvar;
18739 +            %let _name = %sysfunc(varname(&dsid, &i));
18740 +            %let _name_md = &_name.**2;
18741 +                &_name = &_name_md;
18742 +          %end;
18743 +      %let dsid= %sysfunc(close(&dsid));
18744 +      run;
18745 +      proc datasets lib = work nolist;
18746 +           delete corr_tmp;
18747 +      run;
18748 +    %end;
18749 +     quit;
18750 +%mend MakeClusStructCorrData;
18751 +
18752 +/*
18753 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18754 +*/
18755 +
18756 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18757 +
18758 +     /* The indata should be the outdata
18759 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18760 +
18761 +     proc sort data =&indata out=_tmpclusRsq;
18762 +     by cluster;
18763 +     run;
18764 +
18765 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18766 +      by cluster;
18767 +     run;
18768 +
18769 +     proc sort data=_tmpclusRsq;
18770 +        by _NAME_ COL1;
18771 +     run;
18772 +
18773 +     data _tmpclusRsq;
18774 +         length _NAME_ $32;
18775 +         set _tmpclusRsq; by _NAME_;
18776 +          _NAME_ = upcase(_NAME_);
18777 +          %if &ncluster ne 1 %then %do;
18778 +             if last._NAME_ then delete;
18779 +          %end;
18780 +          %else %do;
18781 +             COL1 = 0;
18782 +          %end;
18783 +     run;
18784 +     /* need to sort again */
18785 +     proc sort data=_tmpclusRsq;
18786 +        by _NAME_ COL1;
18787 +     run;
18788 +
18789 +     data &outdata;
18790 +         set _tmpclusRsq; by _NAME_;
18791 +         Cluster = upcase(Cluster);
18792 +         if last._NAME_ then output;
18793 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18794 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18795 +         rename COL1 = RSqWithNextClusComp;
18796 +         Cluster = upcase(Cluster);
18797 +         rename Cluster = ClosestCluster;
18798 +         *label  Cluster = "Next Closest Cluster";
18799 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18800 +         rename _NAME_ = Variable;
18801 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18802 +    run;
18803 +
18804 +
18805 +    %if &globalclusid ne %then %do;
18806 +    data &outdata;
18807 +       length GCluster $16;
18808 +       set &outdata;
18809 +       GCluster = "GC&globalclusid";
18810 +       run;
18811 +    %end;
18812 +    proc datasets lib = work nolist;
18813 +           delete _tmpclusRsq;
18814 +    run;
18815 +    quit;
18816 +%mend FindNextClosestClusByVar;
18817 +
18818 +
18819 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
18820 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
18821 +     proc sort data =&indata out=_tmpclusRsq;
18822 +     by cluster;
18823 +     run;
18824 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18825 +     by cluster;
18826 +     run;
18827 +     proc sort data=_tmpclusRsq;
18828 +        by _NAME_ col1;
18829 +     run;
18830 +     data _tmpclusRsq;
18831 +         length _NAME_ $32;
18832 +         set _tmpclusRsq; by _NAME_;
18833 +          _NAME_ = upcase(_NAME_);
18834 +          %if &ncluster ne 1 %then %do;
18835 +             if last._NAME_ then delete;
18836 +          %end;
18837 +          %else %do;
18838 +             COL1 = 0;
18839 +          %end;
18840 +     run;
18841 +     data &outdata;
18842 +         set _tmpclusRsq; by _NAME_;
18843 +         Cluster = upcase(Cluster);
18844 +         if last._NAME_ then output;
18845 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18846 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18847 +         rename COL1 = RSqWithNextClusComp;
18848 +         Cluster = upcase(Cluster);
18849 +         rename Cluster = ClosestCluster;
18850 +         *label  Cluster = "Next Closest Cluster";
18851 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18852 +         rename _NAME_ = Variable;
18853 +         *label  _NAME_ = "Variable";
18854 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18855 +
18856 +    run;
18857 +    %if &globalclusid ne %then %do;
18858 +    data &outdata;
18859 +       length GCluster $16;
18860 +       set &outdata;
18861 +       GCluster = "GC&globalclusid";
18862 +       run;
18863 +    %end;
18864 +
18865 +    proc datasets lib = work nolist;
18866 +           delete _tmpclusRsq;
18867 +    run;
18868 +
18869 +    quit;
18870 +%mend FindNextClosestClusByCluster;
18871 +
18872 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
18873 +/*----
18874 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
18875 +-----------*/
18876 +
18877 +proc sort data =&indata1;
18878 +    by Variable;
18879 +run;
18880 +proc sort data =&indata2;
18881 +    by Variable;
18882 +run;
18883 +data &outdata;
18884 +    merge &indata1 &indata2;
18885 +    by Variable;
18886 +    length Type $16;
18887 +    Type = 'Variable';
18888 +    *label Type ='Type';
18889 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18890 +run;
18891 +
18892 +
18893 +data &indata3;
18894 +    set  &indata3 ;
18895 +    length RSqWithOwnClusComp 8.;
18896 +    Cluster = Variable;
18897 +    RSqWithOwnClusComp = 1;
18898 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
18899 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18900 +    length Type $16;
18901 +    Type = 'ClusterComp';
18902 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18903 +
18904 +;
18905 +run;
18906 +
18907 +proc sort data=&outdata;
18908 +    by Cluster;
18909 +run;
18910 +proc sort data =&indata3;
18911 +    by Cluster;
18912 +run;
18913 +
18914 +data &outdata;
18915 +     set &outdata &indata3;
18916 +     by Cluster;
18917 +run;
18918 +
18919 +
18920 +/* Create the Selected variable with all YES */
18921 +
18922 +data &outdata;
18923 +     set &outdata;
18924 +     length RsqRatio 8.;
18925 +     length Selected $8;
18926 +     *label RSqRatio = "1-R**2 Ratio";
18927 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
18928 +     *label Selected = "Variable Selected";
18929 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
18930 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
18931 +     Selected ='YES';
18932 +     rename _LABEL_ = Label;
18933 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18934 +run;
18935 +
18936 +
18937 +/*----  Selected = Y/N will be assigened at the %score                   -------+
18938 +        Just create the Selected variable with all YES at the step above
18939 + +------------------------------------------------------------------------------+
18940 +
18941 +proc sort data=&outdata;
18942 +    by Cluster RsqRatio;
18943 +run;
18944 +
18945 +%if &selectedcomp eq CLUSTERCOMP %then %do;
18946 +data &outdata;
18947 +     set &outdata; by Cluster;
18948 +     length Selected $8;
18949 +     label Selected = "Variable Selected";
18950 +     if  first.Cluster then Selected ='Yes';
18951 +     else Selected = 'No';
18952 +    run;
18953 +%end;
18954 +%else %do;
18955 +data &outdata(drop = _var _varchange);
18956 +     set &outdata; retain _var 0; by Cluster;
18957 +     length Selected $8;
18958 +     label Selected = "Variable Selected";
18959 +     if first.Cluster then  _varchange = 0;
18960 +     else _varchange =1;
18961 +     if _var ne _varchange then  Selected  = 'Yes';
18962 +     else Selected = 'No';
18963 +     if last.cluster then  _var = 0;
18964 +     else _var = _varchange;
18965 +run;
18966 +%end;
18967 +
18968 +--------------------------------------------------------------*/
18969 +
18970 +quit;
18971 +%mend MakeVarClusResultTable;
18972 +
18973 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
18974 +     proc sort data =&indata;
18975 +        by cluster;
18976 +     run;
18977 +     proc transpose data =&indata
18978 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18979 +          by cluster;
18980 +     run;
18981 +     data &outdata;
18982 +          set  &outdata;
18983 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18984 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18985 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
18986 +     run;
18987 +     %if &globalclusid ne %then %do;
18988 +     data &outdata;
18989 +          Length GCluster $16;
18990 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18991 +          set  &outdata;
18992 +          GCluster ="GC&globalclusid.";
18993 +          run;
18994 +     %end;
18995 +
18996 +%Mend MakePlotDataFromCorrTable;
18997 +
18998 +
18999 +%macro MakeCorrelation(indata=,
19000 +                       outstat=_tmpoutstat,
19001 +                       corrmatrix=N,
19002 +                       outcorr=_tmpoutcorr,
19003 +                       includeclassvar=N,
19004 +                       target=,
19005 +                       freq=,
19006 +                       weight=);
19007 +   %if &target eq  %then %do;
19008 +
19009 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
19010 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
19011 +       %if &includeclassvar eq Y %then %do;
19012 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
19013 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19014 +          %do i = 2 %to &nvar;
19015 +          %let varname = %sysfunc(varname(&dsid, &i));
19016 +          &varname
19017 +          %end;
19018 +       %end;
19019 +       ;
19020 +      %if &freq ne  %then %do;
19021 +          freq &freq;
19022 +      %end;
19023 +      %if &weight ne  %then %do;
19024 +          weight &weight;
19025 +      %end;
19026 +
19027 +      run;
19028 +      %if &corrmatrix eq Y %then %do;
19029 +      data  &outcorr (drop = _NCL_ _TYPE_);
19030 +           set  &outstat ;
19031 +           if _TYPE_ ='CORR' then output;
19032 +      run;
19033 +      %end;
19034 +    %end;
19035 +    %else %do;
19036 +       proc corr data=&indata outp=&outstat noprint;
19037 +            var
19038 +       %let dsid = %sysfunc(open(&indata));
19039 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19040 +          %do i = 1 %to &nvar;
19041 +              %let _name = %sysfunc(varname(&dsid, &i));
19042 +              %if &_name ne &target %then;
19043 +              &_name
19044 +           %end;
19045 +        %let dsid= %sysfunc(close(&dsid));
19046 +        ;
19047 +        with &target;
19048 +        run;
19049 +    %end;
19050 +    quit;
19051 +%mend MakeCorrelation;
19052 +
19053 +
19054 +%macro MakeCorrelationDistance(indata=,
19055 +                               outdata=,
19056 +                               rsquare = N
19057 +                               );
19058 +    data corr_tmp;
19059 +        set &indata;
19060 +        if _N_ = 1 then do;
19061 +           output;
19062 +           stop;
19063 +         end;
19064 +    run;
19065 +    %if &outdata ne  %then %let  _outdata = &outdata;
19066 +    %else %let _outdata = &indata;
19067 +
19068 +    data &_outdata;
19069 +         set &indata;
19070 +
19071 +         %let dsid = %sysfunc(open(work.corr_tmp));
19072 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19073 +          %do i = 2 %to &nvar;
19074 +              %let _name = %sysfunc(varname(&dsid, &i));
19075 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19076 +              %else  %let _name_md = &_name;
19077 +              &_name = 1- &_name_md;
19078 +          %end;
19079 +      %let dsid= %sysfunc(close(&dsid));
19080 +      run;
19081 +      proc datasets lib = work nolist;
19082 +           delete corr_tmp;
19083 +      run;
19084 +      quit;
19085 +  %mend MakeCorrelationDistance;
19086 +
19087 +
19088 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19089 +                                   rsquare = N
19090 +                                   );
19091 +    data corr_tmp;
19092 +        set &indata;
19093 +    run;
19094 +    proc sql noprint;
19095 +           update &indata
19096 +           set
19097 +     %let dsid = %sysfunc(open(work.corr_tmp));
19098 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19099 +          %do i = 4 %to &nvar;
19100 +          %let _name = %sysfunc(varname(&dsid, &i));
19101 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19102 +            %else  %let _name_md = &_name;
19103 +            %if &i < &nvar %then %do;
19104 +               &_name = 1- &_name_md ,
19105 +            %end;
19106 +            %else %do;
19107 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19108 +            %end;
19109 +          %end;
19110 +      %let dsid= %sysfunc(close(&dsid));
19111 +
19112 +      select * from &indata;
19113 +      run;
19114 +     data &indata( drop = _NCL_);
19115 +           set &indata;
19116 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19117 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19118 +     run;
19119 +     data &indata(DROP = _NCL_);
19120 +           set &indata;
19121 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19122 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19123 +           rename _NAME_ = _VAR_;
19124 +     run;
19125 +     proc datasets lib = work nolist;
19126 +           delete corr_tmp;
19127 +     run;
19128 +     quit;
19129 + %mend UpdateOutStatCorrToDistance;
19130 +
19131 +
19132 +%macro HierClusWithCorr(indata= ,
19133 +                        ncluster=,
19134 +                        method = Ward,
19135 +                        outtree = _outtree,
19136 +                        idvar =_VAR_,
19137 +                        outdata=,
19138 +                        rescore = N,
19139 +                        newncluster=
19140 +                        );
19141 +      %global &newncluster;
19142 +      %if &rescore ne Y %then %do;
19143 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19144 +                   method=&method outtree=&outtree noprint;
19145 +           id &idvar;
19146 +      run;
19147 +      %end;
19148 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19149 +      run;
19150 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19151 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19152 +      run;
19153 +      data _outcontent;
19154 +          set _outcontent;
19155 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19156 +          index = 1;
19157 +          rename NAME = _NAME_;
19158 +      run;
19159 +      proc sort data=_outcontent;
19160 +          by _NAME_;
19161 +      run;
19162 +      proc sort data =&outdata;
19163 +           by _NAME_;
19164 +      run;
19165 +      data &outdata(drop=index);
19166 +          merge &outdata _outcontent;
19167 +          by _NAME_;
19168 +          if index = . then delete;
19169 +      run;
19170 +      /*-----------------------------------------------------------*/
19171 +      data &outdata;
19172 +           length CLUSNAME $16;
19173 +           set &outdata;
19174 +           if CLUSTER > &ncluster then delete;
19175 +           CLUSNAME='GC'||strip(CLUSTER);
19176 +           *label CLUSNAME = "Cluster Name";
19177 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19178 +           rename _NAME_ = VARIABLE ;
19179 +           *label _NAME_ = "Variable";
19180 +           *label CLUSTER = "Cluster";
19181 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19182 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19183 +      run;
19184 +      proc sort data=&outdata out=&outdata;
19185 +           by CLUSTER;
19186 +      run;
19187 +      proc means data =&outdata noprint;
19188 +           output out=_meanout;
19189 +      run;
19190 +      data _null_;
19191 +            set _meanout;
19192 +            if strip(_STAT_) eq 'MAX' then do;
19193 +            call symput("&newncluster", CLUSTER);
19194 +            stop;
19195 +            end;
19196 +      run;
19197 +
19198 +      proc datasets lib = work nolist;
19199 +           delete _outcontent _meanout;
19200 +      run;
19201 +      quit;
19202 +%mend  HierClusWithCorr;
19203 +
19204 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19205 +
19206 +     data _tmpindata;
19207 +          set &indata;
19208 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19209 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19210 +          if _TYPE_ = 'STD' then _NAME_='STD';
19211 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19212 +          DROP _TYPE_ _NCL_;
19213 +     run;
19214 +
19215 +     filename _file_  "&fileRef";
19216 +
19217 +     data _null_;
19218 +        FILE _file_ MOD;
19219 +        put ' ';
19220 +        put "/*-------------------------------------------------*/";
19221 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19222 +        put "/*-------------------------------------------------*/";
19223 +        put ' ';
19224 +        %let dsid = %sysfunc(open(work._tmpindata));
19225 +
19226 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19227 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19228 +        %let k = 1;
19229 +        %do %while(^%sysfunc(fetch(&dsid)));
19230 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19231 +               %if &k > 2 %then %do;
19232 +                %let cn = %eval(&k-2);
19233 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19234 +                %end;
19235 +                %let k = %eval(&k+1);
19236 +
19237 +        %end;
19238 +        %let rc = %sysfunc(rewind(&dsid));
19239 +
19240 +        %do j= 2 %to &nvar;
19241 +            %let _varname = %sysfunc(varname(&dsid, &j));
19242 +            %do %while(^%sysfunc(fetch(&dsid)));
19243 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19244 +                %if &_name = MEAN %then
19245 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19246 +                %else %if &_name = STD %then
19247 +                %let _std = %sysfunc(getvarn(&dsid, &j));
19248 +                %else %do;
19249 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19250 +                      %let abscoeff = %sysfunc(abs(&coeff));
19251 +                          %if &abscoeff >  0 %then %do;
19252 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19253 +                           %end;
19254 +                 %end;
19255 +             %end;
19256 +             %let rc = %sysfunc(rewind(&dsid));
19257 +         %end;
19258 +
19259 +        %let dsid= %sysfunc(close(&dsid));
19260 +
19261 +     run;
19262 +
19263 +     filename _file_;
19264 +     proc datasets lib = work nolist;
19265 +           delete _tmpindata;
19266 +     run;
19267 +     quit;
19268 +%mend CreateScoreCode2;
19269 +
19270 +
19271 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19272 +
19273 +     /*--- Build Code to Modify Metadata ---*/
19274 +     filename X "&deltacodefile";
19275 +     data _null_;
19276 +        FILE X;
19277 +        set &groupds end=eof;
19278 +        if _N_=1 then do;
19279 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19280 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19281 +           %end;
19282 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19283 +           put "if upcase(strip(NAME)) in (";
19284 +        end;
19285 +        if Strip(upcase(Selected)) eq 'YES' then do;
19286 +           string = '"'!!trim(left(VARIABLE))!!'"';
19287 +           put string;
19288 +        end;
19289 +        if eof then do;
19290 +           put ') then ROLE="INPUT";';
19291 +           put 'else ROLE="REJECTED";';
19292 +           put 'end;';
19293 +
19294 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19295 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19296 +           %end;
19297 +        end;
19298 +     run;
19299 +     quit;
19300 +
19301 +     filename X;
19302 +     quit;
19303 +%mend MakeDeltaCode2;
19304 +
19305 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19306 +  %global &ngc;
19307 +  data _null_;
19308 +  %if &indata ne %then %do;
19309 +      %let dsid = %sysfunc(open(&indata));
19310 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19311 +      %let dsid = %sysfunc(close(&dsid));
19312 +  %end;
19313 +  %else %do;
19314 +       %let nvar = %eval(&ninput+&ndummy); ;
19315 +  %end;
19316 +  %let numgc = %eval(&nvar/&div+2);
19317 +  %let &ngc = &numgc;
19318 +   run;
19319 +  quit;
19320 +%mend getInitialGClusterNumber;
19321 +
19322 +
19323 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19324 +data &outlink(drop = Selected);
19325 +     set &indata;
19326 +     LINKID = _N_;
19327 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19328 +run;
19329 +data &outnode(keep=NODEID TYPE LABEL);
19330 +    set &indata;
19331 +    length TYPE $16;
19332 +    rename VARIABLE = NODEID;
19333 +    *label  CLUSNAME="Node ID";
19334 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19335 +    TYPE = "VARIABLE";
19336 +    *label TYPE = "Node Type";
19337 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19338 +    run;
19339 +data _tmp(keep=NODEID TYPE LABEL);
19340 +    set &indata;
19341 +    length TYPE $16;
19342 +    rename CLUSNAME = NODEID;
19343 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19344 +    TYPE = "GCLUSTER";
19345 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19346 +    run;
19347 +proc sort data=_tmp;
19348 +    by NODEID;
19349 +run;
19350 +data _tmp;
19351 +    set _tmp; by NODEID;
19352 +    if first.NODEID then output;
19353 +run;
19354 +proc sort data=&outnode;
19355 +    by NODEID;
19356 +run;
19357 +data  &outnode;
19358 +    set _tmp &outnode;
19359 +run;
19360 +proc datasets lib = work nolist;
19361 +     delete _tmp;
19362 +run;
19363 +quit;
19364 +%mend MakeGobalConstellData;
19365 +
19366 +/* Make contellation plot data among GCLUSTERS */
19367 +
19368 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19369 +
19370 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19371 +     set &indata;
19372 +     LINKID = _N_;
19373 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19374 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19375 +     end;
19376 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19377 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19378 +     end;
19379 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19380 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19381 +    end;
19382 +run;
19383 +
19384 +data _tmp_outrsquare;
19385 +        set &inoutrsq;
19386 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19387 +run;
19388 +
19389 +proc freq data =_tmp_outrsquare noprint;
19390 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19391 +run;
19392 +
19393 +data &outnode(keep=_NAME_ TYPE LABEL);
19394 +    set &outlink;
19395 +    length TYPE $16;
19396 +    length LABEL $100;
19397 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19398 +
19399 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19400 +    TYPE = "GCLUSTER";
19401 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19402 +    end;
19403 +    else do;
19404 +    TYPE= "ROOT";
19405 +    LABEL= _NAME_;
19406 +    end;
19407 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19408 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19409 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19410 +    run;
19411 +
19412 +proc sort data=&outnode;
19413 +     by _NAME_;
19414 +proc sort data=_tmp_GCLUSFREQ;
19415 +     by _NAME_;
19416 +run;
19417 +
19418 +data  &outnode;
19419 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19420 +     if COUNT=. then COUNT=1;
19421 +run;
19422 +
19423 +proc datasets lib = work nolist;
19424 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19425 +run;
19426 +
19427 +quit;
19428 +%Mend MakeGClusterConstData;
19429 +
19430 +
19431 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19432 +
19433 +    data _gscoretmpds;
19434 +          set &indata;
19435 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19436 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19437 +          if _TYPE_ = 'STD' then _NAME_='STD';
19438 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19439 +          DROP _TYPE_ _NCL_;
19440 +     run;
19441 +
19442 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19443 +        GCluster Component &globalclusid ------ */
19444 +
19445 +    filename _file_  "&fileref";
19446 +
19447 +    data _null_;
19448 +        %if &globalclusid eq 1 %then %do;
19449 +          FILE _file_;
19450 +        %end;
19451 +        %else %do;
19452 +          FILE _file_ MOD;
19453 +        %end;
19454 +
19455 +        %let dsid = %sysfunc(open(work._gscoretmpds));
19456 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19457 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19458 +
19459 +        %let k = 1;
19460 +        %do %while(^%sysfunc(fetch(&dsid)));
19461 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19462 +                %if &k > 2 %then %do;
19463 +                put "&_name = 0 ; ";
19464 +                %end;
19465 +                %let k = %eval(&k+1);
19466 +        %end;
19467 +
19468 +        %let rc = %sysfunc(rewind(&dsid));
19469 +        %do i= 2 %to &nvar;
19470 +            %let _varname =  %sysfunc(varname(&dsid, &i));
19471 +            %do %while(^%sysfunc(fetch(&dsid)));
19472 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19473 +                %if &_name = MEAN %then
19474 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19475 +                %else %if &_name = STD %then
19476 +                %let _std = %sysfunc(getvarn(&dsid, &i));
19477 +                %else %do;
19478 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19479 +                      %let abscoeff = %sysfunc(abs(&coeff));
19480 +                          %if &abscoeff >  0 %then %do;
19481 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19482 +                           %end;
19483 +                 %end;
19484 +             %end;
19485 +             %let rc = %sysfunc(rewind(&dsid));
19486 +
19487 +         %end;
19488 +
19489 +        %let dsid= %sysfunc(close(&dsid));
19490 +       run;
19491 +
19492 +
19493 +       proc datasets lib=work nolist;
19494 +            delete _gscoretmpds;
19495 +       run;
19496 +      quit;
19497 +
19498 +%mend CreateGClusterScoreCode;
19499 +
19500 +
19501 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19502 +
19503 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19504 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19505 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19506 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19507 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19508 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19509 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19510 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19511 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19512 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19513 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19514 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19515 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19516 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19517 +
19518 +   filename gsfile "&gscorecode";
19519 +
19520 +   data &EM_USER_GSCORE;
19521 +             set &indata;
19522 +             %include  gsfile;
19523 +        keep
19524 +        %do i=1 %to &ngcluster;
19525 +         %let gcvarname = GC&i;
19526 +         &gcvarname
19527 +        %end;
19528 +     ;
19529 +   run;
19530 +
19531 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19532 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19533 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19534 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19535 +    noprint  ;
19536 +     var
19537 +       %do i=1 %to &ngcluster;
19538 +         %let gcvarname = GC&i;
19539 +         &gcvarname
19540 +        %end;
19541 +   ;
19542 +   run;
19543 +
19544 +
19545 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19546 +   data &EM_USER_GSCORECORRPLOT ;
19547 +        set &EM_USER_GSCORECORRPLOT;
19548 +        rename _X_ = X;
19549 +        rename _Y_ = Y;
19550 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19551 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19552 +   run;
19553 +
19554 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19555 +
19556 +   data &EM_USER_GSCORETREE;
19557 +        length _NAME_ $32;
19558 +        length _LABEL_ $100;
19559 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19560 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19561 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19562 +        end;else do;
19563 +         _LABEL_ = _NAME_;
19564 +        end;
19565 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19566 +
19567 +   run;
19568 +
19569 +   quit;
19570 +
19571 +%mend MakeGClusterCorrelation;
19572 +
19573 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
19574 +%macro score;
19575 +
19576 +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
19577 +%include temp;
19578 +filename temp;
19579 +
19580 +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
19581 +
19582 +data _null_;
19583 +         set &EM_USER_VARCLUSMETA;
19584 +         if _N_=1 then
19585 +         call symput('_trainnum', TrainNum);
19586 +         call symput('_exportedcomp', ExportedComp);
19587 +         call symput('_hidevariable', HideVariable);
19588 +         call symput('_newTrain', NewTrain);
19589 +run;
19590 +
19591 +%if &_newTrain = N %then %do;
19592 +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
19593 +        %else %let _exportedCompChanged = Y;
19594 +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
19595 +        %else  %let _hideVariableChanged = Y;
19596 +%end;
19597 +%else %do;
19598 +        %let _exportedCompChanged = Y;
19599 +        %let _hideVariableChanged = Y;
19600 +%end;
19601 +
19602 +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
19603 +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
19604 +     %include temp;
19605 +     filename temp;
19606 +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19607 +%end;
19608 +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
19609 +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
19610 +     %include temp;
19611 +     filename temp;
19612 +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19613 +%end;
19614 +
19615 +  /* store  current property values */
19616 + data &EM_USER_VARCLUSMETA;
19617 +       set &EM_USER_VARCLUSMETA;
19618 +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19619 +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19620 + run;
19621 +
19622 +%mend score;
19623 +
19624 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
19625 +
19626 +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
19627 +     proc sort data =&indata;
19628 +              by Cluster RsqRatio Type;
19629 +     run;
19630 +     /*----------------------------------------------------------------------
19631 +      The Type variabe is used becuse the variable need to be selected
19632 +        instead of Cluster component when only one variable is in the cluster
19633 +     +-----------------------------------------------------------------------*/
19634 +
19635 +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
19636 +         data &indata;
19637 +              set &indata; by cluster;
19638 +              if first.Cluster then Selected = 'YES';
19639 +              else Selected = 'NO';
19640 +         run;
19641 +         quit;
19642 +    %end;
19643 +    %else %do;
19644 +         data &indata(drop = _var _varchange);
19645 +              set &indata; retain _var 0; by Cluster;
19646 +             if first.Cluster then  _varchange = 0;
19647 +                 else _varchange =1;
19648 +             if _var ne _varchange then  Selected  = 'YES';
19649 +             else Selected = 'NO';
19650 +             if last.cluster then  _var = 0;
19651 +             else _var = _varchange;
19652 +         run;
19653 +         quit;
19654 +    %end;
19655 +%mend ChangeVariableSelectionFlag;
19656 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
19657 +
19658 +%macro score1(ExportedCompChanged=,
19659 +              HideVariableChanged=);
19660 +
19661 +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
19662 +   %if &ExportedCompChanged = Y %then %do;
19663 +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
19664 +   %end;
19665 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
19666 +
19667 +%mend score1;
19668 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 17 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 17 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file X is:
      Filename=C:\Users\yinyen\Desktop\DataMiningProject3\SASEM_Project\Workspaces\EMWS1\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=19Dec2019:15:20:42,
      Create Time=19Dec2019:15:19:43
 
NOTE: 10 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 75.
NOTE: There were 17 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref X has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19669  *------------------------------------------------------------*;
19670  * End SCORE: VarClus;
19671  *------------------------------------------------------------*;
19672
 
19673  filename emflow "C:\Users\yinyen\Desktop\DataMiningProject3\SASEM_Project\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19674  *------------------------------------------------------------*;
19675  * VarClus: Scoring DATA data;
19676  *------------------------------------------------------------*;
19677  data EMWS1.VarClus_TRAIN
19678  / view=EMWS1.VarClus_TRAIN
19679  ;
19680  set EMWS1.Impt_TRAIN
19681  ;
19682  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\yinyen\Desktop\DataMiningProject3\SASEM_Project\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19683 +
19684 +/*-------------------------------------------------*/
19685 +/* Varclus Score Code Begins*/
19686 +/*-------------------------------------------------*/
19687 +
19688 +Clus1 = 0 ; /*---Cluster Component 1------ */
19689 +Clus2 = 0 ; /*---Cluster Component 2------ */
19690 +Clus3 = 0 ; /*---Cluster Component 3------ */
19691 +Clus4 = 0 ; /*---Cluster Component 4------ */
19692 +Clus1 = Clus1+0.2309309348203 * (IMP_domestic_gross - 18139990.4321364)/56597813.0066098;
19693 +Clus1 = Clus1+0.22436987061898 * (IMP_domestic_opening - 4927103.23613213)/17326105.0088038;
19694 +Clus1 = Clus1+0.22498861430359 * (IMP_foreign_gross - 27897016.0534439)/96925031.1802297;
19695 +Clus3 = Clus3+0.2703173586525 * (IMP_runtime - 99.8267786891675)/18.7154039848606;
19696 +Clus3 = Clus3+0.43188814916958 * (IMP_ss_count - 67.173933489405)/83.9283354024275;
19697 +Clus2 = Clus2+0.34384252589752 * (IMP_ss_mean - 0.70179955655745)/0.1745191461535;
19698 +Clus2 = Clus2+0.25199980181587 * (IMP_ss_median - 0.8623872026251)/0.33444133714858;
19699 +Clus2 = Clus2+0.31063983218708 * (IMP_ss_p25 - 0.4891304347826)/0.48366291352497;
19700 +Clus4 = Clus4+1 * (IMP_ss_p75 - 0.98297785069729)/0.11905726804805;
19701 +Clus2 = Clus2+-0.2771726412744 * (IMP_ss_std - 0.42246050415712)/0.10798106557532;
19702 +Clus1 = Clus1+0.23412963595666 * (IMP_total_gross - 46074314.9107819)/148952791.568187;
19703 +Clus1 = Clus1+0.17302986059132 * (IMP_user_rating_count - 10702.487861413)/33978.8369838085;
19704 +Clus3 = Clus3+0.43186873238275 * (tomatometer_count - 67.2916324856439)/84.0467795990883;
NOTE: %INCLUDE (level 1) ending.
19705  run;
 
NOTE: DATA STEP view saved on file EMWS1.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
19706  quit;
19707  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
19708  filename emflow "C:\Users\yinyen\Desktop\DataMiningProject3\SASEM_Project\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19709  *------------------------------------------------------------*;
19710  * VarClus: Scoring VALIDATE data;
19711  *------------------------------------------------------------*;
19712  data EMWS1.VarClus_VALIDATE
19713  / view=EMWS1.VarClus_VALIDATE
19714  ;
19715  set EMWS1.Impt_VALIDATE
19716  ;
19717  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\yinyen\Desktop\DataMiningProject3\SASEM_Project\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19718 +
19719 +/*-------------------------------------------------*/
19720 +/* Varclus Score Code Begins*/
19721 +/*-------------------------------------------------*/
19722 +
19723 +Clus1 = 0 ; /*---Cluster Component 1------ */
19724 +Clus2 = 0 ; /*---Cluster Component 2------ */
19725 +Clus3 = 0 ; /*---Cluster Component 3------ */
19726 +Clus4 = 0 ; /*---Cluster Component 4------ */
19727 +Clus1 = Clus1+0.2309309348203 * (IMP_domestic_gross - 18139990.4321364)/56597813.0066098;
19728 +Clus1 = Clus1+0.22436987061898 * (IMP_domestic_opening - 4927103.23613213)/17326105.0088038;
19729 +Clus1 = Clus1+0.22498861430359 * (IMP_foreign_gross - 27897016.0534439)/96925031.1802297;
19730 +Clus3 = Clus3+0.2703173586525 * (IMP_runtime - 99.8267786891675)/18.7154039848606;
19731 +Clus3 = Clus3+0.43188814916958 * (IMP_ss_count - 67.173933489405)/83.9283354024275;
19732 +Clus2 = Clus2+0.34384252589752 * (IMP_ss_mean - 0.70179955655745)/0.1745191461535;
19733 +Clus2 = Clus2+0.25199980181587 * (IMP_ss_median - 0.8623872026251)/0.33444133714858;
19734 +Clus2 = Clus2+0.31063983218708 * (IMP_ss_p25 - 0.4891304347826)/0.48366291352497;
19735 +Clus4 = Clus4+1 * (IMP_ss_p75 - 0.98297785069729)/0.11905726804805;
19736 +Clus2 = Clus2+-0.2771726412744 * (IMP_ss_std - 0.42246050415712)/0.10798106557532;
19737 +Clus1 = Clus1+0.23412963595666 * (IMP_total_gross - 46074314.9107819)/148952791.568187;
19738 +Clus1 = Clus1+0.17302986059132 * (IMP_user_rating_count - 10702.487861413)/33978.8369838085;
19739 +Clus3 = Clus3+0.43186873238275 * (tomatometer_count - 67.2916324856439)/84.0467795990883;
NOTE: %INCLUDE (level 1) ending.
19740  run;
 
NOTE: DATA STEP view saved on file EMWS1.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
19741  quit;
19742  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
19744  *------------------------------------------------------------*;
19745  * VarClus: Computing metadata for TRAIN data;
19746  *------------------------------------------------------------*;
 
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.10 seconds
 
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
NOTE: View EMWS1.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 19, 2019
Time:                15:20:44
*------------------------------------------------------------*
20117  %let EMEXCEPTIONSTRING=;
20118  *------------------------------------------------------------*;
20119  * REPORT: VarClus;
20120  *------------------------------------------------------------*;
20121  %let EM_ACTION = REPORT;
20122  %let syscc = 0;
20123
20124  %macro main;
20125
20126     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
20127     %include temp;
20128     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
20129     %include temp;
20130     filename temp;
20131
20132    %SetProperties;
20133
20134     %if %upcase(&EM_ACTION) = CREATE %then %do;
20135         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
20136         %include temp;
20137         filename temp;
20138         %create;
20139     %end;
20140     %else
20141     %if %upcase(&EM_ACTION) = TRAIN %then %do;
20142          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
20143             %include temp;
20144             filename temp;
20145             %train;
20146     %end;
20147     %else
20148     %if %upcase(&EM_ACTION) = SCORE %then %do;
20149             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
20150             %include temp;
20151             filename temp;
20152             %score;
20153     %end;
20154     %else
20155     %if %upcase(&EM_ACTION) = REPORT %then %do;
20156             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
20157             %include temp;
20158             filename temp;
20159             %report;
20160     %end;
20161     /*
20162     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
20163         %put 'OPENING TABLE';
20164     %end;
20165     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
20166         %put 'CLOSE TABLE';
20167     %end;
20168     */
20169  %mend main;
20170  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
20171 +
20172 +/* Initialize property macro variables */
20173 +%macro SetProperties;
20174 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
20175 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
20176 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
20177 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
20178 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
20179 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
20180 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
20181 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
20182 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
20183 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
20184 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
20185 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
20186 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
20187 +
20188 +%mend SetProperties;
20189 +
20190 +%Macro MakeDummyVariables(indata=,
20191 +                          outvar=,
20192 +                          outdata=,
20193 +                          fileref=,
20194 +                          recreatecmeta=N, /* optional */
20195 +                          incmeta=,     /* optional */
20196 +                          outcmeta=,    /* optional */
20197 +                          ndummyvars=_ndummyvars
20198 +                          );
20199 +    %global &ndummyvars;
20200 +
20201 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
20202 +       class
20203 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20204 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20205 +    ;
20206 +    run;
20207 +    %let &ndummyvars = 0;
20208 +    data _null_;
20209 +    %let dsid = %sysfunc(open(work._classout));
20210 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
20211 +    %let dsid = %sysfunc(close(&dsid));
20212 +    run;
20213 +
20214 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
20215 +       input
20216 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20217 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20218 +        / level=nominal stdize=no;
20219 +       make outvar = &outvar;
20220 +       score data = &indata out =&outdata;
20221 +       code  file=  "&fileref";
20222 +    run;
20223 +    %if &recreatecmeta eq Y %then %do;
20224 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
20225 +    data _tmpds;
20226 +        set _tmpds;
20227 +           ROLE = 'INPUT';
20228 +           LEVEL = 'INTERVAL';
20229 +           CREATOR='DMZIP';
20230 +           if NAME = '_TYPE_' then delete;
20231 +    run;
20232 +    data &outcmeta;
20233 +         set &incmeta _tmpds;
20234 +    run;
20235 +    %end;
20236 +    proc datasets lib=work nolist;
20237 +      delete  _dmdbdat _dmdbcat _classout
20238 +    %if &recreatecmeta eq Y %then %do;
20239 +    _tmpds
20240 +    %end;
20241 +    ;
20242 +    quit;
20243 +%Mend MakeDummyVariables;
20244 +
20245 +/*--- Determine Optimal Number of Cluster ----
20246 +%macro FindClusNum(statds=, groupds=, minvariation=);
20247 +   %global optnclus;
20248 +   data varclus_tmp(drop=_NAME_);
20249 +      set &statDs;
20250 +      where _type_ ='PROPOR';
20251 +   run;
20252 +   proc sort data=varclus_tmp;
20253 +      by _NCL_;
20254 +   run;
20255 +   proc transpose data=varclus_tmp out=varclus_tmp;
20256 +      by _NCL_;
20257 +      var %EM_INTERVAL_INPUT
20258 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20259 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
20260 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
20261 +          %do i = 2 %to &nvar;
20262 +          %let varname = %sysfunc(varname(&dsid, &i));
20263 +          &varname
20264 +          %end;
20265 +      %end;
20266 +   ;
20267 +   run;
20268 +
20269 +   %if &minVariation eq %then %do;
20270 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
20271 +   %end;
20272 +   %if ^(0<&minVariation<100) %then %do;
20273 +       %let minVariation = 90;
20274 +   %end;
20275 +
20276 +   data _null_;
20277 +      set varclus_tmp end=eof;
20278 +      by _NCL_;
20279 +      retain flag 0;
20280 +      if first._ncl_ then flag=0;
20281 +      if .<col1 < &minVariation then flag=1;
20282 +      if last._ncl_ and ^flag then do;
20283 +         call symput('OPTNCL', _ncl_);
20284 +         stop;
20285 +      end;
20286 +     if eof then call symput('OPTNCL', _ncl_);
20287 +   run;
20288 +
20289 +   %let optnclus = &OPTNCL;
20290 +
20291 +   data varclus_tmp(drop=_NCL_ _NAME_);
20292 +      set &statDs;
20293 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
20294 +   run;
20295 +   proc sort data=varclus_tmp;
20296 +      by _TYPE_;
20297 +   run;
20298 +   proc transpose data=varclus_tmp out=varclus_tmp;
20299 +      by _TYPE_;
20300 +   run;
20301 +   proc sort data=varclus_tmp;
20302 +      by _name_ _type_;
20303 +   run;
20304 +
20305 +  proc transpose data=varclus_tmp out=&groupds;
20306 +      by _NAME_;
20307 +   run;
20308 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
20309 +      by Cluster descending Rsquare;
20310 +      where Cluster ne 0;
20311 +   run;
20312 +   proc datasets lib=work nolist mt=(DATA VIEW);
20313 +      delete varclus_tmp;
20314 +   run;
20315 +   quit;
20316 +%mend findClusNum;
20317 +*/
20318 +
20319 +%macro getNclusfromTrain(inoutstat=, nc=);
20320 +%global &nc;
20321 +data _null_;
20322 +    set &inoutstat end=eof;
20323 +    if eof then do;
20324 +    call symput("&nc", _ncl_);
20325 +    end;
20326 +run;
20327 +%mend  getNclusfromTrain;
20328 +
20329 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
20330 +
20331 +     *--- Build Code to Modify Metadata ---*;
20332 +     filename X "&deltacodefile";
20333 +     data _null_;
20334 +        FILE X;
20335 +        set &groupds end=eof;
20336 +        /*by Cluster;*/
20337 +         if _N_=1 then do;
20338 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20339 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
20340 +           %end;
20341 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
20342 +           put "if upcase(strip(NAME)) in (";
20343 +        end;
20344 +        if Strip(upcase(Selected)) eq 'YES' then do;
20345 +           string = '"'!!trim(left(VARIABLE))!!'"';
20346 +           put string;
20347 +        end;
20348 +        if eof then do;
20349 +           put ') then ROLE="INPUT";';
20350 +           put 'else ROLE="REJECTED";';
20351 +           put 'end;';
20352 +
20353 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
20354 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
20355 +           %end;
20356 +        end;
20357 +     run;
20358 +     quit;
20359 +
20360 +     filename X;
20361 +
20362 +     quit;
20363 +%mend MakeDeltaCode;
20364 +
20365 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
20366 +    %if ^%sysfunc(exist(&statds)) %then %do;
20367 +         %goto doendc;
20368 +    %end;
20369 +
20370 +    data &corrds(drop=_TYPE_ _NCL_) ;
20371 +       set &statds;
20372 +       where _type_ eq 'CORR' ;
20373 +    run ;
20374 +    proc sort data=&corrds;
20375 +       by _NAME_ ;
20376 +    run ;
20377 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
20378 +      BY _NAME_ ;
20379 +    run ;
20380 +    data &corrplotds;
20381 +       length _Y_ $100;
20382 +       set &corrplotDs;
20383 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
20384 +    run ;
20385 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
20386 +       set &corrplotds;
20387 +       where _LABEL_ ne '' ;
20388 +       keep _TMP_ _LABEL_ ;
20389 +    run ;
20390 +    data _null_;
20391 +       nobs=0;
20392 +       dsid = open('varclus_match');
20393 +       if dsid then do;
20394 +          nobs = attrn(dsid, 'NOBS');
20395 +          dsid = close(dsid);
20396 +       end;
20397 +       call symput ('CORR_NOBS', nobs);
20398 +    run;
20399 +    %if &corr_nobs %then %do;
20400 +        proc sort data=varclus_match;
20401 +           by _name_;
20402 +        run ;
20403 +        proc sort data=&corrplotds;
20404 +           by _name_;
20405 +        run ;
20406 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
20407 +           merge varclus_match &corrplotds;
20408 +           by _NAME_ ;
20409 +           if _X_ eq '' then _X_=_NAME_ ;
20410 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20411 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20412 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20413 +
20414 +       run ;
20415 +    %end;
20416 +    %else %do;
20417 +        proc sort data=&corrplotds;
20418 +           by _name_;
20419 +        run ;
20420 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
20421 +           set &corrplotds;
20422 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20423 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20424 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20425 +
20426 +        run ;
20427 +    %end;
20428 +    proc sort data=&corrplotds;
20429 +       by _X_ _Y_;
20430 +    run ;
20431 +    proc datasets lib=work nolist mt=(DATA VIEW);
20432 +       delete varclus_match;
20433 +    run;
20434 +    quit;
20435 +
20436 +%doendc:
20437 +
20438 +%mend MakeVarClusCorrData;
20439 +
20440 +%macro MakeStatPlotData(statds= , outstatplotds=);
20441 +   %if %sysfunc(exist(&statds)) %then %do;
20442 +
20443 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
20444 +          set &statDs;
20445 +          where _type_ in('MEAN', 'STD', 'N');
20446 +       run ;
20447 +       proc transpose data=varclus_tmp out=&outstatplotds;
20448 +          id _TYPE_ ;
20449 +       run ;
20450 +       data &outstatplotds;
20451 +          set &outstatplotds(obs=1000);
20452 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
20453 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
20454 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
20455 +          else SCALEDSTD= STD ;
20456 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
20457 +       run ;
20458 +       proc sort data=&outstatplotds;
20459 +          by descending SCALEDSTD ;
20460 +       run ;
20461 +       proc datasets lib=work nolist mt=(DATA VIEW);
20462 +          delete varclus_tmp;
20463 +       run;
20464 +       quit;
20465 +    %end;
20466 +
20467 +%mend MakeStatPlotData;
20468 +
20469 +
20470 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
20471 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
20472 +    data &EM_USER_OUTSTATSCORE;
20473 +          set &indata;
20474 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
20475 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
20476 +          if _TYPE_ = 'STD' then _NAME_='STD';
20477 +          DROP _TYPE_ _NCL_;
20478 +     run;
20479 +
20480 +     filename _file_  "&fileRef";
20481 +
20482 +     data _null_;
20483 +        FILE _file_ MOD;
20484 +        put ' ';
20485 +        put '/*-------------------------------------------------*/';
20486 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
20487 +        put '/*-------------------------------------------------*/';
20488 +        put ' ';
20489 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
20490 +
20491 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
20492 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
20493 +
20494 +        %let k = 1;
20495 +        %do %while(^%sysfunc(fetch(&dsid)));
20496 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20497 +                %if &k > 2 %then %do;
20498 +                 %let cn = %eval(&k-2);
20499 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
20500 +                %end;
20501 +                %let k = %eval(&k+1);
20502 +        %end;
20503 +
20504 +        %let rc = %sysfunc(rewind(&dsid));
20505 +
20506 +        %do i= 2 %to &nvar;
20507 +            %let _varname =  %sysfunc(varname(&dsid, &i));
20508 +            %do %while(^%sysfunc(fetch(&dsid)));
20509 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20510 +                %if &_name = MEAN %then
20511 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
20512 +                %else %if &_name = STD %then
20513 +                %let _std = %sysfunc(getvarn(&dsid, &i));
20514 +                %else %do;
20515 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
20516 +                      %let abscoeff = %sysfunc(abs(&coeff));
20517 +                          %if &abscoeff >  0 %then %do;
20518 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
20519 +                           %end;
20520 +                 %end;
20521 +             %end;
20522 +             %let rc = %sysfunc(rewind(&dsid));
20523 +         %end;
20524 +
20525 +        %let dsid= %sysfunc(close(&dsid));
20526 +       run;
20527 +%mend CreateScoreCode;
20528 +
20529 +
20530 +
20531 +/*----------------------------------------------------------
20532 +    Instead of using %MakeRSquareData,
20533 +    %MakeVarClusResultTable at macro2.source is used
20534 + +----------------------------------------------------------*/
20535 +
20536 +
20537 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
20538 +
20539 +/* modifying  from ods rsquare = data */
20540 +
20541 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
20542 +    Length Cluster $16;
20543 +    length Variable $32;
20544 +    Length VariableLabel $64;
20545 +    set &indata; retain CurrentCluster;
20546 +    if NumberOfClusters ^= &ncluster then delete;
20547 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
20548 +    CurrentCluster = Cluster;
20549 +   run;
20550 +proc sort data =&outdata ;
20551 +     by Cluster RsquareRatio;
20552 +run;
20553 +data _tmprsq(drop=index);
20554 +     set &outdata; by Cluster;
20555 +     if first.Cluster then do;
20556 +     index = strip(scan(Cluster,2 ));
20557 +     Variable = "Clus"||index;
20558 +     VariableLabel = "Cluster Component "||index;
20559 +     OwnCluster = 1;
20560 +     NextClosest = .;
20561 +     RsquareRatio = 0;
20562 +     output;
20563 +     end;
20564 +run;
20565 +
20566 +proc sort data = _tmprsq ;
20567 +     by Cluster RsquareRatio;
20568 +run;
20569 +data &outdata;
20570 +     set &outdata _tmprsq;
20571 +by Cluster;
20572 +run;
20573 +
20574 +
20575 +/* Just create the Selected variable with all YES */
20576 +
20577 +data &outdata;
20578 +    set &outdata; by cluster;
20579 +    length Selected $8;
20580 +    Selected = 'YES';
20581 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20582 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20583 +    rename OwnCluster = RSqWithClusterComp;
20584 +    rename NextClosest = RSqWithNextClusComp;
20585 +run;
20586 +
20587 +
20588 +/* Selected = Y/N will be done %score section -----
20589 +
20590 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
20591 +data &outdata;
20592 +    set &outdata; by cluster;
20593 +    length Selected $8;
20594 +    if first.Cluster then Selected = 'YES';
20595 +    else Selected = 'NO';
20596 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20597 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20598 +    rename OwnCluster = RSqWithClusterComp;
20599 +    rename NextClosest = RSqWithNextClusComp;
20600 +run;
20601 +%end;
20602 +%else %do;
20603 +data &outdata;
20604 +    set &outdata; by cluster;
20605 +    if last.Cluster then Selected = 'YES';
20606 +    else Selected = 'NO';
20607 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20608 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20609 +    rename OwnCluster = RSqWithClusterComp;
20610 +    rename NextClosest = RSqWithNextClusComp;
20611 +run;
20612 +%end;
20613 +---------------------------------------------------------------*/
20614 +
20615 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
20616 +/* to calculate NextClosestClusRsq */
20617 +proc transpose data = &inClusRSquare  out=_clusRsq;
20618 +      by cluster;
20619 +      run;
20620 +data _clusRsq;
20621 +     set _clusRsq;
20622 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
20623 +run;
20624 +
20625 +proc sort data=_clusRsq;
20626 +    by cluster col1;
20627 +    run;
20628 +data _clusRsq(drop=_NAME_ _LABEL_);
20629 +     set _clusRsq; by cluster;
20630 +     if last.Cluster then output;
20631 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
20632 +     rename COL1 = RSqWithNextClusComp;
20633 +     rename Cluster = Variable;
20634 +     label  Cluster = "Variable";
20635 +run;
20636 +
20637 +proc sort data =&outdata;
20638 +     by Variable;
20639 +run;
20640 +data &outdata;
20641 +    merge &outdata _clusRsq;
20642 +    by Variable;
20643 +run;
20644 +proc sort data =&outdata;
20645 +by Cluster  RsquareRatio;
20646 +run;
20647 +quit;
20648 +%end;
20649 +
20650 +proc datasets lib = work nolist;
20651 +     delete _tmprsq _clusRsq;
20652 +     run;
20653 +quit;
20654 +
20655 +%mend MakeRSquareData;
20656 +
20657 +
20658 +/*-------------------------------------------------------------------------*/
20659 +
20660 +
20661 +
20662 +%macro ModifyCorr(indata=,
20663 +                  outdata=,
20664 +                  rsquare = Y
20665 +                  );
20666 +    data corr_tmp;
20667 +        set &indata;
20668 +    run;
20669 +     proc sql;
20670 +           update &indata
20671 +           set
20672 +     %let dsid = %sysfunc(open(work.corr_tmp));
20673 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
20674 +          %do i = 4 %to &nvar;
20675 +          %let _name = %sysfunc(varname(&dsid, &i));
20676 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
20677 +            %else  %let _name_md = &_name;
20678 +            %if &i < &nvar %then %do;
20679 +               &_name = 1- &_name_md ,
20680 +            %end;
20681 +            %else %do;
20682 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
20683 +            %end;
20684 +          %end;
20685 +      %let dsid= %sysfunc(close(&dsid));
20686 +
20687 +      select * from &indata;
20688 +      run;
20689 +      proc datasets lib = work nolist;
20690 +           delete corr_tmp;
20691 +      run;
20692 +      quit;
20693 +
20694 + %mend ModifyCorr;
20695 +
20696 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
20697 +    data &outdata(drop= _NCL_  _TYPE_);
20698 +       set &indata;
20699 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
20700 +       rename _NAME_ = Cluster;
20701 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20702 +    run;
20703 +    %if &RSquare eq Y %then %do;
20704 +     data corr_tmp;
20705 +        set &outdata;
20706 +     run;
20707 +
20708 +     data &outdata(drop=i);
20709 +          set &outdata;
20710 +          %let dsid = %sysfunc(open(work.corr_tmp));
20711 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20712 +          %do i = 2 %to &nvar;
20713 +            %let _name = %sysfunc(varname(&dsid, &i));
20714 +            %let _name_md = &_name.**2;
20715 +                &_name = &_name_md;
20716 +          %end;
20717 +      %let dsid= %sysfunc(close(&dsid));
20718 +      run;
20719 +      proc datasets lib = work nolist;
20720 +           delete corr_tmp;
20721 +      run;
20722 +
20723 +    %end;
20724 +     quit;
20725 +%mend MakeClusStructCorrData;
20726 +
20727 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
20728 +    data &outdata(drop= _NCL_  _TYPE_);
20729 +       set &indata;
20730 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
20731 +       rename _NAME_ = Cluster;
20732 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20733 +    run;
20734 +    data corr_tmp;
20735 +        set &outdata;
20736 +    run;
20737 +
20738 +    %let dsid = %sysfunc(open(work.corr_tmp));
20739 +    %let nclus2= %eval(&ncluster+1);
20740 +    data &outdata;
20741 +         set &outdata;
20742 +          %do i = 2 %to &nclus2;
20743 +          %let i_1 = %eval(&i-1);
20744 +            %let _name = %sysfunc(varname(&dsid, &i));
20745 +            %let _newName = Clus&i_1;
20746 +                rename &_name = &_newName; ;
20747 +                *label &_name ="Cluster &i_1";
20748 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
20749 +          %end;
20750 +          keep Cluster
20751 +          %do i = 2 %to &nclus2;
20752 +                %let _name = %sysfunc(varname(&dsid, &i));
20753 +                &_name
20754 +          %end;
20755 +          ;
20756 +    %let dsid= %sysfunc(close(&dsid));
20757 +     run;
20758 +     quit;
20759 +
20760 +    %if &RSquare eq Y %then %do;
20761 +
20762 +       data corr_tmp;
20763 +        set &outdata;
20764 +     run;
20765 +
20766 +     data &outdata(drop=i);
20767 +          set &outdata;
20768 +          %let dsid = %sysfunc(open(work.corr_tmp));
20769 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20770 +          %do i = 2 %to &nvar;
20771 +            %let _name = %sysfunc(varname(&dsid, &i));
20772 +            %let _name_md = &_name.**2;
20773 +                &_name = &_name_md;
20774 +          %end;
20775 +      %let dsid= %sysfunc(close(&dsid));
20776 +      run;
20777 +    %end;
20778 +
20779 +    %if &makeplotds eq Y %then %do;
20780 +     proc transpose data = &outdata
20781 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
20782 +          by cluster;
20783 +     run;
20784 +     data &plotds;
20785 +          set  &plotds;
20786 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20787 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20788 +     run;
20789 +     %end;
20790 +     proc datasets lib = work nolist;
20791 +           delete corr_tmp;
20792 +     run;
20793 +     quit;
20794 +%mend MakeInterClusCorrData;
20795 +
20796 +
20797 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
20798 +
20799 +data &outlink(drop = Selected);
20800 +     set &indata;
20801 +     LINKID = _N_;
20802 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
20803 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
20804 +run;
20805 +data &outnode(keep=NODEID TYPE LABEL);
20806 +    set &indata;
20807 +    length TYPE $16;
20808 +    rename Variable = NODEID;
20809 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
20810 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
20811 +    then  TYPE = "CLUSTER";
20812 +    else  TYPE="VARIABLE";
20813 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
20814 +run;
20815 +quit;
20816 +%mend MakeClusConstellData;
20817 +
20818 +
20819 +
20820 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
20821 +
20822 +data &outlink(drop = Selected);
20823 +     set &indata;
20824 +     LINKID = _N_;
20825 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
20826 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
20827 +run;
20828 +data &outnode(keep=NODEID TYPE LABEL);
20829 +    set &indata;
20830 +    length TYPE $16;
20831 +    rename Variable = NODEID;
20832 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
20833 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
20834 +    then  TYPE = "CLUSTER";
20835 +    else  TYPE="VARIABLE";
20836 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
20837 +run;
20838 +quit;
20839 +%mend MakeClusConstellData;
20840 +
20841 +
20842 +/*--- This will work only when inds is not a view data -------
20843 +
20844 +%macro getNVarNObs(inds=, nvar=, nobs=);
20845 +
20846 +    %global &nvar;
20847 +    %global &nobs;
20848 +    data _null_;
20849 +         dsid = open("&inds");
20850 +         nv = attrn(dsid, 'NVAR');
20851 +         no = attrn(dsid, 'NOBS');
20852 +         dsid = close(dsid);
20853 +         call symput("&nvar", nv);
20854 +         call symput("&nobs", no);
20855 +    run;
20856 +    quit;
20857 +%mend  getNVarNObs;
20858 +
20859 ++---------------------------------------------------------------*/
20860 +
20861 +
20862 +%macro getNVar(inds=, nvar=);
20863 +    %global &nvar;
20864 +    data _null_;
20865 +         dsid = open("&inds");
20866 +         nv = attrn(dsid, 'NVAR');
20867 +         dsid = close(dsid);
20868 +         call symput("&nvar", nv);
20869 +    run;
20870 +    quit;
20871 +%mend  getNVar;
20872 +
20873 +
20874 +
20875 +%macro getNObs(inds=, nobs=);
20876 +    %global &nobs;
20877 +    data _null_;
20878 +        set &inds end=eof;
20879 +        if eof then call symput("&nobs", _N_);
20880 +    run;
20881 +    quit;
20882 +%mend  getNObs;
20883 +
20884 +%Macro CreateVarclusMeta(trainnum=);
20885 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
20886 +    data &EM_USER_VARCLUSMETA;
20887 +         length TrainNum 8.;
20888 +         length NewTrain $8;
20889 +         length NGCluster 8.;
20890 +         length ExportedComp $16;
20891 +         length HideVariable $8;
20892 +         TrainNum = &trainnum;
20893 +         NewTrain = "Y";
20894 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
20895 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
20896 +         NGCluster = 0; /* zero means no twostage */
20897 +   run;
20898 +   quit;
20899 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
20900 +
20901 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
20902 +    data &outdata(drop= _NCL_  _TYPE_);
20903 +       set &indata;
20904 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
20905 +       %if &globalclusid ne %then %do;
20906 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
20907 +       rename _NAME_ = Cluster;
20908 +       %end;
20909 +       %else %do;
20910 +        _NAME_ = upcase(_NAME_);
20911 +       rename _NAME_ = Cluster;
20912 +       %end;
20913 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20914 +    run;
20915 +    data corr_tmp;
20916 +        set &outdata;
20917 +    run;
20918 +
20919 +    %let dsid = %sysfunc(open(work.corr_tmp));
20920 +    %let nclus2= %eval(&ncluster+1);
20921 +    data &outdata;
20922 +         set &outdata;
20923 +          %do i = 2 %to &nclus2;
20924 +          %let i_1 = %eval(&i-1);
20925 +            %let _name = %sysfunc(varname(&dsid, &i));
20926 +            %if &globalclusid ne %then
20927 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
20928 +                     rename &_name = &_newName;
20929 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
20930 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
20931 +                %end;
20932 +            %else
20933 +                %do; %let _newName = CLUS&i_1;
20934 +                     rename &_name = &_newName;
20935 +                     *label &_name ="Cluster &i_1";
20936 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
20937 +                %end;
20938 +          %end;
20939 +          keep Cluster
20940 +          %do i = 2 %to &nclus2;
20941 +                %let _name = %sysfunc(varname(&dsid, &i));
20942 +                &_name
20943 +          %end;
20944 +          ;
20945 +    %let dsid= %sysfunc(close(&dsid));
20946 +     run;
20947 +     quit;
20948 +
20949 +    %if &RSquare eq Y %then %do;
20950 +
20951 +       data corr_tmp;
20952 +        set &outdata;
20953 +     run;
20954 +
20955 +     data &outdata;
20956 +          set &outdata;
20957 +          %let dsid = %sysfunc(open(work.corr_tmp));
20958 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
20959 +          %do i = 2 %to &nvar;
20960 +            %let _name = %sysfunc(varname(&dsid, &i));
20961 +            %let _name_md = &_name.**2;
20962 +                &_name = &_name_md;
20963 +          %end;
20964 +      %let dsid= %sysfunc(close(&dsid));
20965 +      run;
20966 +    %end;
20967 +
20968 +    %if &makeplotds eq Y %then %do;
20969 +     proc transpose data = &outdata
20970 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
20971 +          by cluster;
20972 +     run;
20973 +     data &plotds;
20974 +          set  &plotds;
20975 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20976 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
20977 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20978 +     run;
20979 +     %end;
20980 +     proc datasets lib = work nolist;
20981 +           delete corr_tmp;
20982 +     run;
20983 +     quit;
20984 +%mend MakeInterClusCorrData;
20985 +
20986 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
20987 +    data _tmpds(drop= _NCL_);
20988 +       set &indata;
20989 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
20990 +       %if &globalclusid ne %then %do;
20991 +           _NAME_ = "GC&globalclusid.";
20992 +       rename _NAME_ = Cluster;
20993 +       %end;
20994 +       %else %do;
20995 +        _NAME_ = "CLUS";
20996 +        rename _NAME_ = Cluster;
20997 +       %end;
20998 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
20999 +    run;
21000 +    proc transpose data =_tmpds out =&outdata;
21001 +    run;
21002 +
21003 +    data &outdata(drop=COL1);
21004 +        %if &globalclusid ne %then %do;
21005 +        length GCluster $16;
21006 +        %end;
21007 +        length Cluster $32;
21008 +        length _NAME_ $32;
21009 +         set &outdata;
21010 +         _NAME_ = upcase(_NAME_);
21011 +         rename _NAME_=Variable;
21012 +         *label _NAME_="Variable";
21013 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21014 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21015 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21016 +
21017 +         %if &globalclusid ne %then %do;
21018 +          GCluster = "GC&globalclusid";
21019 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
21020 +         %end;
21021 +         %else %do;
21022 +         Cluster = "CLUS"||strip(COL1);
21023 +        %end;
21024 +         rename COL2 = RSqWithOwnClusComp;
21025 +         *label COL2 = "R-Square With Own Cluster Component";
21026 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21027 +
21028 +   run;
21029 +   proc sort data =&outdata;
21030 +        by Cluster RSqWithOwnClusComp;
21031 +   run;
21032 +   proc datasets lib = work nolist;
21033 +           delete _tmpds;
21034 +   run;
21035 +   quit;
21036 +%mend MakeOwnRSquare;
21037 +
21038 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
21039 +    data &outdata(drop= _NCL_  _TYPE_);
21040 +       %if &globalclusid ne %then %do;
21041 +        length GCluster $16;
21042 +        %end;
21043 +       set &indata;
21044 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21045 +       %if &globalclusid ne %then %do;
21046 +         GCluster = "GC&globalclusid";
21047 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21048 +         rename _NAME_ = Cluster;
21049 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21050 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21051 +
21052 +       %end;
21053 +       %else %do;
21054 +         _NAME_ = upcase(_NAME_);
21055 +         rename _NAME_ = Cluster;
21056 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21057 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21058 +
21059 +       %end;
21060 +     run;
21061 +    %if &RSquare eq Y %then %do;
21062 +     data corr_tmp;
21063 +          set &outdata;
21064 +     run;
21065 +     %let istart = 2;
21066 +     %if &globalclusid ne %then %let istart = 3;
21067 +     data &outdata;
21068 +          set &outdata;
21069 +          %let dsid = %sysfunc(open(work.corr_tmp));
21070 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21071 +          %do i =&istart %to &nvar;
21072 +            %let _name = %sysfunc(varname(&dsid, &i));
21073 +            %let _name_md = &_name.**2;
21074 +                &_name = &_name_md;
21075 +          %end;
21076 +      %let dsid= %sysfunc(close(&dsid));
21077 +      run;
21078 +      proc datasets lib = work nolist;
21079 +           delete corr_tmp;
21080 +      run;
21081 +    %end;
21082 +     quit;
21083 +%mend MakeClusStructCorrData;
21084 +
21085 +/*
21086 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
21087 +*/
21088 +
21089 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
21090 +
21091 +     /* The indata should be the outdata
21092 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
21093 +
21094 +     proc sort data =&indata out=_tmpclusRsq;
21095 +     by cluster;
21096 +     run;
21097 +
21098 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21099 +      by cluster;
21100 +     run;
21101 +
21102 +     proc sort data=_tmpclusRsq;
21103 +        by _NAME_ COL1;
21104 +     run;
21105 +
21106 +     data _tmpclusRsq;
21107 +         length _NAME_ $32;
21108 +         set _tmpclusRsq; by _NAME_;
21109 +          _NAME_ = upcase(_NAME_);
21110 +          %if &ncluster ne 1 %then %do;
21111 +             if last._NAME_ then delete;
21112 +          %end;
21113 +          %else %do;
21114 +             COL1 = 0;
21115 +          %end;
21116 +     run;
21117 +     /* need to sort again */
21118 +     proc sort data=_tmpclusRsq;
21119 +        by _NAME_ COL1;
21120 +     run;
21121 +
21122 +     data &outdata;
21123 +         set _tmpclusRsq; by _NAME_;
21124 +         Cluster = upcase(Cluster);
21125 +         if last._NAME_ then output;
21126 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21127 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21128 +         rename COL1 = RSqWithNextClusComp;
21129 +         Cluster = upcase(Cluster);
21130 +         rename Cluster = ClosestCluster;
21131 +         *label  Cluster = "Next Closest Cluster";
21132 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21133 +         rename _NAME_ = Variable;
21134 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21135 +    run;
21136 +
21137 +
21138 +    %if &globalclusid ne %then %do;
21139 +    data &outdata;
21140 +       length GCluster $16;
21141 +       set &outdata;
21142 +       GCluster = "GC&globalclusid";
21143 +       run;
21144 +    %end;
21145 +    proc datasets lib = work nolist;
21146 +           delete _tmpclusRsq;
21147 +    run;
21148 +    quit;
21149 +%mend FindNextClosestClusByVar;
21150 +
21151 +
21152 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
21153 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
21154 +     proc sort data =&indata out=_tmpclusRsq;
21155 +     by cluster;
21156 +     run;
21157 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21158 +     by cluster;
21159 +     run;
21160 +     proc sort data=_tmpclusRsq;
21161 +        by _NAME_ col1;
21162 +     run;
21163 +     data _tmpclusRsq;
21164 +         length _NAME_ $32;
21165 +         set _tmpclusRsq; by _NAME_;
21166 +          _NAME_ = upcase(_NAME_);
21167 +          %if &ncluster ne 1 %then %do;
21168 +             if last._NAME_ then delete;
21169 +          %end;
21170 +          %else %do;
21171 +             COL1 = 0;
21172 +          %end;
21173 +     run;
21174 +     data &outdata;
21175 +         set _tmpclusRsq; by _NAME_;
21176 +         Cluster = upcase(Cluster);
21177 +         if last._NAME_ then output;
21178 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21179 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21180 +         rename COL1 = RSqWithNextClusComp;
21181 +         Cluster = upcase(Cluster);
21182 +         rename Cluster = ClosestCluster;
21183 +         *label  Cluster = "Next Closest Cluster";
21184 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21185 +         rename _NAME_ = Variable;
21186 +         *label  _NAME_ = "Variable";
21187 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21188 +
21189 +    run;
21190 +    %if &globalclusid ne %then %do;
21191 +    data &outdata;
21192 +       length GCluster $16;
21193 +       set &outdata;
21194 +       GCluster = "GC&globalclusid";
21195 +       run;
21196 +    %end;
21197 +
21198 +    proc datasets lib = work nolist;
21199 +           delete _tmpclusRsq;
21200 +    run;
21201 +
21202 +    quit;
21203 +%mend FindNextClosestClusByCluster;
21204 +
21205 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
21206 +/*----
21207 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
21208 +-----------*/
21209 +
21210 +proc sort data =&indata1;
21211 +    by Variable;
21212 +run;
21213 +proc sort data =&indata2;
21214 +    by Variable;
21215 +run;
21216 +data &outdata;
21217 +    merge &indata1 &indata2;
21218 +    by Variable;
21219 +    length Type $16;
21220 +    Type = 'Variable';
21221 +    *label Type ='Type';
21222 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21223 +run;
21224 +
21225 +
21226 +data &indata3;
21227 +    set  &indata3 ;
21228 +    length RSqWithOwnClusComp 8.;
21229 +    Cluster = Variable;
21230 +    RSqWithOwnClusComp = 1;
21231 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
21232 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21233 +    length Type $16;
21234 +    Type = 'ClusterComp';
21235 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21236 +
21237 +;
21238 +run;
21239 +
21240 +proc sort data=&outdata;
21241 +    by Cluster;
21242 +run;
21243 +proc sort data =&indata3;
21244 +    by Cluster;
21245 +run;
21246 +
21247 +data &outdata;
21248 +     set &outdata &indata3;
21249 +     by Cluster;
21250 +run;
21251 +
21252 +
21253 +/* Create the Selected variable with all YES */
21254 +
21255 +data &outdata;
21256 +     set &outdata;
21257 +     length RsqRatio 8.;
21258 +     length Selected $8;
21259 +     *label RSqRatio = "1-R**2 Ratio";
21260 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
21261 +     *label Selected = "Variable Selected";
21262 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
21263 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
21264 +     Selected ='YES';
21265 +     rename _LABEL_ = Label;
21266 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21267 +run;
21268 +
21269 +
21270 +/*----  Selected = Y/N will be assigened at the %score                   -------+
21271 +        Just create the Selected variable with all YES at the step above
21272 + +------------------------------------------------------------------------------+
21273 +
21274 +proc sort data=&outdata;
21275 +    by Cluster RsqRatio;
21276 +run;
21277 +
21278 +%if &selectedcomp eq CLUSTERCOMP %then %do;
21279 +data &outdata;
21280 +     set &outdata; by Cluster;
21281 +     length Selected $8;
21282 +     label Selected = "Variable Selected";
21283 +     if  first.Cluster then Selected ='Yes';
21284 +     else Selected = 'No';
21285 +    run;
21286 +%end;
21287 +%else %do;
21288 +data &outdata(drop = _var _varchange);
21289 +     set &outdata; retain _var 0; by Cluster;
21290 +     length Selected $8;
21291 +     label Selected = "Variable Selected";
21292 +     if first.Cluster then  _varchange = 0;
21293 +     else _varchange =1;
21294 +     if _var ne _varchange then  Selected  = 'Yes';
21295 +     else Selected = 'No';
21296 +     if last.cluster then  _var = 0;
21297 +     else _var = _varchange;
21298 +run;
21299 +%end;
21300 +
21301 +--------------------------------------------------------------*/
21302 +
21303 +quit;
21304 +%mend MakeVarClusResultTable;
21305 +
21306 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
21307 +     proc sort data =&indata;
21308 +        by cluster;
21309 +     run;
21310 +     proc transpose data =&indata
21311 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21312 +          by cluster;
21313 +     run;
21314 +     data &outdata;
21315 +          set  &outdata;
21316 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21317 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21318 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
21319 +     run;
21320 +     %if &globalclusid ne %then %do;
21321 +     data &outdata;
21322 +          Length GCluster $16;
21323 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21324 +          set  &outdata;
21325 +          GCluster ="GC&globalclusid.";
21326 +          run;
21327 +     %end;
21328 +
21329 +%Mend MakePlotDataFromCorrTable;
21330 +
21331 +
21332 +%macro MakeCorrelation(indata=,
21333 +                       outstat=_tmpoutstat,
21334 +                       corrmatrix=N,
21335 +                       outcorr=_tmpoutcorr,
21336 +                       includeclassvar=N,
21337 +                       target=,
21338 +                       freq=,
21339 +                       weight=);
21340 +   %if &target eq  %then %do;
21341 +
21342 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
21343 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
21344 +       %if &includeclassvar eq Y %then %do;
21345 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21346 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21347 +          %do i = 2 %to &nvar;
21348 +          %let varname = %sysfunc(varname(&dsid, &i));
21349 +          &varname
21350 +          %end;
21351 +       %end;
21352 +       ;
21353 +      %if &freq ne  %then %do;
21354 +          freq &freq;
21355 +      %end;
21356 +      %if &weight ne  %then %do;
21357 +          weight &weight;
21358 +      %end;
21359 +
21360 +      run;
21361 +      %if &corrmatrix eq Y %then %do;
21362 +      data  &outcorr (drop = _NCL_ _TYPE_);
21363 +           set  &outstat ;
21364 +           if _TYPE_ ='CORR' then output;
21365 +      run;
21366 +      %end;
21367 +    %end;
21368 +    %else %do;
21369 +       proc corr data=&indata outp=&outstat noprint;
21370 +            var
21371 +       %let dsid = %sysfunc(open(&indata));
21372 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
21373 +          %do i = 1 %to &nvar;
21374 +              %let _name = %sysfunc(varname(&dsid, &i));
21375 +              %if &_name ne &target %then;
21376 +              &_name
21377 +           %end;
21378 +        %let dsid= %sysfunc(close(&dsid));
21379 +        ;
21380 +        with &target;
21381 +        run;
21382 +    %end;
21383 +    quit;
21384 +%mend MakeCorrelation;
21385 +
21386 +
21387 +%macro MakeCorrelationDistance(indata=,
21388 +                               outdata=,
21389 +                               rsquare = N
21390 +                               );
21391 +    data corr_tmp;
21392 +        set &indata;
21393 +        if _N_ = 1 then do;
21394 +           output;
21395 +           stop;
21396 +         end;
21397 +    run;
21398 +    %if &outdata ne  %then %let  _outdata = &outdata;
21399 +    %else %let _outdata = &indata;
21400 +
21401 +    data &_outdata;
21402 +         set &indata;
21403 +
21404 +         %let dsid = %sysfunc(open(work.corr_tmp));
21405 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
21406 +          %do i = 2 %to &nvar;
21407 +              %let _name = %sysfunc(varname(&dsid, &i));
21408 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
21409 +              %else  %let _name_md = &_name;
21410 +              &_name = 1- &_name_md;
21411 +          %end;
21412 +      %let dsid= %sysfunc(close(&dsid));
21413 +      run;
21414 +      proc datasets lib = work nolist;
21415 +           delete corr_tmp;
21416 +      run;
21417 +      quit;
21418 +  %mend MakeCorrelationDistance;
21419 +
21420 +
21421 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
21422 +                                   rsquare = N
21423 +                                   );
21424 +    data corr_tmp;
21425 +        set &indata;
21426 +    run;
21427 +    proc sql noprint;
21428 +           update &indata
21429 +           set
21430 +     %let dsid = %sysfunc(open(work.corr_tmp));
21431 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21432 +          %do i = 4 %to &nvar;
21433 +          %let _name = %sysfunc(varname(&dsid, &i));
21434 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21435 +            %else  %let _name_md = &_name;
21436 +            %if &i < &nvar %then %do;
21437 +               &_name = 1- &_name_md ,
21438 +            %end;
21439 +            %else %do;
21440 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
21441 +            %end;
21442 +          %end;
21443 +      %let dsid= %sysfunc(close(&dsid));
21444 +
21445 +      select * from &indata;
21446 +      run;
21447 +     data &indata( drop = _NCL_);
21448 +           set &indata;
21449 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
21450 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
21451 +     run;
21452 +     data &indata(DROP = _NCL_);
21453 +           set &indata;
21454 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
21455 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
21456 +           rename _NAME_ = _VAR_;
21457 +     run;
21458 +     proc datasets lib = work nolist;
21459 +           delete corr_tmp;
21460 +     run;
21461 +     quit;
21462 + %mend UpdateOutStatCorrToDistance;
21463 +
21464 +
21465 +%macro HierClusWithCorr(indata= ,
21466 +                        ncluster=,
21467 +                        method = Ward,
21468 +                        outtree = _outtree,
21469 +                        idvar =_VAR_,
21470 +                        outdata=,
21471 +                        rescore = N,
21472 +                        newncluster=
21473 +                        );
21474 +      %global &newncluster;
21475 +      %if &rescore ne Y %then %do;
21476 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
21477 +                   method=&method outtree=&outtree noprint;
21478 +           id &idvar;
21479 +      run;
21480 +      %end;
21481 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
21482 +      run;
21483 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
21484 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
21485 +      run;
21486 +      data _outcontent;
21487 +          set _outcontent;
21488 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
21489 +          index = 1;
21490 +          rename NAME = _NAME_;
21491 +      run;
21492 +      proc sort data=_outcontent;
21493 +          by _NAME_;
21494 +      run;
21495 +      proc sort data =&outdata;
21496 +           by _NAME_;
21497 +      run;
21498 +      data &outdata(drop=index);
21499 +          merge &outdata _outcontent;
21500 +          by _NAME_;
21501 +          if index = . then delete;
21502 +      run;
21503 +      /*-----------------------------------------------------------*/
21504 +      data &outdata;
21505 +           length CLUSNAME $16;
21506 +           set &outdata;
21507 +           if CLUSTER > &ncluster then delete;
21508 +           CLUSNAME='GC'||strip(CLUSTER);
21509 +           *label CLUSNAME = "Cluster Name";
21510 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
21511 +           rename _NAME_ = VARIABLE ;
21512 +           *label _NAME_ = "Variable";
21513 +           *label CLUSTER = "Cluster";
21514 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21515 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21516 +      run;
21517 +      proc sort data=&outdata out=&outdata;
21518 +           by CLUSTER;
21519 +      run;
21520 +      proc means data =&outdata noprint;
21521 +           output out=_meanout;
21522 +      run;
21523 +      data _null_;
21524 +            set _meanout;
21525 +            if strip(_STAT_) eq 'MAX' then do;
21526 +            call symput("&newncluster", CLUSTER);
21527 +            stop;
21528 +            end;
21529 +      run;
21530 +
21531 +      proc datasets lib = work nolist;
21532 +           delete _outcontent _meanout;
21533 +      run;
21534 +      quit;
21535 +%mend  HierClusWithCorr;
21536 +
21537 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
21538 +
21539 +     data _tmpindata;
21540 +          set &indata;
21541 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
21542 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21543 +          if _TYPE_ = 'STD' then _NAME_='STD';
21544 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
21545 +          DROP _TYPE_ _NCL_;
21546 +     run;
21547 +
21548 +     filename _file_  "&fileRef";
21549 +
21550 +     data _null_;
21551 +        FILE _file_ MOD;
21552 +        put ' ';
21553 +        put "/*-------------------------------------------------*/";
21554 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
21555 +        put "/*-------------------------------------------------*/";
21556 +        put ' ';
21557 +        %let dsid = %sysfunc(open(work._tmpindata));
21558 +
21559 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21560 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21561 +        %let k = 1;
21562 +        %do %while(^%sysfunc(fetch(&dsid)));
21563 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21564 +               %if &k > 2 %then %do;
21565 +                %let cn = %eval(&k-2);
21566 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
21567 +                %end;
21568 +                %let k = %eval(&k+1);
21569 +
21570 +        %end;
21571 +        %let rc = %sysfunc(rewind(&dsid));
21572 +
21573 +        %do j= 2 %to &nvar;
21574 +            %let _varname = %sysfunc(varname(&dsid, &j));
21575 +            %do %while(^%sysfunc(fetch(&dsid)));
21576 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21577 +                %if &_name = MEAN %then
21578 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
21579 +                %else %if &_name = STD %then
21580 +                %let _std = %sysfunc(getvarn(&dsid, &j));
21581 +                %else %do;
21582 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
21583 +                      %let abscoeff = %sysfunc(abs(&coeff));
21584 +                          %if &abscoeff >  0 %then %do;
21585 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21586 +                           %end;
21587 +                 %end;
21588 +             %end;
21589 +             %let rc = %sysfunc(rewind(&dsid));
21590 +         %end;
21591 +
21592 +        %let dsid= %sysfunc(close(&dsid));
21593 +
21594 +     run;
21595 +
21596 +     filename _file_;
21597 +     proc datasets lib = work nolist;
21598 +           delete _tmpindata;
21599 +     run;
21600 +     quit;
21601 +%mend CreateScoreCode2;
21602 +
21603 +
21604 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
21605 +
21606 +     /*--- Build Code to Modify Metadata ---*/
21607 +     filename X "&deltacodefile";
21608 +     data _null_;
21609 +        FILE X;
21610 +        set &groupds end=eof;
21611 +        if _N_=1 then do;
21612 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21613 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
21614 +           %end;
21615 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
21616 +           put "if upcase(strip(NAME)) in (";
21617 +        end;
21618 +        if Strip(upcase(Selected)) eq 'YES' then do;
21619 +           string = '"'!!trim(left(VARIABLE))!!'"';
21620 +           put string;
21621 +        end;
21622 +        if eof then do;
21623 +           put ') then ROLE="INPUT";';
21624 +           put 'else ROLE="REJECTED";';
21625 +           put 'end;';
21626 +
21627 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
21628 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
21629 +           %end;
21630 +        end;
21631 +     run;
21632 +     quit;
21633 +
21634 +     filename X;
21635 +     quit;
21636 +%mend MakeDeltaCode2;
21637 +
21638 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
21639 +  %global &ngc;
21640 +  data _null_;
21641 +  %if &indata ne %then %do;
21642 +      %let dsid = %sysfunc(open(&indata));
21643 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
21644 +      %let dsid = %sysfunc(close(&dsid));
21645 +  %end;
21646 +  %else %do;
21647 +       %let nvar = %eval(&ninput+&ndummy); ;
21648 +  %end;
21649 +  %let numgc = %eval(&nvar/&div+2);
21650 +  %let &ngc = &numgc;
21651 +   run;
21652 +  quit;
21653 +%mend getInitialGClusterNumber;
21654 +
21655 +
21656 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
21657 +data &outlink(drop = Selected);
21658 +     set &indata;
21659 +     LINKID = _N_;
21660 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
21661 +run;
21662 +data &outnode(keep=NODEID TYPE LABEL);
21663 +    set &indata;
21664 +    length TYPE $16;
21665 +    rename VARIABLE = NODEID;
21666 +    *label  CLUSNAME="Node ID";
21667 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21668 +    TYPE = "VARIABLE";
21669 +    *label TYPE = "Node Type";
21670 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21671 +    run;
21672 +data _tmp(keep=NODEID TYPE LABEL);
21673 +    set &indata;
21674 +    length TYPE $16;
21675 +    rename CLUSNAME = NODEID;
21676 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21677 +    TYPE = "GCLUSTER";
21678 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21679 +    run;
21680 +proc sort data=_tmp;
21681 +    by NODEID;
21682 +run;
21683 +data _tmp;
21684 +    set _tmp; by NODEID;
21685 +    if first.NODEID then output;
21686 +run;
21687 +proc sort data=&outnode;
21688 +    by NODEID;
21689 +run;
21690 +data  &outnode;
21691 +    set _tmp &outnode;
21692 +run;
21693 +proc datasets lib = work nolist;
21694 +     delete _tmp;
21695 +run;
21696 +quit;
21697 +%mend MakeGobalConstellData;
21698 +
21699 +/* Make contellation plot data among GCLUSTERS */
21700 +
21701 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
21702 +
21703 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
21704 +     set &indata;
21705 +     LINKID = _N_;
21706 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
21707 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
21708 +     end;
21709 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
21710 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
21711 +     end;
21712 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
21713 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
21714 +    end;
21715 +run;
21716 +
21717 +data _tmp_outrsquare;
21718 +        set &inoutrsq;
21719 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
21720 +run;
21721 +
21722 +proc freq data =_tmp_outrsquare noprint;
21723 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
21724 +run;
21725 +
21726 +data &outnode(keep=_NAME_ TYPE LABEL);
21727 +    set &outlink;
21728 +    length TYPE $16;
21729 +    length LABEL $100;
21730 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
21731 +
21732 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
21733 +    TYPE = "GCLUSTER";
21734 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
21735 +    end;
21736 +    else do;
21737 +    TYPE= "ROOT";
21738 +    LABEL= _NAME_;
21739 +    end;
21740 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
21741 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21742 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
21743 +    run;
21744 +
21745 +proc sort data=&outnode;
21746 +     by _NAME_;
21747 +proc sort data=_tmp_GCLUSFREQ;
21748 +     by _NAME_;
21749 +run;
21750 +
21751 +data  &outnode;
21752 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
21753 +     if COUNT=. then COUNT=1;
21754 +run;
21755 +
21756 +proc datasets lib = work nolist;
21757 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
21758 +run;
21759 +
21760 +quit;
21761 +%Mend MakeGClusterConstData;
21762 +
21763 +
21764 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
21765 +
21766 +    data _gscoretmpds;
21767 +          set &indata;
21768 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
21769 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21770 +          if _TYPE_ = 'STD' then _NAME_='STD';
21771 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
21772 +          DROP _TYPE_ _NCL_;
21773 +     run;
21774 +
21775 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
21776 +        GCluster Component &globalclusid ------ */
21777 +
21778 +    filename _file_  "&fileref";
21779 +
21780 +    data _null_;
21781 +        %if &globalclusid eq 1 %then %do;
21782 +          FILE _file_;
21783 +        %end;
21784 +        %else %do;
21785 +          FILE _file_ MOD;
21786 +        %end;
21787 +
21788 +        %let dsid = %sysfunc(open(work._gscoretmpds));
21789 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21790 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21791 +
21792 +        %let k = 1;
21793 +        %do %while(^%sysfunc(fetch(&dsid)));
21794 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21795 +                %if &k > 2 %then %do;
21796 +                put "&_name = 0 ; ";
21797 +                %end;
21798 +                %let k = %eval(&k+1);
21799 +        %end;
21800 +
21801 +        %let rc = %sysfunc(rewind(&dsid));
21802 +        %do i= 2 %to &nvar;
21803 +            %let _varname =  %sysfunc(varname(&dsid, &i));
21804 +            %do %while(^%sysfunc(fetch(&dsid)));
21805 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21806 +                %if &_name = MEAN %then
21807 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
21808 +                %else %if &_name = STD %then
21809 +                %let _std = %sysfunc(getvarn(&dsid, &i));
21810 +                %else %do;
21811 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
21812 +                      %let abscoeff = %sysfunc(abs(&coeff));
21813 +                          %if &abscoeff >  0 %then %do;
21814 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21815 +                           %end;
21816 +                 %end;
21817 +             %end;
21818 +             %let rc = %sysfunc(rewind(&dsid));
21819 +
21820 +         %end;
21821 +
21822 +        %let dsid= %sysfunc(close(&dsid));
21823 +       run;
21824 +
21825 +
21826 +       proc datasets lib=work nolist;
21827 +            delete _gscoretmpds;
21828 +       run;
21829 +      quit;
21830 +
21831 +%mend CreateGClusterScoreCode;
21832 +
21833 +
21834 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
21835 +
21836 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
21837 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
21838 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
21839 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
21840 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
21841 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
21842 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
21843 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
21844 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
21845 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
21846 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
21847 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
21848 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
21849 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
21850 +
21851 +   filename gsfile "&gscorecode";
21852 +
21853 +   data &EM_USER_GSCORE;
21854 +             set &indata;
21855 +             %include  gsfile;
21856 +        keep
21857 +        %do i=1 %to &ngcluster;
21858 +         %let gcvarname = GC&i;
21859 +         &gcvarname
21860 +        %end;
21861 +     ;
21862 +   run;
21863 +
21864 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
21865 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
21866 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
21867 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
21868 +    noprint  ;
21869 +     var
21870 +       %do i=1 %to &ngcluster;
21871 +         %let gcvarname = GC&i;
21872 +         &gcvarname
21873 +        %end;
21874 +   ;
21875 +   run;
21876 +
21877 +
21878 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
21879 +   data &EM_USER_GSCORECORRPLOT ;
21880 +        set &EM_USER_GSCORECORRPLOT;
21881 +        rename _X_ = X;
21882 +        rename _Y_ = Y;
21883 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21884 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21885 +   run;
21886 +
21887 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
21888 +
21889 +   data &EM_USER_GSCORETREE;
21890 +        length _NAME_ $32;
21891 +        length _LABEL_ $100;
21892 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
21893 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
21894 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
21895 +        end;else do;
21896 +         _LABEL_ = _NAME_;
21897 +        end;
21898 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
21899 +
21900 +   run;
21901 +
21902 +   quit;
21903 +
21904 +%mend MakeGClusterCorrelation;
21905 +
21906 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
21907 +%macro report;
21908 +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
21909 +
21910 +    data _null_;
21911 +         set &EM_USER_VARCLUSMETA;
21912 +         if _N_=1 then
21913 +         call symput('_trainnum', TrainNum);
21914 +    run;
21915 +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
21916 +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
21917 +           %include temp;
21918 +           filename temp;
21919 +           %report1;
21920 +       %end;
21921 +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
21922 +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
21923 +           %include temp;
21924 +           filename temp;
21925 +           %report2;
21926 +    %end;
21927 +
21928 +   /* End of all runs, change the flag of newtrain to N */
21929 +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21930 +    data &EM_USER_VARCLUSMETA;
21931 +         set &EM_USER_VARCLUSMETA;
21932 +         NewTrain = "N";
21933 +    run;
21934 +    quit;
21935 +%mend report;
21936 +
21937 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      56000:166
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
21938 +%macro report1;
21940 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
21941 +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
21942 +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
21944 +   data &EM_USER_OUTVARSEL;
21945 +        set &EM_USER_OUTRSQUARE;
21946 +        if upcase(strip(SELECTED)) = 'YES' then output;
21947 +   run;
21949 +   data _tmp_outrsquare;
21950 +        set &EM_USER_OUTRSQUARE;
21951 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
21952 +   run;
21954 +   proc freq data =_tmp_outrsquare noprint;
21955 +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
21956 +   run;
21958 +   proc datasets lib = work nolist;
21959 +     delete _tmp_outrsquare;
21960 +   run;
21962 +   data &EM_USER_CLUSFREQ;
21963 +       set &EM_USER_CLUSFREQ;
21964 +       label
21965 +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
21966 +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
21967 +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
21968 +       ;
21969 +   run;
21971 +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
21972 +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
21973 +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
21975 +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
21976 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
21977 +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
21978 +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
21979 +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
21980 +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
21981 +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
21982 +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
21984 +   /*
21985 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
21986 +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
21987 +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
21990 +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 17 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTVARSEL has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_CLUSFREQ has 4 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS1.VARCLUS_CLUSFREQ has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
21993  *------------------------------------------------------------*;
21994  * End REPORT: VarClus;
21995  *------------------------------------------------------------*;
21996
 
21997  /* Reset EM Options */
21998  options formchar="|----|+|---+=|-/\<>*";
21999  options nocenter ls=256 ps=10000;
22000  goptions reset=all device=GIF NODISPLAY;
 
22001  proc sort data=WORK.EM_USER_REPORT;
22002  by ID VIEW;
22003  run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
