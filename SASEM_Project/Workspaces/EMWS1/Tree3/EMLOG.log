*------------------------------------------------------------*
User:                yinyen
Date:                November 17, 2019
Time:                16:33:43
Site:                12600285
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                November 17, 2019
Time:                16:33:29
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree3_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree3META;
14718  run;
 
NOTE: There were 46 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
14719  proc print data=WORK.Tree3META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 8 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='audience_score_positive'
                         ROLE='TARGET'
                         LEVEL='BINARY'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='CATEGORY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='C'
                         LABEL=''
                         FORMAT='$5.'
                         INFORMAT='$5.'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=5
                      )[11273]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
14811  data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14812  length ORDER $20;
14813  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14814     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14815  set EMWS1.TREE3_AUDIENCE_SCORE_P_DM( where=(_TYPE_="TARGET"));
14816  NumLevels=2;
14817  select(upcase(ORDER));
14818  when('DESC') ORDER = 'Descending';
14819  when('ASC') ORDER = 'Ascending';
14820  when('FMTDESC') ORDER = 'Formatted Descending';
14821  when('FMTASC') ORDER = 'Formatted Ascending';
14822  otherwise ORDER = 'Descending';
14823  end;
14824  output;
14825  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
14826  title9 ' ';
14827  proc print data=WORK.Tree3_EVENT noobs label;
14828  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14829  title9 ' ';
14830  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14831  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14832  title10;
 
"No decisions defined for target "audience_score_positive"."
14833  proc print data = EMWS1.Tree3_audience_score_p_DM noobs label;
14834  var _type_ variable label;
14835  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14836  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14837  title9 ' ';
14838  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14839  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14840  title10;
 
14841  %let EMEXCEPTIONSTRING=;
15366  *------------------------------------------------------------*;
15367  * Tree3: Generation of macros and macro variables;
15368  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15369  *------------------------------------------------------------*;
 
15370  %let EMEXCEPTIONSTRING=;
15371  *------------------------------------------------------------*;
15372  * TRAIN: Tree3;
15373  *------------------------------------------------------------*;
15374  %let EM_ACTION = TRAIN;
15375  %let syscc = 0;
15376  %macro main;
15377
15378    %if %upcase(&EM_ACTION) = CREATE %then %do;
15379      filename temp catalog 'sashelp.emmodl.tree_create.source';
15380      %include temp;
15381      filename temp;
15382
15383      %em_tree_create;
15384    %end;
15385
15386     %else
15387     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15388
15389         filename temp catalog 'sashelp.emmodl.tree_train.source';
15390         %include temp;
15391         filename temp;
15392         %em_tree_train;
15393     %end;
15394
15395    %else
15396    %if %upcase(&EM_ACTION) = SCORE %then %do;
15397      filename temp catalog 'sashelp.emmodl.tree_score.source';
15398      %include temp;
15399      filename temp;
15400
15401      %em_tree_score;
15402
15403    %end;
15404
15405    %else
15406    %if %upcase(&EM_ACTION) = REPORT %then %do;
15407
15408         filename temp catalog 'sashelp.emmodl.tree_report.source';
15409         %include temp;
15410         filename temp;
15411
15412         %em_tree_report;
15413     %end;
15414
15415    %else
15416    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15417
15418         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15419         %include temp;
15420         filename temp;
15421         %EM_TREE_OPENTREEVIEWER;
15422
15423     %end;
15424
15425    %else
15426    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15427
15428         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15429         %include temp;
15430         filename temp;
15431         %EM_TREE_CLOSETREEVIEWER;
15432
15433     %end;
15434
15435
15436     %doendm:
15437  %mend main;
15438
15439  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15441 +%macro em_tree_train;
15443 +   %if &EM_IMPORT_DATA eq %then %do;
15444 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15445 +       %put &em_codebar;
15446 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15447 +       %put &errormsg;
15448 +       %put &em_codebar;
15449 +       %goto doendm;
15450 +   %end;
15451 +   %else
15452 +       %let EMEXCEPTIONSTRING =;
15454 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15455 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15456 +        %put &em_codebar;
15457 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15458 +        %put &errormsg;
15459 +        %put &em_codebar;
15460 +        %goto doendm;
15461 +   %end;
15463 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15464 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15465 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15466 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15467 +        %put &em_codebar;
15468 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15469 +        %put &errormsg;
15470 +        %put &em_codebar;
15471 +        %goto doendm;
15472 +   %end;
15474 +   /* Initialize property macro variables */
15475 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15476 +   %include temp;
15477 +   filename temp;
15479 +   %EM_SetProperties;
15481 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15482 +   %EM_GETNAME(key=EMTREE, type=DATA);
15483 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15484 +     /* if import eq Y and no importtable defined, throw an exception */
15485 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15486 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15487 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15488 +         %put &em_codebar;
15489 +         %put &errmsg;
15490 +         %put &em_codebar;
15491 +         %goto doendm;
15492 +      %end;
15493 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15494 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15495 +         %put &em_codebar;
15496 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15497 +         %put &errormsg;
15498 +         %put &em_codebar;
15499 +         %goto doendm;
15500 +      %end;
15501 +      %else %do;
15502 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15503 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15504 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15505 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15506 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15507 +         %let dsid = %sysfunc(close(&dsid));
15508 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15509 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15510 +            %put &em_codebar;
15511 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15512 +            %put &errormsg;
15513 +            %put &em_codebar;
15514 +            %goto doendm;
15515 +         %end;
15516 +      %end;
15517 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15518 +         proc delete data=&EM_USER_EMTREE;
15519 +         run;
15520 +      %end;
15521 +   %end;
15522 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15523 +      proc delete data=&EM_USER_EMTREE;
15524 +      run;
15525 +   %end;
15527 +   /* load tree macros */
15528 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15529 +   %include temp;
15530 +   filename temp;
15532 +   /* data sets */
15533 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15534 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15535 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15537 +   /* files */
15538 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15540 +   /* check actual num of target levels */
15541 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15542 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15543 +                              nLevel=_nTargetLevel );
15544 +      %if &_nTargetLevel  > 2 %then %do;
15545 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15546 +        %put &em_codebar;
15547 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15548 +        %put &errormsg;
15549 +        %put &em_codebar;
15550 +        %goto doendm;
15551 +      %end;
15552 +   %end;
15554 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15555 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15556 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15557 +        %let costflag=0;
15558 +        data _null_;
15559 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15560 +          if eof then call symput("costflag", _N_);
15561 +        run;
15562 +        %if &costflag gt 0 %then %do;
15563 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15564 +          %put &em_codebar;
15565 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15566 +          %put &errormsg;
15567 +          %put &em_codebar;
15568 +          %goto doendm;
15569 +       %end;
15570 +     %end;
15571 +   %end;
15573 +   /* determine if multiple targets will be processed */
15574 +   %let em_tree_multipleTargets=N;
15575 +   %let em_tree_numTarget = 1;
15576 +   %let em_tree_targetVars=;
15578 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15579 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15580 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15581 +         %let em_tree_multipleTargets=N;
15582 +      %end;
15583 +      %else %do;
15584 +         /* create macro array of targets  */
15585 +         data _null_;
15586 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15587 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15588 +           if eof then
15589 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15590 +        run;
15592 +        %if &em_tree_numTarget gt 1 %then %do;
15593 +           %let em_tree_multipleTargets=Y;
15594 +        %end;
15595 +      %end;
15596 +   %end;
15598 +   /* create view of only necessary variable for performance reasons */
15599 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15600 +   data &tempData / view=&tempData;
15601 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15602 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15603 +       %EM_TARGET
15604 +     %end;
15605 +     %else %do;
15606 +       %if &em_tree_numTarget ne 0 %then %do;
15607 +         %do i=1 %to &em_tree_numTarget;
15608 +            &&em_tree_targetVars&i
15609 +         %end;
15610 +       %end;
15611 +     %end;
15612 +     );
15613 +   run;
15615 +   /* run Tree procedure */
15616 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15618 +   /* Check return code and throw exception if error is detected */
15619 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15620 +   %if &syserr %then %do;
15621 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15622 +     %goto doendm;
15623 +   %end;
15625 +   /* add decision score code if multiple targets are processed */
15626 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15627 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15628 +   %end;
15630 +   /* create outfit dataset if multiple score statements have been executed */
15631 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15633 +   /* create English Rules */
15634 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15635 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15636 +       %em_tree_makeEnglishRules;
15638 +       /* English Rules */
15639 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15641 +     %end;
15642 +   filename x;
15644 +   %doendm:
15645 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15646 +%macro EM_SetProperties;
15648 +   /* train properties */
15649 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15689 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15691 +   /* properties for interactive sample */
15692 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15693 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15694 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15695 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15697 +   /* report properties */
15698 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15699 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15700 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15701 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15702 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15703 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15704 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15705 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15706 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15707 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15708 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15709 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15710 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15712 +   /* score properties */
15713 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15714 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15716 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15718 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15719 +  %global &nLevel;
15720 +  proc dmdb batch data=&indata
15721 +    classout=_tmp_dmdbout;
15722 +    class &target;
15723 +  run;
15724 +  data _tmp_dmdbout;
15725 +    set _tmp_dmdbout;
15726 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15727 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15728 +  run;
15729 +  data _null_;
15730 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15731 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15732 +    %let dsid = %sysfunc(close(&dsid));
15733 +     call symput("&nLevel", put(&_obs, Best12.));
15734 +  run;
15736 +  proc datasets lib=work nolist;
15737 +     delete _tmp_dmdbout;
15738 +  run;
15739 +  quit;
15740 +%Mend EM_CheckBinaryTargetLevel;
15743 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15745 +  /* determine the number of obs in training data */
15746 +  proc sql;
15747 +    reset noprint;
15748 +    select count(*) into :em_nobs from &indata;
15749 +  quit;
15751 +  /* determine the number of input variables */
15752 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15753 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15755 +  /* retrieve targetEvent from decmeta */
15756 +  %let targetEvent=;
15757 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15758 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15759 +      data _null_;
15760 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15761 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15762 +      run;
15763 +    %end;
15764 +  %end;
15766 +  /* create targetTable if multipleTar eq Y */
15767 +  data temptarget;
15768 +    set &EM_DATA_VARIABLESET;
15769 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15770 +  run;
15772 + /* data sets */
15773 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15774 + %EM_GETNAME(key=EMTREE,        type=DATA);
15775 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15776 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15777 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15778 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15779 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15780 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15781 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15782 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15784 + /* files */
15785 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15786 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15788 + /* turn on pmml if requested */
15789 + %let nnpmml=0;
15790 + %if %symexist(EM_PMML) %then %do;
15791 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15792 +       %let nnpmml=1;
15794 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15795 +%end;
15797 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15799 + %if &nnpmml or &numClassTarget %then %do;
15801 +       /* create dmdb needed for pmml generation */
15802 +       %let tree_maxlevel = 512;
15803 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15804 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15805 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15806 +         %end;
15807 +       %end;
15808 +       %if &tree_maxlevel gt 0 %then %do;
15809 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15810 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15811 +       %end;
15813 +       %let targetOrderString =;
15814 +       %let targetString = ;
15815 +       data _null_;
15816 +          length orderString nameString $10000;
15817 +          retain orderString nameString;
15818 +          set &em_data_variableset end=eof;
15819 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15820 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15821 +          %end;
15822 +          %else %do;
15823 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15824 +          %end;          select(order);
15825 +            when('')        order ='DESC';
15826 +            when('FMTASC')  order='ASCFMT';
15827 +            when('FMTDESC') order='DESFMT';
15828 +            otherwise;
15829 +          end;
15830 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15831 +          nameString = trim(nameString)!!' '!!trim(NAME);
15833 +          if eof then do;
15834 +             call symput('targetOrderString', trim(orderString));
15835 +             call symput('targetString', trim(nameString));
15836 +          end;
15837 +       run;
15839 +       %let arborkluge= "work._treeDMDB";
15841 +       proc dmdb batch data=&indata
15842 +       %if &nnpmml %then %do;
15843 +           PMML
15844 +       %end;
15845 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15848 +   %if &nnpmml %then %do;
15849 +        %if "%EM_ID" ne "" %then %do;
15850 +          id %EM_ID;
15851 +        %end;
15852 +        %if &EM_NUM_CLASS gt 0 %then %do;
15853 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15854 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15855 +               &targetOrderString;
15856 +        %end;
15857 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15858 +          var %EM_INTERVAL;
15859 +        %end;
15860 +        target &targetString %EM_INTERVAL_TARGET;
15861 +        %if "%EM_FREQ" ne "" %then %do;
15862 +          freq %EM_FREQ;
15863 +        %end;
15864 +  %end;
15865 +  %else %do;
15866 +      class  &targetOrderString;
15867 +      target &targetString %EM_INTERVAL_TARGET;
15868 +  %end;
15869 +       run;
15870 +       quit;
15872 +       proc datasets lib=work nolist;
15873 +          delete classout varout;
15874 +       run;
15875 +       quit;
15877 +    %end;
15878 + %end;
15880 + /* run Arbor procedure */
15881 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15882 +  proc arbor data=&INDATA
15884 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15885 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15886 +  %end;
15888 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15889 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15890 +  %end;
15892 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15893 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15894 +  %end;
15896 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15897 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15898 +  %end;
15900 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15901 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15902 +  %end;
15904 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15905 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15906 +  %end;
15907 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15908 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15909 +  %end;
15910 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15911 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15912 +  %end;
15914 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15915 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15916 +      alpha = &EM_PROPERTY_SIGLEVEL
15917 +    %end;
15918 +  %end;
15920 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15921 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15922 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15923 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15924 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15926 +        padjust =
15927 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15928 +          &chaid
15929 +        %end;
15930 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15931 +          DEPTH
15932 +        %end;
15933 +      %end;
15934 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15935 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15936 +         pvars = &num_inputs
15937 +      %end;
15938 +    %end;
15939 +  %end;
15940 +  %else %do;
15941 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15942 +         padjust = NONE
15943 +      %end;
15944 +  %end;
15946 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15947 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15948 +    Maxrules = &num_nrules
15949 +  %end;
15951 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15952 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15953 +    Maxsurrs = &num_nsurrs
15954 +  %end;
15956 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15957 +     Missing=&EM_PROPERTY_MISSINGVALUE
15958 +  %end;
15960 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15961 +     USEVARONCE
15962 +  %end;
15964 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15965 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15966 +  %end;
15969 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15970 +    event = "&targetEvent"
15971 +  %end;
15973 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15974 +     DECSEARCH
15975 +  %end;
15977 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15978 +     PRIORSSEARCH
15979 +  %end;
15981 +  %if &arbor_1 ne %then %do;
15982 +    &arbor_1
15983 +  %end;
15985 +  %if &em_arbor ne %then %do;
15986 +     &em_arbor
15987 +  %end;
15988 +  ;
15989 + %end;
15990 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15991 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15992 +       interact;
15993 + %end;
15994 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15995 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15996 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15997 +    %put &em_codebar;
15998 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15999 +    %put &errormsg;
16000 +    %put &em_codebar;
16001 +    %goto doendm;
16002 +   %end;
16003 +   %else %do;
16004 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16005 +       interact;
16006 +   %end;
16007 + %end;
16009 + %else %do;
16010 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16011 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16012 +    %put &em_codebar;
16013 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16014 +    %put &errormsg;
16015 +    %put &em_codebar;
16016 +    %goto doendm;
16017 +   %end;
16018 +   %else %do;
16019 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16020 +        interact;
16021 +   %end;
16022 + %end;
16024 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16025 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16026 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16027 +    %end;
16029 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16030 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16031 +    %end;
16033 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16034 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16035 +    %end;
16037 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16038 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16039 +    %end;
16041 +    %if "%EM_FREQ" ne "" %then %do;
16042 +       freq %EM_FREQ;
16043 +    %end;
16045 +    %if "&multipleTar" eq "Y" %then %do;
16046 +       /* cycle through all target vars in variableset */
16047 +       %let tdsid = %sysfunc(open(temptarget));
16048 +       %if &tdsid %then %do;
16049 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16050 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16051 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16052 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16053 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16054 +             target &var / level = &lvl
16055 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16056 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16057 +             %end;
16058 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16059 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16060 +             %end;
16061 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16062 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16063 +             %end;
16064 +          %end;
16065 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16066 +       %end;
16067 +       useTarget variable = %EM_TARGET;
16068 +    %end;
16069 +    %else %do;
16070 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16071 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16072 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16073 +      %end;
16074 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16075 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16076 +      %end;
16077 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16078 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16079 +      %end;
16080 +    %end;
16082 +    %if "&multipleTar" eq "N" %then %do;
16083 +      &EM_DEC_STATEMENT;
16084 +    %end;
16086 +    Performance &EM_PROPERTY_PERFORMANCE
16087 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16088 +      nodesize=&EM_PROPERTY_NODESAMPLE
16089 +    %end;
16090 +    ;
16092 +    %if "&intFlag" eq "Y" %then %do;
16093 +       INTERACT Largest;
16094 +       Train maxnewdepth=0;
16095 +    %end;
16097 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16098 +         Assess
16099 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16100 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16101 +              %put &em_codebar;
16102 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16103 +              %put &errormsg;
16104 +              %put &em_codebar;
16105 +            %end;
16106 +            %else %do;
16107 +               Validata=&EM_IMPORT_VALIDATE
16108 +            %end;
16109 +         %end;
16110 +         %else %do;
16111 +           NoValidata
16112 +         %end;
16113 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16114 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16115 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16116 +               %if &dsid %then %do;
16117 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16118 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16119 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16120 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16121 +                   %else %do;
16122 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16123 +                      %else %let measure= MISC;
16124 +                   %end;
16125 +                 %end;
16126 +               %end;
16127 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16128 +            %end;
16129 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16130 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16131 +                 %let measure=ASE;
16132 +              %end;
16133 +              %else %do;
16134 +                 %let measure=MISC;
16135 +              %end;
16136 +            %end;
16137 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16138 +              %let measure=ASE;
16139 +            %end;
16140 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16141 +               %let measure = LIFT;
16142 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16143 +               %if &dsid %then %do;
16144 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16145 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16146 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16147 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16148 +                 %end;
16149 +               %end;
16150 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16151 +            %end;
16152 +            measure=&measure
16153 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16154 +               event = "&targetEvent"
16155 +            %end;
16156 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16157 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16158 +            %end;
16159 +         %end;
16160 +         %if "&multipleTar" eq "N" %then %do;
16161 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16162 +               CV
16163 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16164 +                 CVNITer = &EM_PROPERTY_CVNITER
16165 +               %end;
16166 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16167 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16168 +               %end;
16169 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16170 +                 CVSeed = &EM_PROPERTY_CVSEED
16171 +               %end;
16172 +            %end;
16173 +         %end;
16174 +       %end;
16175 +      ;
16177 +      %if "&intFlag" ne "Y" %then %do;
16178 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16179 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16180 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16181 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16183 +          SUBTREE &subtree
16184 +          %if "&subtree" eq "NLEAVES" %then %do;
16185 +            =&EM_PROPERTY_NSUBTREE
16186 +          %end;
16187 +          ;
16188 +        %end;
16190 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16191 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16192 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16193 +          %end;
16194 +       %end;
16195 +      %end;
16196 + %end;
16199 + MakeMacro nleaves = nleaves;
16200 + save
16201 + %if "&EM_USER_EMTREE" ne "" %then %do;
16202 +   MODEL=&EM_USER_EMTREE
16203 + %end;
16204 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16205 +   SEQUENCE=&EM_USER_OUTSEQ
16206 + %end;
16207 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16208 +   IMPORTANCE=&EM_USER_OUTIMPORT
16209 + %end;
16210 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16211 +   NODESTAT=&EM_USER_OUTNODES
16212 + %end;
16213 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16214 +   SUMMARY=&EM_USER_OUTSUMMARY
16215 + %end;
16216 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16217 +   STATSBYNODE=&EM_USER_OUTSTATS
16218 + %end;
16219 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16220 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16221 + %end;
16222 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16223 +   Pathlistnonmissing=&EM_USER_OUTPATH
16224 + %end;
16225 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16226 +   RULES = &EM_USER_OUTRULES
16227 + %end;
16228 + ;
16230 + %if "&intFlag" ne "Y" %then %do;
16232 +   %let lookupString = ;
16233 +   %if ^%symexist(EM_OPTION) %then
16234 +      %let EM_OPTION=;
16236 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16237 +      %let lookupString = LOOKUP=SELECT;
16238 +   %end;
16240 +   %let codetext=;
16241 +   %let norescodetxt=;
16243 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16244 +     %let codetext=&codetext DUMMY;
16245 +     %let norescodetxt=&norescodetxt DUMMY;
16246 +   %end;
16247 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16248 +     %let codetext=&codetext NOLEAFID;
16249 +     %let norescodetxt=&norescodetxt NOLEAFID;
16250 +   %end;
16251 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16252 +     %let norescodetxt=&norescodetxt NOPRED;
16253 +   %end;
16255 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16256 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16258 +   %if &nnpmml %then %do;
16259 +     code pmml;
16260 +   %end;
16262 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16263 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16264 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16265 +   %end;
16266 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16267 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16268 +   %end;
16269 + %end;
16271 + run;
16272 + quit;
16274 + /*%em_checkerror(); */
16275 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16276 +   /* Delete DMDB catalog */
16277 +   proc datasets lib=work nolist;
16278 +       delete _treeDMDB / mt=cat;
16279 +  run;
16280 +  %end;
16282 + %if &nnpmml %then %do;
16283 +    ods pmml close;
16284 + %end;
16286 +  %doendm:
16288 +%mend em_tree_runTreeProcedure;
16290 +%macro em_tree_createFitStats( multipleTar= );
16293 +  /* create targetTable is multipleTar eq Y */
16294 +  data temptarget;
16295 +    set &EM_DATA_VARIABLESET;
16296 +    where ROLE="TARGET";
16297 +  run;
16299 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16300 +   data &EM_USER_EMOUTFIT;
16301 +     length target $32;
16302 +     merge work.fit_train
16303 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16304 +       work.fit_valid
16305 +     %end;
16306 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16307 +       work.fit_test
16308 +     %end;
16309 +     ;
16310 +     %if "&multipleTar" eq "N" %then %do;
16311 +       target="%EM_TARGET";
16312 +     %end;
16313 +     %else %do;
16314 +       target = _TARGET_;
16315 +     %end;
16316 +     drop _NW_ _SUMW_
16317 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16318 +        _VSUMW_
16319 +     %end;
16320 +     ;
16321 +   run;
16323 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16324 +     proc datasets library=work nolist;
16325 +       delete fit_valid;
16326 +     run;
16327 +   %end;
16328 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16329 +     proc datasets library=work nolist;
16330 +       delete fit_test;
16331 +     run;
16332 +   %end;
16334 +%mend em_tree_createFitStats;
16337 +%macro em_tree_makeEnglishRules;
16339 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16340 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16342 +  /* verify that necessary tables exist and if not, skip processing */
16343 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16344 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16345 +    %goto doendm;
16346 +  %end;
16347 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16348 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16349 +    %goto doendm;
16350 +  %end;
16352 +  /* determine length of variable in outpath dataset */
16353 +  %let vlength= ;
16354 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16355 +  %if &dsid ne %then %do;
16356 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16357 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16358 +  %end;
16359 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16361 +  data tempoutpath;
16362 +    length varname $&vlength;
16363 +    retain varname;
16364 +    set &EM_USER_OUTPATH;
16366 +    if ^missing(variable) then varname=variable;
16367 +    else if ^missing(var_name) then varname=var_name;
16368 +    output;
16369 +  run;
16371 +  /* create an array of generated predicted variable names */
16372 +  %let tree_pred_vars = ;
16373 +  %let tree_pred_label = ;
16374 +  %let numpred= 0;
16375 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16377 +    data _null_;
16378 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16379 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16380 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16381 +     if eof then
16382 +       call symput('numpred', strip(put(_N_, BEST.)));
16383 +    run;
16384 +  %end;
16386 +  /* determine if NPRIORS exists in outnodes  */
16387 +  %local nprior_flag;
16388 +  data _null_;
16389 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16390 +    if eof then do;
16391 +      call symput('nprior_flag', strip(put(npriors, best.)));
16392 +    end;
16393 +  run;
16395 +  proc sort data=tempoutpath; by node; run;
16396 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16398 +  data tempoutpath;
16399 +    merge tempoutpath(in=_a) outnodes(keep= node
16400 +    %if "&nprior_flag" ne "." %then %do;
16401 +      NPRIORS
16402 +    %end;
16403 +    %else %do;
16404 +      N
16405 +    %end;
16406 +    %if &numpred gt 0 %then %do;
16407 +      %do i=1 %to &numpred;
16408 +        &&tree_pred_vars&i
16409 +      %end;
16410 +    %end;
16411 +    );
16412 +    by node;
16413 +    if _a;
16414 +  run;
16416 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16418 +  data _null_;
16419 +    file x;
16420 +    set tempoutpath;
16421 +    by node descending varname;
16422 +    retain origvar oldnode string;
16423 +    length origvar $32 oldnode 8 string $200;
16425 +    if _N_ = 1 then do;
16426 +      origvar = varname;
16427 +      oldnode = node;
16428 +    end;
16430 +    if first.node then do;
16431 +       put "&EM_CODEBAR";
16432 +       put " Node = " node;
16433 +       put "&EM_CODEBAR";
16434 +    end;
16436 +      if first.varname then do;
16437 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16438 +            if MISSING(CHARACTER_VALUE) then do;
16439 +             if NUMERIC_VALUE ne .  then do;
16440 +              if ^first.node then do;
16441 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16442 +              end;
16443 +              else do;
16444 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16445 +              end;
16446 +             end;
16447 +            end;
16448 +            else do;
16449 +              if ^first.node then do;
16450 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16451 +              end;
16452 +              else do;
16453 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16454 +              end;
16455 +             end;
16456 +         end;
16457 +         else if RELATION in ("=") then do;
16458 +            if ^first.node then do;
16459 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16460 +            end;
16461 +            else do;
16462 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16463 +            end;
16464 +         end;
16465 +         else if RELATION in ("ISMISSING") then do;
16466 +            if ^first.node then do;
16467 +              string = " AND "|| strip(varname) || " equals Missing";
16468 +            end;
16469 +            else do;
16470 +              string = "if "|| strip(varname) ||" equals Missing";
16471 +            end;
16472 +         end;
16473 +         else if RELATION in ("ISNOTMISSING") then do;
16474 +            if ^first.node then do;
16475 +              string = " AND "|| strip(varname) || " equals All Values";
16476 +            end;
16477 +            else do;
16478 +              string = "if "|| strip(varname) ||" equals All Values";
16479 +            end;
16480 +         end;
16481 +         if ^missing(varname) then origvar = varname;
16482 +         oldnode=node;
16484 +      end;
16485 +      else do;
16486 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16487 +          if MISSING(CHARACTER_VALUE) then do;
16488 +           if  NUMERIC_VALUE ne .  then do;
16489 +            if ^MISSING(string) then
16490 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16491 +            else
16492 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16493 +           end;
16494 +          end;
16495 +          else do;
16496 +            if ^MISSING(string) then
16497 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16498 +            else
16499 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16500 +          end;
16502 +         end;
16503 +         else if RELATION in ("=") then do;
16504 +           string = strip(string)||", "||strip(character_value);
16505 +         end;
16506 +         else if RELATION in ("ISMISSING") then do;
16508 +         end;
16509 +         if ^missing(varname) then origvar = varname;
16510 +         oldnode=node;
16511 +      end;
16512 +      if last.varname then do;
16513 +         if RELATION in ("ISMISSING") then do;
16514 +           if ^first.varname then do;
16515 +             string = strip(string) || " or MISSING";
16516 +           end;
16517 +         end;
16518 +         put string;
16519 +         if ^missing(varname) then origvar = varname;
16520 +         oldnode=node;
16521 +      end;
16523 +      if last.node then do;
16524 +         put "then ";
16525 +         put " Tree Node Identifier   = " node;
16527 +         %if "&nprior_flag" ne "." %then %do;
16528 +           put " Number of Observations = " NPRIORS;
16529 +         %end;
16530 +         %else %do;
16531 +           put " Number of Observations = " N;
16532 +         %end;
16534 +         %if &numpred gt 0 %then %do;
16535 +           %do i=1 %to &numpred;
16536 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16537 +           %end;
16538 +         %end;
16540 +         put " ";
16541 +         if ^missing(varname) then origvar = varname;
16542 +         oldnode=node;
16543 +      end;
16545 +  run;
16547 +  proc datasets lib=work nolist;
16548 +    delete tempoutpath outnodes;
16549 +  run;
16551 +  %doendm:
16552 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.17 seconds
      cpu time            0.10 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.20 seconds
      cpu time            0.15 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.15 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.26 seconds
      cpu time            0.17 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: 1381800 kilobytes of physical memory.
NOTE: Will use 2438 out of 2438 training cases.
NOTE: Using memory pool with 332268544 bytes.
NOTE: Will not search for split on variable NC17.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 2349992 bytes of work memory.
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.64 seconds
      cpu time            0.37 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.
NOTE: The subtree sequence contains 25 subtrees. The largest has 49 nodes and 25 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Created macro variable NLEAVES equal to 11.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 38 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_EMTREE has 1739 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTNODES has 21 observations and 24 variables.
NOTE: The data set EMWS1.TREE3_OUTPATH has 97 observations and 7 variables.
NOTE: The data set EMWS1.TREE3_OUTRULES has 354 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 25 observations and 20 variables.
NOTE: The data set EMWS1.TREE3_OUTSTATS has 147 observations and 5 variables.
NOTE: The data set EMWS1.TREE3_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTTOPOLOGY has 21 observations and 5 variables.
NOTE: External file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\TREEFLOW.sas opened.
NOTE: External file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas opened.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.11 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.
 
 
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           1.54 seconds
      cpu time            0.84 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.58 seconds
      cpu time            0.85 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set EMWS1.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 21 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=17Nov2019:16:33:35,
      Create Time=17Nov2019:16:33:35
 
NOTE: 144 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
NOTE: Fileref X has been deassigned.
16554
16555  *------------------------------------------------------------*;
16556  * End TRAIN: Tree3;
16557  *------------------------------------------------------------*;
 
16558  *------------------------------------------------------------*;
16559  * Close any missing semi colons;
16560  *------------------------------------------------------------*;
16561  ;
16562  ;
16563  ;
16564  ;
16565  quit;
16566  *------------------------------------------------------------*;
16567  * Close any unbalanced quotes;
16568  *------------------------------------------------------------*;
16569  /*; *"; *'; */
16570  ;
16571  run;
16572  quit;
16573  /* Reset EM Options */
16574  options formchar="|----|+|---+=|-/\<>*";
16575  options nocenter ls=256 ps=10000;
16576  goptions reset=all device=GIF NODISPLAY;
 
16577  proc sort data=WORK.EM_USER_REPORT;
16578  by ID VIEW;
16579  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                November 17, 2019
Time:                16:33:36
*------------------------------------------------------------*
16681  %let EMEXCEPTIONSTRING=;
16682  *------------------------------------------------------------*;
16683  * SCORE: Tree3;
16684  *------------------------------------------------------------*;
16685  %let EM_ACTION = SCORE;
16686  %let syscc = 0;
16687  %macro main;
16688
16689    %if %upcase(&EM_ACTION) = CREATE %then %do;
16690      filename temp catalog 'sashelp.emmodl.tree_create.source';
16691      %include temp;
16692      filename temp;
16693
16694      %em_tree_create;
16695    %end;
16696
16697     %else
16698     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16699
16700         filename temp catalog 'sashelp.emmodl.tree_train.source';
16701         %include temp;
16702         filename temp;
16703         %em_tree_train;
16704     %end;
16705
16706    %else
16707    %if %upcase(&EM_ACTION) = SCORE %then %do;
16708      filename temp catalog 'sashelp.emmodl.tree_score.source';
16709      %include temp;
16710      filename temp;
16711
16712      %em_tree_score;
16713
16714    %end;
16715
16716    %else
16717    %if %upcase(&EM_ACTION) = REPORT %then %do;
16718
16719         filename temp catalog 'sashelp.emmodl.tree_report.source';
16720         %include temp;
16721         filename temp;
16722
16723         %em_tree_report;
16724     %end;
16725
16726    %else
16727    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16728
16729         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16730         %include temp;
16731         filename temp;
16732         %EM_TREE_OPENTREEVIEWER;
16733
16734     %end;
16735
16736    %else
16737    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16738
16739         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16740         %include temp;
16741         filename temp;
16742         %EM_TREE_CLOSETREEVIEWER;
16743
16744     %end;
16745
16746
16747     %doendm:
16748  %mend main;
16749
16750  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16752 +%macro em_tree_score;
16754 +   /* determine if multiple targets will be processed */
16755 +   %let em_tree_multipleTargets=N;
16756 +   %let em_tree_numTarget=1;
16757 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16758 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16759 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16760 +         %let em_tree_multipleTargets=N;
16761 +      %end;
16762 +      %else %do;
16763 +         /* create macro array of targets  */
16764 +         data _null_;
16765 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16766 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16767 +           if eof then
16768 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16769 +        run;
16771 +        %if &em_tree_numTarget gt 1 %then %do;
16772 +           %let em_tree_multipleTargets=Y;
16773 +        %end;
16774 +      %end;
16775 +   %end;
16777 +   /* build flow and publish scoring code */
16778 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16779 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16781 +   filename treeflow "&EM_USER_TREEFLOW";
16782 +   filename treepub "&EM_USER_TREEPUBLISH";
16784 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16785 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16787 +   %em_copyfile(infref=treeflow, outfref=flowref);
16788 +   %em_copyfile(infref=treepub, outfref=pubref);
16790 +   filename treeflow;
16791 +   filename treepub;
16793 +   /* if priors are used, add code to generate unadjusted residuals in export */
16794 +   %let useAdjPriors = N;
16795 +   data _null_;
16796 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16797 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16798 +   run;
16799 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16800 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16801 +      %include temp;
16802 +      filename temp;
16804 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16805 +      filename adjref "&EM_USER_adjResidualCode";
16806 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16808 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16810 +      filename adjref;
16811 +   %end;
16813 +   /* LEAF */
16814 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16815 +      data _null_;
16816 +        file flowref mod;
16817 +        put 'drop _LEAF_;';
16818 +      run;
16820 +      data _null_;
16821 +        file pubref mod;
16822 +        put 'drop _LEAF_;';
16823 +      run;
16825 +   %end;
16827 +   filename flowref;
16828 +   filename pubref;
16830 +   /* em_metachange code */
16831 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16832 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16833 +   %end;
16835 +   /* variable selection based on importance stat    */
16836 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16837 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16838 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16839 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16840 +     %let obs = %sysfunc(fetch(&dsid));
16841 +     %do %while(&obs=0);
16842 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16843 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16844 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16845 +       %let obs = %sysfunc(fetch(&dsid));
16846 +     %end;
16847 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16848 +   %end;
16850 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16851 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16852 +    %let tree_pred_vars = ;
16853 +    %let tree_pred_lvl =;
16854 +    %let numpred= 0;
16856 +    data _null_;
16857 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16858 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16859 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16860 +     if eof then
16861 +       call symput('numpred', strip(put(_N_, BEST.)));
16862 +    run;
16863 +   %end;
16865 +   %if &numpred ne 0 %then %do;
16866 +    %do i=1 %to &numpred;
16867 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16868 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16869 +    %end;
16870 +   %end;
16872 +   /* determine if multiple targets will be processed */
16873 +   %let em_tree_multipleTargets=N;
16874 +   %let em_tree_numTarget=1;
16875 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16876 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16877 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16878 +         %let em_tree_multipleTargets=N;
16879 +      %end;
16880 +      %else %do;
16881 +        data _null_;
16882 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16883 +          if eof then
16884 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16885 +        run;
16887 +        %if &em_tree_numTarget gt 1 %then %do;
16888 +           %let em_tree_multipleTargets=Y;
16889 +        %end;
16890 +     %end;
16891 +   %end;
16893 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16894 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16896 +      /* variable importance */
16897 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16898 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16900 +         %let validexist=0;
16901 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16902 +           %let validexist=1;
16903 +         %end;
16905 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16906 +         /* and the columns may not be generated                                                                                 */
16907 +         %let em_tree_cvexists=;
16908 +         %let em_tree_surrexists=.;
16909 +         data _null_;
16910 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16911 +            if eof then do ;
16912 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16913 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16914 +            end;
16915 +         run;
16917 +         data &EM_USER_OUTIMPORT;
16918 +            set &EM_USER_OUTIMPORT;
16920 +            /* format columns based on Precison value specified */
16921 +            format importance 15.&EM_PROPERTY_PRECISION
16922 +                 %if &validexist %then %do;
16923 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16924 +                 %end;
16925 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16926 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16927 +                 %end;
16928 +            ;
16929 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16930 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16931 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16932 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16933 +                 %if "&em_tree_surrexists" ne "" %then %do;
16934 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16935 +                 %end;
16936 +                 %if &validexist %then %do;
16937 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16938 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16939 +                 %end;
16940 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16941 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16942 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16943 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16944 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16945 +                 %end;
16946 +            ;
16947 +         run;
16949 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16950 +      %end;
16951 +   %end;
16953 +   %doendm:
16954 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=17Nov2019:16:33:35,
      Create Time=17Nov2019:16:33:07
 
NOTE: 234 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 75.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=17Nov2019:16:33:35,
      Create Time=17Nov2019:16:33:07
 
NOTE: 208 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 67.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10528,
      Last Modified=17Nov2019:16:33:35,
      Create Time=17Nov2019:16:33:07
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9470,
      Last Modified=17Nov2019:16:33:35,
      Create Time=17Nov2019:16:33:07
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 38 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 38 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
16955
16956  *------------------------------------------------------------*;
16957  * End SCORE: Tree3;
16958  *------------------------------------------------------------*;
 
16959  proc sort data=WORK.EM_METACHANGE;
16960  by key uname;
16961  run;
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
16962  filename x "D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas";
16963  data _null_;
16964  file x;
16965  put 'if upcase(NAME) = "G" then do;';
16966  put 'ROLE = "REJECTED";';
16967  put 'end;';
16968  put 'else ';
16969  put 'if upcase(NAME) = "GENRE_ACTION" then do;';
16970  put 'ROLE = "REJECTED";';
16971  put 'end;';
16972  put 'else ';
16973  put 'if upcase(NAME) = "GENRE_ADVENTURE" then do;';
16974  put 'ROLE = "REJECTED";';
16975  put 'end;';
16976  put 'else ';
16977  put 'if upcase(NAME) = "GENRE_ANIMATIONMANGA" then do;';
16978  put 'ROLE = "REJECTED";';
16979  put 'end;';
16980  put 'else ';
16981  put 'if upcase(NAME) = "GENRE_ARTHOUSEINTER" then do;';
16982  put 'ROLE = "REJECTED";';
16983  put 'end;';
16984  put 'else ';
16985  put 'if upcase(NAME) = "GENRE_CLASSICSCULT" then do;';
16986  put 'ROLE = "REJECTED";';
16987  put 'end;';
16988  put 'else ';
16989  put 'if upcase(NAME) = "GENRE_COMEDY" then do;';
16990  put 'ROLE = "REJECTED";';
16991  put 'end;';
16992  put 'else ';
16993  put 'if upcase(NAME) = "GENRE_FAMILYKIDS" then do;';
16994  put 'ROLE = "REJECTED";';
16995  put 'end;';
16996  put 'else ';
16997  put 'if upcase(NAME) = "GENRE_FANTASY" then do;';
16998  put 'ROLE = "REJECTED";';
16999  put 'end;';
17000  put 'else ';
17001  put 'if upcase(NAME) = "GENRE_FITNESSSPORTS" then do;';
17002  put 'ROLE = "REJECTED";';
17003  put 'end;';
17004  put 'else ';
17005  put 'if upcase(NAME) = "GENRE_MUSICALPERFARTS" then do;';
17006  put 'ROLE = "REJECTED";';
17007  put 'end;';
17008  put 'else ';
17009  put 'if upcase(NAME) = "GENRE_ROMANCE" then do;';
17010  put 'ROLE = "REJECTED";';
17011  put 'end;';
17012  put 'else ';
17013  put 'if upcase(NAME) = "GENRE_SCI_FI" then do;';
17014  put 'ROLE = "REJECTED";';
17015  put 'end;';
17016  put 'else ';
17017  put 'if upcase(NAME) = "GENRE_SPECIAL_INTEREST" then do;';
17018  put 'ROLE = "REJECTED";';
17019  put 'end;';
17020  put 'else ';
17021  put 'if upcase(NAME) = "GENRE_THRILLMYSSUSP" then do;';
17022  put 'ROLE = "REJECTED";';
17023  put 'end;';
17024  put 'else ';
17025  put 'if upcase(NAME) = "GENRE_WESTERN" then do;';
17026  put 'ROLE = "REJECTED";';
17027  put 'end;';
17028  put 'else ';
17029  put 'if upcase(NAME) = "IMP_DOMESTIC_GROSS" then do;';
17030  put 'ROLE = "REJECTED";';
17031  put 'end;';
17032  put 'else ';
17033  put 'if upcase(NAME) = "IMP_DOMESTIC_OPENING" then do;';
17034  put 'ROLE = "REJECTED";';
17035  put 'end;';
17036  put 'else ';
17037  put 'if upcase(NAME) = "IMP_FOREIGN_GROSS" then do;';
17038  put 'ROLE = "REJECTED";';
17039  put 'end;';
17040  put 'else ';
17041  put 'if upcase(NAME) = "IMP_MARKETS_MISSING" then do;';
17042  put 'ROLE = "REJECTED";';
17043  put 'end;';
17044  put 'else ';
17045  put 'if upcase(NAME) = "IMP_SS_MEAN" then do;';
17046  put 'ROLE = "REJECTED";';
17047  put 'end;';
17048  put 'else ';
17049  put 'if upcase(NAME) = "IMP_SS_MEDIAN" then do;';
17050  put 'ROLE = "REJECTED";';
17051  put 'end;';
17052  put 'else ';
17053  put 'if upcase(NAME) = "IMP_SS_P75" then do;';
17054  put 'ROLE = "REJECTED";';
17055  put 'end;';
17056  put 'else ';
17057  put 'if upcase(NAME) = "IMP_TOTAL_GROSS" then do;';
17058  put 'ROLE = "REJECTED";';
17059  put 'end;';
17060  put 'else ';
17061  put 'if upcase(NAME) = "NC17" then do;';
17062  put 'ROLE = "REJECTED";';
17063  put 'end;';
17064  put 'else ';
17065  put 'if upcase(NAME) = "PG" then do;';
17066  put 'ROLE = "REJECTED";';
17067  put 'end;';
17068  put 'else ';
17069  put 'if upcase(NAME) = "PG_13" then do;';
17070  put 'ROLE = "REJECTED";';
17071  put 'end;';
17072  put 'else ';
17073  put 'if upcase(NAME) = "Q_AUDIENCE_SCORE_POSITIVEFALSE" then do;';
17074  put 'ROLE = "ASSESS";';
17075  put 'end;';
17076  put 'else ';
17077  put 'if upcase(NAME) = "Q_AUDIENCE_SCORE_POSITIVETRUE" then do;';
17078  put 'ROLE = "ASSESS";';
17079  put 'end;';
17080  put 'else ';
17081  put 'if upcase(NAME) = "R" then do;';
17082  put 'ROLE = "REJECTED";';
17083  put 'end;';
17084  put 'else ';
17085  put 'if upcase(NAME) = "TOMATOMETER_COUNT" then do;';
17086  put 'ROLE = "REJECTED";';
17087  put 'end;';
17088  put 'else ';
17089  put 'if upcase(NAME) = "_NODE_" then do;';
17090  put 'ROLE = "SEGMENT";';
17091  put 'LEVEL = "NOMINAL";';
17092  put 'end;';
17093  run;
 
NOTE: The file X is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=17Nov2019:16:33:37,
      Create Time=17Nov2019:16:33:07
 
NOTE: 128 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17094  filename x;
NOTE: Fileref X has been deassigned.
 
17095  filename emflow "D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17096  *------------------------------------------------------------*;
17097  * Tree3: Scoring DATA data;
17098  *------------------------------------------------------------*;
17099  data EMWS1.Tree3_TRAIN
17100  / view=EMWS1.Tree3_TRAIN
17101  ;
17102  set EMWS1.Impt_TRAIN
17103  ;
17104  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17105 +****************************************************************;
17106 +******             DECISION TREE SCORING CODE             ******;
17107 +****************************************************************;
17108 +
17109 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17110 +LENGTH F_audience_score_positive  $    5;
17111 +LENGTH I_audience_score_positive  $    5;
17112 +LENGTH U_audience_score_positive  $    5;
17113 +LENGTH _WARN_  $    4;
17114 +
17115 +******              LABELS FOR NEW VARIABLES              ******;
17116 +label _NODE_ = 'Node' ;
17117 +label _LEAF_ = 'Leaf' ;
17118 +label P_audience_score_positiveTrue =
17119 +'Predicted: audience_score_positive=True' ;
17120 +label P_audience_score_positiveFalse =
17121 +'Predicted: audience_score_positive=False' ;
17122 +label Q_audience_score_positiveTrue =
17123 +'Unadjusted P: audience_score_positive=True' ;
17124 +label Q_audience_score_positiveFalse =
17125 +'Unadjusted P: audience_score_positive=False' ;
17126 +label V_audience_score_positiveTrue =
17127 +'Validated: audience_score_positive=True' ;
17128 +label V_audience_score_positiveFalse =
17129 +'Validated: audience_score_positive=False' ;
17130 +label R_audience_score_positiveTrue =
17131 +'Residual: audience_score_positive=True' ;
17132 +label R_audience_score_positiveFalse =
17133 +'Residual: audience_score_positive=False' ;
17134 +label F_audience_score_positive = 'From: audience_score_positive' ;
17135 +label I_audience_score_positive = 'Into: audience_score_positive' ;
17136 +label U_audience_score_positive =
17137 +'Unnormalized Into: audience_score_positive' ;
17138 +label _WARN_ = 'Warnings' ;
17139 +
17140 +
17141 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17142 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17143 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17144 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17145 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17146 +
17147 +
17148 +_ARBFMT_5 = PUT( audience_score_positive , $5.);
17149 + %DMNORMCP( _ARBFMT_5, F_audience_score_positive );
17150 +
17151 +******             ASSIGN OBSERVATION TO NODE             ******;
17152 +IF  NOT MISSING(IMP_ss_p25 ) AND
17153 +                 0.875 <= IMP_ss_p25  THEN DO;
17154 +  IF  NOT MISSING(IMP_user_rating_count ) AND
17155 +    IMP_user_rating_count  <                  548 THEN DO;
17156 +    _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17157 +     %DMNORMIP( _ARBFMT_12);
17158 +    IF _ARBFMT_12 IN ('1' ) THEN DO;
17159 +      _NODE_  =                   11;
17160 +      _LEAF_  =                   10;
17161 +      P_audience_score_positiveTrue  =      0.6860465116279;
17162 +      P_audience_score_positiveFalse  =     0.31395348837209;
17163 +      Q_audience_score_positiveTrue  =      0.6860465116279;
17164 +      Q_audience_score_positiveFalse  =     0.31395348837209;
17165 +      V_audience_score_positiveTrue  =     0.67816091954022;
17166 +      V_audience_score_positiveFalse  =     0.32183908045977;
17167 +      I_audience_score_positive  = 'TRUE' ;
17168 +      U_audience_score_positive  = 'True' ;
17169 +      END;
17170 +    ELSE DO;
17171 +      _ARBFMT_12 = PUT( genre_Horror , BEST12.);
17172 +       %DMNORMIP( _ARBFMT_12);
17173 +      IF _ARBFMT_12 IN ('1' ) THEN DO;
17174 +        _NODE_  =                   18;
17175 +        _LEAF_  =                    8;
17176 +        P_audience_score_positiveTrue  =     0.23809523809523;
17177 +        P_audience_score_positiveFalse  =     0.76190476190476;
17178 +        Q_audience_score_positiveTrue  =     0.23809523809523;
17179 +        Q_audience_score_positiveFalse  =     0.76190476190476;
17180 +        V_audience_score_positiveTrue  =     0.17241379310344;
17181 +        V_audience_score_positiveFalse  =     0.82758620689655;
17182 +        I_audience_score_positive  = 'FALSE' ;
17183 +        U_audience_score_positive  = 'False' ;
17184 +        END;
17185 +      ELSE DO;
17186 +        _NODE_  =                   19;
17187 +        _LEAF_  =                    9;
17188 +        P_audience_score_positiveTrue  =     0.52727272727272;
17189 +        P_audience_score_positiveFalse  =     0.47272727272727;
17190 +        Q_audience_score_positiveTrue  =     0.52727272727272;
17191 +        Q_audience_score_positiveFalse  =     0.47272727272727;
17192 +        V_audience_score_positiveTrue  =     0.52059925093632;
17193 +        V_audience_score_positiveFalse  =     0.47940074906367;
17194 +        I_audience_score_positive  = 'TRUE' ;
17195 +        U_audience_score_positive  = 'True' ;
17196 +        END;
17197 +      END;
17198 +    END;
17199 +  ELSE DO;
17200 +    _NODE_  =                    7;
17201 +    _LEAF_  =                   11;
17202 +    P_audience_score_positiveTrue  =     0.80507131537242;
17203 +    P_audience_score_positiveFalse  =     0.19492868462757;
17204 +    Q_audience_score_positiveTrue  =     0.80507131537242;
17205 +    Q_audience_score_positiveFalse  =     0.19492868462757;
17206 +    V_audience_score_positiveTrue  =     0.80442176870748;
17207 +    V_audience_score_positiveFalse  =     0.19557823129251;
17208 +    I_audience_score_positive  = 'TRUE' ;
17209 +    U_audience_score_positive  = 'True' ;
17210 +    END;
17211 +  END;
17212 +ELSE DO;
17213 +  _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17214 +   %DMNORMIP( _ARBFMT_12);
17215 +  IF _ARBFMT_12 IN ('1' ) THEN DO;
17216 +    _NODE_  =                    4;
17217 +    _LEAF_  =                    1;
17218 +    P_audience_score_positiveTrue  =     0.63157894736842;
17219 +    P_audience_score_positiveFalse  =     0.36842105263157;
17220 +    Q_audience_score_positiveTrue  =     0.63157894736842;
17221 +    Q_audience_score_positiveFalse  =     0.36842105263157;
17222 +    V_audience_score_positiveTrue  =     0.71428571428571;
17223 +    V_audience_score_positiveFalse  =     0.28571428571428;
17224 +    I_audience_score_positive  = 'TRUE' ;
17225 +    U_audience_score_positive  = 'True' ;
17226 +    END;
17227 +  ELSE DO;
17228 +    IF  NOT MISSING(IMP_runtime ) AND
17229 +               103.9140625 <= IMP_runtime  THEN DO;
17230 +      IF  NOT MISSING(IMP_ss_std ) AND
17231 +        IMP_ss_std  <     0.46179765923036 THEN DO;
17232 +        _ARBFMT_12 = PUT( NR , BEST12.);
17233 +         %DMNORMIP( _ARBFMT_12);
17234 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17235 +          _NODE_  =                   28;
17236 +          _LEAF_  =                    3;
17237 +          P_audience_score_positiveTrue  =     0.25925925925925;
17238 +          P_audience_score_positiveFalse  =     0.74074074074074;
17239 +          Q_audience_score_positiveTrue  =     0.25925925925925;
17240 +          Q_audience_score_positiveFalse  =     0.74074074074074;
17241 +          V_audience_score_positiveTrue  =     0.36842105263157;
17242 +          V_audience_score_positiveFalse  =     0.63157894736842;
17243 +          I_audience_score_positive  = 'FALSE' ;
17244 +          U_audience_score_positive  = 'False' ;
17245 +          END;
17246 +        ELSE DO;
17247 +          _NODE_  =                   29;
17248 +          _LEAF_  =                    4;
17249 +          P_audience_score_positiveTrue  =                 0.75;
17250 +          P_audience_score_positiveFalse  =                 0.25;
17251 +          Q_audience_score_positiveTrue  =                 0.75;
17252 +          Q_audience_score_positiveFalse  =                 0.25;
17253 +          V_audience_score_positiveTrue  =     0.60227272727272;
17254 +          V_audience_score_positiveFalse  =     0.39772727272727;
17255 +          I_audience_score_positive  = 'TRUE' ;
17256 +          U_audience_score_positive  = 'True' ;
17257 +          END;
17258 +        END;
17259 +      ELSE DO;
17260 +        _ARBFMT_12 = PUT( genre_DramaTele , BEST12.);
17261 +         %DMNORMIP( _ARBFMT_12);
17262 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17263 +          IF  NOT MISSING(IMP_ss_count ) AND
17264 +                             286 <= IMP_ss_count  THEN DO;
17265 +            _NODE_  =                   45;
17266 +            _LEAF_  =                    7;
17267 +            P_audience_score_positiveTrue  =                 0.75;
17268 +            P_audience_score_positiveFalse  =                 0.25;
17269 +            Q_audience_score_positiveTrue  =                 0.75;
17270 +            Q_audience_score_positiveFalse  =                 0.25;
17271 +            V_audience_score_positiveTrue  =     0.71428571428571;
17272 +            V_audience_score_positiveFalse  =     0.28571428571428;
17273 +            I_audience_score_positive  = 'TRUE' ;
17274 +            U_audience_score_positive  = 'True' ;
17275 +            END;
17276 +          ELSE DO;
17277 +            _NODE_  =                   44;
17278 +            _LEAF_  =                    6;
17279 +            P_audience_score_positiveTrue  =      0.1551724137931;
17280 +            P_audience_score_positiveFalse  =     0.84482758620689;
17281 +            Q_audience_score_positiveTrue  =      0.1551724137931;
17282 +            Q_audience_score_positiveFalse  =     0.84482758620689;
17283 +            V_audience_score_positiveTrue  =     0.30172413793103;
17284 +            V_audience_score_positiveFalse  =     0.69827586206896;
17285 +            I_audience_score_positive  = 'FALSE' ;
17286 +            U_audience_score_positive  = 'False' ;
17287 +            END;
17288 +          END;
17289 +        ELSE DO;
17290 +          _NODE_  =                   30;
17291 +          _LEAF_  =                    5;
17292 +          P_audience_score_positiveTrue  =     0.39487179487179;
17293 +          P_audience_score_positiveFalse  =      0.6051282051282;
17294 +          Q_audience_score_positiveTrue  =     0.39487179487179;
17295 +          Q_audience_score_positiveFalse  =      0.6051282051282;
17296 +          V_audience_score_positiveTrue  =     0.32710280373831;
17297 +          V_audience_score_positiveFalse  =     0.67289719626168;
17298 +          I_audience_score_positive  = 'FALSE' ;
17299 +          U_audience_score_positive  = 'False' ;
17300 +          END;
17301 +        END;
17302 +      END;
17303 +    ELSE DO;
17304 +      _NODE_  =                    8;
17305 +      _LEAF_  =                    2;
17306 +      P_audience_score_positiveTrue  =     0.18181818181818;
17307 +      P_audience_score_positiveFalse  =     0.81818181818181;
17308 +      Q_audience_score_positiveTrue  =     0.18181818181818;
17309 +      Q_audience_score_positiveFalse  =     0.81818181818181;
17310 +      V_audience_score_positiveTrue  =     0.20443349753694;
17311 +      V_audience_score_positiveFalse  =     0.79556650246305;
17312 +      I_audience_score_positive  = 'FALSE' ;
17313 +      U_audience_score_positive  = 'False' ;
17314 +      END;
17315 +    END;
17316 +  END;
17317 +
17318 +*****  RESIDUALS R_ *************;
17319 +IF  F_audience_score_positive  NE 'TRUE'
17320 +AND F_audience_score_positive  NE 'FALSE'  THEN DO;
17321 +        R_audience_score_positiveTrue  = .;
17322 +        R_audience_score_positiveFalse  = .;
17323 + END;
17324 + ELSE DO;
17325 +       R_audience_score_positiveTrue  =  -P_audience_score_positiveTrue ;
17326 +       R_audience_score_positiveFalse  =  -P_audience_score_positiveFalse ;
17327 +       SELECT( F_audience_score_positive  );
17328 +          WHEN( 'TRUE'  ) R_audience_score_positiveTrue  =
17329 +        R_audience_score_positiveTrue  +1;
17330 +          WHEN( 'FALSE'  ) R_audience_score_positiveFalse  =
17331 +        R_audience_score_positiveFalse  +1;
17332 +       END;
17333 + END;
17334 +
17335 +****************************************************************;
17336 +******          END OF DECISION TREE SCORING CODE         ******;
17337 +****************************************************************;
17338 +
17339 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17340  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.17 seconds
 
 
17341  quit;
17342  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17343  filename emflow "D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas";
17344  *------------------------------------------------------------*;
17345  * Tree3: Scoring VALIDATE data;
17346  *------------------------------------------------------------*;
17347  data EMWS1.Tree3_VALIDATE
17348  / view=EMWS1.Tree3_VALIDATE
17349  ;
17350  set EMWS1.Impt_VALIDATE
17351  ;
17352  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\EMFLOWSCORE.sas.
17353 +****************************************************************;
17354 +******             DECISION TREE SCORING CODE             ******;
17355 +****************************************************************;
17356 +
17357 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17358 +LENGTH F_audience_score_positive  $    5;
17359 +LENGTH I_audience_score_positive  $    5;
17360 +LENGTH U_audience_score_positive  $    5;
17361 +LENGTH _WARN_  $    4;
17362 +
17363 +******              LABELS FOR NEW VARIABLES              ******;
17364 +label _NODE_ = 'Node' ;
17365 +label _LEAF_ = 'Leaf' ;
17366 +label P_audience_score_positiveTrue =
17367 +'Predicted: audience_score_positive=True' ;
17368 +label P_audience_score_positiveFalse =
17369 +'Predicted: audience_score_positive=False' ;
17370 +label Q_audience_score_positiveTrue =
17371 +'Unadjusted P: audience_score_positive=True' ;
17372 +label Q_audience_score_positiveFalse =
17373 +'Unadjusted P: audience_score_positive=False' ;
17374 +label V_audience_score_positiveTrue =
17375 +'Validated: audience_score_positive=True' ;
17376 +label V_audience_score_positiveFalse =
17377 +'Validated: audience_score_positive=False' ;
17378 +label R_audience_score_positiveTrue =
17379 +'Residual: audience_score_positive=True' ;
17380 +label R_audience_score_positiveFalse =
17381 +'Residual: audience_score_positive=False' ;
17382 +label F_audience_score_positive = 'From: audience_score_positive' ;
17383 +label I_audience_score_positive = 'Into: audience_score_positive' ;
17384 +label U_audience_score_positive =
17385 +'Unnormalized Into: audience_score_positive' ;
17386 +label _WARN_ = 'Warnings' ;
17387 +
17388 +
17389 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17390 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17391 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17392 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17393 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17394 +
17395 +
17396 +_ARBFMT_5 = PUT( audience_score_positive , $5.);
17397 + %DMNORMCP( _ARBFMT_5, F_audience_score_positive );
17398 +
17399 +******             ASSIGN OBSERVATION TO NODE             ******;
17400 +IF  NOT MISSING(IMP_ss_p25 ) AND
17401 +                 0.875 <= IMP_ss_p25  THEN DO;
17402 +  IF  NOT MISSING(IMP_user_rating_count ) AND
17403 +    IMP_user_rating_count  <                  548 THEN DO;
17404 +    _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17405 +     %DMNORMIP( _ARBFMT_12);
17406 +    IF _ARBFMT_12 IN ('1' ) THEN DO;
17407 +      _NODE_  =                   11;
17408 +      _LEAF_  =                   10;
17409 +      P_audience_score_positiveTrue  =      0.6860465116279;
17410 +      P_audience_score_positiveFalse  =     0.31395348837209;
17411 +      Q_audience_score_positiveTrue  =      0.6860465116279;
17412 +      Q_audience_score_positiveFalse  =     0.31395348837209;
17413 +      V_audience_score_positiveTrue  =     0.67816091954022;
17414 +      V_audience_score_positiveFalse  =     0.32183908045977;
17415 +      I_audience_score_positive  = 'TRUE' ;
17416 +      U_audience_score_positive  = 'True' ;
17417 +      END;
17418 +    ELSE DO;
17419 +      _ARBFMT_12 = PUT( genre_Horror , BEST12.);
17420 +       %DMNORMIP( _ARBFMT_12);
17421 +      IF _ARBFMT_12 IN ('1' ) THEN DO;
17422 +        _NODE_  =                   18;
17423 +        _LEAF_  =                    8;
17424 +        P_audience_score_positiveTrue  =     0.23809523809523;
17425 +        P_audience_score_positiveFalse  =     0.76190476190476;
17426 +        Q_audience_score_positiveTrue  =     0.23809523809523;
17427 +        Q_audience_score_positiveFalse  =     0.76190476190476;
17428 +        V_audience_score_positiveTrue  =     0.17241379310344;
17429 +        V_audience_score_positiveFalse  =     0.82758620689655;
17430 +        I_audience_score_positive  = 'FALSE' ;
17431 +        U_audience_score_positive  = 'False' ;
17432 +        END;
17433 +      ELSE DO;
17434 +        _NODE_  =                   19;
17435 +        _LEAF_  =                    9;
17436 +        P_audience_score_positiveTrue  =     0.52727272727272;
17437 +        P_audience_score_positiveFalse  =     0.47272727272727;
17438 +        Q_audience_score_positiveTrue  =     0.52727272727272;
17439 +        Q_audience_score_positiveFalse  =     0.47272727272727;
17440 +        V_audience_score_positiveTrue  =     0.52059925093632;
17441 +        V_audience_score_positiveFalse  =     0.47940074906367;
17442 +        I_audience_score_positive  = 'TRUE' ;
17443 +        U_audience_score_positive  = 'True' ;
17444 +        END;
17445 +      END;
17446 +    END;
17447 +  ELSE DO;
17448 +    _NODE_  =                    7;
17449 +    _LEAF_  =                   11;
17450 +    P_audience_score_positiveTrue  =     0.80507131537242;
17451 +    P_audience_score_positiveFalse  =     0.19492868462757;
17452 +    Q_audience_score_positiveTrue  =     0.80507131537242;
17453 +    Q_audience_score_positiveFalse  =     0.19492868462757;
17454 +    V_audience_score_positiveTrue  =     0.80442176870748;
17455 +    V_audience_score_positiveFalse  =     0.19557823129251;
17456 +    I_audience_score_positive  = 'TRUE' ;
17457 +    U_audience_score_positive  = 'True' ;
17458 +    END;
17459 +  END;
17460 +ELSE DO;
17461 +  _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17462 +   %DMNORMIP( _ARBFMT_12);
17463 +  IF _ARBFMT_12 IN ('1' ) THEN DO;
17464 +    _NODE_  =                    4;
17465 +    _LEAF_  =                    1;
17466 +    P_audience_score_positiveTrue  =     0.63157894736842;
17467 +    P_audience_score_positiveFalse  =     0.36842105263157;
17468 +    Q_audience_score_positiveTrue  =     0.63157894736842;
17469 +    Q_audience_score_positiveFalse  =     0.36842105263157;
17470 +    V_audience_score_positiveTrue  =     0.71428571428571;
17471 +    V_audience_score_positiveFalse  =     0.28571428571428;
17472 +    I_audience_score_positive  = 'TRUE' ;
17473 +    U_audience_score_positive  = 'True' ;
17474 +    END;
17475 +  ELSE DO;
17476 +    IF  NOT MISSING(IMP_runtime ) AND
17477 +               103.9140625 <= IMP_runtime  THEN DO;
17478 +      IF  NOT MISSING(IMP_ss_std ) AND
17479 +        IMP_ss_std  <     0.46179765923036 THEN DO;
17480 +        _ARBFMT_12 = PUT( NR , BEST12.);
17481 +         %DMNORMIP( _ARBFMT_12);
17482 +        IF _ARBFMT_12 IN ('1' ) THEN DO;
17483 +          _NODE_  =                   28;
17484 +          _LEAF_  =                    3;
17485 +          P_audience_score_positiveTrue  =     0.25925925925925;
17486 +          P_audience_score_positiveFalse  =     0.74074074074074;
17487 +          Q_audience_score_positiveTrue  =     0.25925925925925;
17488 +          Q_audience_score_positiveFalse  =     0.74074074074074;
17489 +          V_audience_score_positiveTrue  =     0.36842105263157;
17490 +          V_audience_score_positiveFalse  =     0.63157894736842;
17491 +          I_audience_score_positive  = 'FALSE' ;
17492 +          U_audience_score_positive  = 'False' ;
17493 +          END;
17494 +        ELSE DO;
17495 +          _NODE_  =                   29;
17496 +          _LEAF_  =                    4;
17497 +          P_audience_score_positiveTrue  =                 0.75;
17498 +          P_audience_score_positiveFalse  =                 0.25;
17499 +          Q_audience_score_positiveTrue  =                 0.75;
17500 +          Q_audience_score_positiveFalse  =                 0.25;
17501 +          V_audience_score_positiveTrue  =     0.60227272727272;
17502 +          V_audience_score_positiveFalse  =     0.39772727272727;
17503 +          I_audience_score_positive  = 'TRUE' ;
17504 +          U_audience_score_positive  = 'True' ;
17505 +          END;
17506 +        END;
17507 +      ELSE DO;
17508 +        _ARBFMT_12 = PUT( genre_DramaTele , BEST12.);
17509 +         %DMNORMIP( _ARBFMT_12);
17510 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17511 +          IF  NOT MISSING(IMP_ss_count ) AND
17512 +                             286 <= IMP_ss_count  THEN DO;
17513 +            _NODE_  =                   45;
17514 +            _LEAF_  =                    7;
17515 +            P_audience_score_positiveTrue  =                 0.75;
17516 +            P_audience_score_positiveFalse  =                 0.25;
17517 +            Q_audience_score_positiveTrue  =                 0.75;
17518 +            Q_audience_score_positiveFalse  =                 0.25;
17519 +            V_audience_score_positiveTrue  =     0.71428571428571;
17520 +            V_audience_score_positiveFalse  =     0.28571428571428;
17521 +            I_audience_score_positive  = 'TRUE' ;
17522 +            U_audience_score_positive  = 'True' ;
17523 +            END;
17524 +          ELSE DO;
17525 +            _NODE_  =                   44;
17526 +            _LEAF_  =                    6;
17527 +            P_audience_score_positiveTrue  =      0.1551724137931;
17528 +            P_audience_score_positiveFalse  =     0.84482758620689;
17529 +            Q_audience_score_positiveTrue  =      0.1551724137931;
17530 +            Q_audience_score_positiveFalse  =     0.84482758620689;
17531 +            V_audience_score_positiveTrue  =     0.30172413793103;
17532 +            V_audience_score_positiveFalse  =     0.69827586206896;
17533 +            I_audience_score_positive  = 'FALSE' ;
17534 +            U_audience_score_positive  = 'False' ;
17535 +            END;
17536 +          END;
17537 +        ELSE DO;
17538 +          _NODE_  =                   30;
17539 +          _LEAF_  =                    5;
17540 +          P_audience_score_positiveTrue  =     0.39487179487179;
17541 +          P_audience_score_positiveFalse  =      0.6051282051282;
17542 +          Q_audience_score_positiveTrue  =     0.39487179487179;
17543 +          Q_audience_score_positiveFalse  =      0.6051282051282;
17544 +          V_audience_score_positiveTrue  =     0.32710280373831;
17545 +          V_audience_score_positiveFalse  =     0.67289719626168;
17546 +          I_audience_score_positive  = 'FALSE' ;
17547 +          U_audience_score_positive  = 'False' ;
17548 +          END;
17549 +        END;
17550 +      END;
17551 +    ELSE DO;
17552 +      _NODE_  =                    8;
17553 +      _LEAF_  =                    2;
17554 +      P_audience_score_positiveTrue  =     0.18181818181818;
17555 +      P_audience_score_positiveFalse  =     0.81818181818181;
17556 +      Q_audience_score_positiveTrue  =     0.18181818181818;
17557 +      Q_audience_score_positiveFalse  =     0.81818181818181;
17558 +      V_audience_score_positiveTrue  =     0.20443349753694;
17559 +      V_audience_score_positiveFalse  =     0.79556650246305;
17560 +      I_audience_score_positive  = 'FALSE' ;
17561 +      U_audience_score_positive  = 'False' ;
17562 +      END;
17563 +    END;
17564 +  END;
17565 +
17566 +*****  RESIDUALS R_ *************;
17567 +IF  F_audience_score_positive  NE 'TRUE'
17568 +AND F_audience_score_positive  NE 'FALSE'  THEN DO;
17569 +        R_audience_score_positiveTrue  = .;
17570 +        R_audience_score_positiveFalse  = .;
17571 + END;
17572 + ELSE DO;
17573 +       R_audience_score_positiveTrue  =  -P_audience_score_positiveTrue ;
17574 +       R_audience_score_positiveFalse  =  -P_audience_score_positiveFalse ;
17575 +       SELECT( F_audience_score_positive  );
17576 +          WHEN( 'TRUE'  ) R_audience_score_positiveTrue  =
17577 +        R_audience_score_positiveTrue  +1;
17578 +          WHEN( 'FALSE'  ) R_audience_score_positiveFalse  =
17579 +        R_audience_score_positiveFalse  +1;
17580 +       END;
17581 + END;
17582 +
17583 +****************************************************************;
17584 +******          END OF DECISION TREE SCORING CODE         ******;
17585 +****************************************************************;
17586 +
17587 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17588  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.14 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.17 seconds
 
 
17589  quit;
17590  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.10 seconds
 
17592  proc sort data=WORK.EM_USER_REPORT;
17593  by ID VIEW;
17594  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17595  *------------------------------------------------------------*;
17596  * Tree3: Computing metadata for TRAIN data;
17597  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
18070  data EMWS1.Tree3_EMINFO;
18071  length TARGET KEY $32 DATA $43;
18072  input TARGET KEY DATA $;
18073  cards;
 
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18077  run;
18078  proc sort data = EMWS1.Tree3_EMINFO NOTHREADS;
18079  by TARGET KEY;
18080  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE3_EMINFO.
NOTE: The data set EMWS1.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
 
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                November 17, 2019
Time:                16:33:39
*------------------------------------------------------------*
18104  data EMWS1.Tree3_EMOUTFIT;
18105  set EMWS1.Tree3_EMOUTFIT;
18106  length TargetLabel $200;
18107  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18108  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
18109  proc sort data=EMWS1.Tree3_EMREPORTFIT nothreads;
18110  by TARGET;
18111  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The data set EMWS1.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18112  %let _EMwarndup = 0;
18113  %let _EMtargetdup =;
18114  %let _EMASEtargetdup =;
18115  data _null_;
18116  set EMWS1.Tree3_EMOUTFIT;
18117  if .<_ASE_<0.000001 then do;
18118  call symput('_EMwarndup', '1');
18119  call symput('_EMtargetdup', target);
18120  call symput('_EMASEtargetdup', put(_ASE_, best.));
18121  end;
18122  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18123  %let EMEXCEPTIONSTRING=;
18124  *------------------------------------------------------------*;
18125  * REPORT: Tree3;
18126  *------------------------------------------------------------*;
18127  %let EM_ACTION = REPORT;
18128  %let syscc = 0;
18129  %macro main;
18130
18131    %if %upcase(&EM_ACTION) = CREATE %then %do;
18132      filename temp catalog 'sashelp.emmodl.tree_create.source';
18133      %include temp;
18134      filename temp;
18135
18136      %em_tree_create;
18137    %end;
18138
18139     %else
18140     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18141
18142         filename temp catalog 'sashelp.emmodl.tree_train.source';
18143         %include temp;
18144         filename temp;
18145         %em_tree_train;
18146     %end;
18147
18148    %else
18149    %if %upcase(&EM_ACTION) = SCORE %then %do;
18150      filename temp catalog 'sashelp.emmodl.tree_score.source';
18151      %include temp;
18152      filename temp;
18153
18154      %em_tree_score;
18155
18156    %end;
18157
18158    %else
18159    %if %upcase(&EM_ACTION) = REPORT %then %do;
18160
18161         filename temp catalog 'sashelp.emmodl.tree_report.source';
18162         %include temp;
18163         filename temp;
18164
18165         %em_tree_report;
18166     %end;
18167
18168    %else
18169    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18170
18171         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18172         %include temp;
18173         filename temp;
18174         %EM_TREE_OPENTREEVIEWER;
18175
18176     %end;
18177
18178    %else
18179    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18180
18181         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18182         %include temp;
18183         filename temp;
18184         %EM_TREE_CLOSETREEVIEWER;
18185
18186     %end;
18187
18188
18189     %doendm:
18190  %mend main;
18191
18192  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18194 +%macro em_tree_makePlotDs( multipleTar= );
18196 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18197 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18198 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18199 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18201 +  /* determine if validation statistics will be displayed */
18202 +  %let validflag=N;
18203 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18204 +    /* determine if validation data exists */
18205 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18206 +      %let validflag=Y;
18207 +    %end;
18208 +  %end;
18210 +   /* retrieve name of decmeta even in presence of multiple targets */
18211 +   %let decmeta = ;
18212 +   %if &EM_DEC_DECMETA eq %then %do;
18213 +     data _Target;
18214 +       set &em_data_variableset;
18215 +       where ROLE='TARGET' and USE in('D', 'Y');
18216 +       keep NAME;
18217 +     run;
18218 +     proc sort data=_Target;
18219 +       by NAME;
18220 +     run;
18221 +     proc sort data=EM_TARGETDECINFO;
18222 +       by TARGET;
18223 +     run;
18224 +     data _Target;
18225 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18226 +       by NAME;
18227 +       if _a then do;
18228 +         call symput('decmeta', trim(DECMETA));
18229 +       end;
18230 +     run;
18231 +     proc delete data=_Target;run;
18232 +   %end;
18233 +   %else %let decmeta = &EM_DEC_DECMETA;
18236 +  /* retrieve targetEvent from decmeta */
18237 +  %let targetEvent=;
18238 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18239 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18240 +      data _null_;
18241 +       set &DECMETA(where=(_TYPE_="TARGET"));
18242 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18243 +      run;
18244 +    %end;
18245 +  %end;
18247 +  /* retrieve predicted var for targetEvent from decmeta */
18248 +  %let predTarget=;
18249 +  %let predLvl=;
18250 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18251 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18252 +      data _null_;
18253 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18254 +       call symput('predTarget', strip(VARIABLE));
18255 +       call symput('predLvl', strip(LEVEL));
18256 +      run;
18257 +    %end;
18258 +  %end;
18259 +  %else %do;
18260 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18261 +      data _null_;
18262 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18263 +       call symput('predTarget', strip(VARIABLE));
18264 +      run;
18265 +    %end;
18266 +  %end;
18268 +  /* create BelowText value */
18269 +  data belowtext;
18270 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18271 +    keep node belowtext;
18272 +  run;
18274 +  /* relace belowtext with variable label if it exists */
18275 +  data belowtext2;
18276 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18277 +    keep node belowtextlbl;
18278 +  run;
18280 +  proc sort data=belowtext; by node; run;
18281 +  proc sort data=belowtext2; by node; run;
18283 +  data belowtext;
18284 +    merge belowtext belowtext2(in=_a);
18285 +    by node;
18286 +    if _a then belowtext=belowtextlbl;
18287 +    keep node belowtext;
18288 +  run;
18290 +  /* create AboveText value */
18291 +  data abovetext;
18292 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18293 +  run;
18294 +  proc sort data=abovetext; by node numeric_value; run;
18296 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18297 +  data abovetext;
18298 +    set abovetext(rename=(node=parent));
18299 +    by parent numeric_value;
18300 +    retain abovetext tempstring flag branch origval origchar ;
18301 +    length abovetext $256;
18302 +    length tempstring origchar $64;
18304 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18305 +      if first.parent then do;
18306 +        if missing(character_value) then do;
18307 +          numeric_value = round(numeric_value, &sp_precision);
18308 +          abovetext = "< "||strip(NUMERIC_VALUE);
18309 +          branch = 1;
18310 +          origval = numeric_value;
18311 +          output;
18312 +        end;
18313 +        else do;
18314 +          abovetext = "< "||strip(CHARACTER_VALUE);
18315 +          branch = 1;
18316 +          origchar = character_value;
18317 +          output;
18318 +        end;
18320 +        if first.parent AND last.parent then do;
18321 +          if missing(character_value) then do;
18322 +            numeric_value = round(numeric_value, &sp_precision);
18323 +            branch = branch + 1;
18324 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18325 +            output;
18326 +          end;
18327 +          else do;
18328 +            branch = branch + 1;
18329 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18330 +            output;
18331 +          end;
18332 +        end;
18333 +      end;
18334 +      else if last.parent then do;
18335 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18336 +          if missing(character_value) then do;
18337 +            numeric_value = round(numeric_value, &sp_precision);
18338 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18339 +          end;
18340 +          else do;
18341 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18342 +          end;
18343 +          branch = branch + 1;
18344 +          output;
18346 +          if missing(character_value) then do;
18347 +            numeric_value = round(numeric_value, &sp_precision);
18348 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18349 +          end;
18350 +          else do;
18351 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18352 +          end;
18353 +          branch = branch + 1;
18354 +          output;
18355 +        end;
18356 +        else do;
18357 +          if missing(character_value) then do;
18358 +            numeric_value = round(numeric_value, &sp_precision);
18359 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18360 +          end;
18361 +          else do;
18362 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18363 +          end;
18364 +          branch = branch + 1;
18365 +          output;
18366 +        end;
18367 +      end;
18368 +      else do;
18369 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18370 +          if missing(character_value) then do;
18371 +            numeric_value = round(numeric_value,&sp_precision);
18372 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18373 +            origval = numeric_value;
18374 +          end;
18375 +          else do;
18376 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18377 +            origchar = character_value;
18378 +          end;
18379 +          branch = branch + 1;
18380 +          output;
18382 +        end;
18383 +        else do;
18384 +          if missing(character_value) then do;
18385 +            numeric_value = round(numeric_value, &sp_precision);
18386 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18387 +            origval = numeric_value;
18388 +          end;
18389 +          else do;
18390 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18391 +            origval = character_value;
18392 +          end;
18393 +          branch = branch + 1;
18394 +          output;
18395 +        end;
18396 +      end;
18397 +    end;
18398 +    else do;
18399 +       if first.numeric_value then do;
18400 +         flag = 0;
18401 +         abovetext = strip(CHARACTER_VALUE);
18402 +         branch = numeric_value;
18403 +         if first.numeric_value AND last.numeric_value then do;
18404 +           output;
18405 +         end;
18406 +       end;
18407 +       else if last.numeric_value then do;
18408 +         if flag=0 then do;
18409 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18410 +           length = length(strip(tempstring));
18411 +           if length < 32 then do;
18412 +             abovetext = strip(tempstring);
18413 +           end;
18414 +           else do;
18415 +             abovetext = strip(abovetext)||", ...";
18416 +             flag = 1;
18417 +           end;
18418 +         end;
18419 +         branch = numeric_value;
18420 +         output;
18421 +       end;
18422 +       else do;
18423 +         if flag=0 then do;
18424 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18425 +           length = length(strip(tempstring));
18426 +           if length < 32 then do;
18427 +             abovetext = strip(tempstring);
18428 +           end;
18429 +           else do;
18430 +             abovetext = strip(abovetext)||", ...";
18431 +             flag=1;
18432 +           end;
18433 +         end;
18434 +         branch = numeric_value;
18435 +       end;
18436 +    end;
18437 +    keep parent branch abovetext;
18438 +  run;
18440 +  /* MIssing value to abovetext */
18441 +  data tempmissing;
18442 +    set &EM_USER_OUTRULES;
18443 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18444 +    rename node=parent numeric_value=branch character_value=misschar;
18445 +  run;
18448 +  proc sort data=abovetext; by parent branch; run;
18449 +  proc sort data=tempmissing; by parent branch; run;
18450 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18452 +  data tempoutnodes;
18453 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18454 +    by parent branch;
18455 +    length traintotal validtotal 8;
18456 +    retain traintotal validtotal;
18458 +    if _a then do;
18459 +      if ^MISSING(abovetext) then do;
18460 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18461 +      end;
18462 +      else do;
18463 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18464 +      end;
18465 +    end;
18466 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18468 +    if node=1 then do;
18469 +      traintotal = N;
18470 +      validtotal=VN;
18471 +    end;
18473 +    drop role rank stat misschar belowtext;
18474 +  run;
18475 +  proc sort data=tempoutnodes; by node; run;
18476 +  proc sort data=belowtext; by node; run;
18478 +  data tempoutnodes;
18479 +    merge tempoutnodes belowtext;
18480 +    by node;
18482 +  run;
18484 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18485 +  %let adjusted = N;
18486 +  %let npriors = 0;
18487 +  data _null_ ;
18488 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18489 +    if eof then do ;
18490 +      call symput("npriors" , strip(put(_N_,best.))) ;
18491 +    end;
18492 +  run;
18493 +  %if &npriors gt 0 %then %let adjusted=Y;
18496 +  /* create a table with targetUsed and targetLevel columns for each node */
18497 +  data temptarmeta;
18498 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18499 +    %if &multipleTar eq N %then %do;
18500 +      AND USE in ('D', 'Y')
18501 +    %end;
18502 +    ));
18503 +    length TARGET $32;
18504 +    Target=name;
18505 +    keep target level;
18506 +  run;
18508 +  %if &multipleTar eq Y %then %do;
18509 +    data temptargetused;
18510 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18511 +      keep node target;
18512 +    run;
18513 +    proc sort data=temptargetused; by target; run;
18514 +    proc sort data=temptarmeta; by target; run;
18515 +    data temptargetused;
18516 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18517 +      by target;
18518 +      if _a and _b;
18519 +    run;
18520 +  %end;
18521 +  %else %do;
18522 +    data temptargetused;
18523 +      set &EM_USER_OUTSTATS;
18524 +      length target $32 tarlevel $10;
18525 +      target="%EM_TARGET";
18526 +      tarlevel="%EM_TARGET_LEVEL";
18527 +      keep node target tarlevel;
18528 +    run;
18529 +    proc sort data=temptargetused nodupkey; by node; run;
18530 +  %end;
18532 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18533 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18534 +  proc sort data=temptargetused; by node; run;
18537 +  /* create tables for all interval targets as well as all class targets */
18538 +  data tempinterval tempclass;
18539 +    merge tempoutstats temptargetused( rename=(target=targetused));
18540 +    by node;
18541 +    %if "&multipleTar" eq "Y" %then %do;
18542 +      if ((missing(Target)) OR (target=targetused ));
18543 +    %end;
18545 +    if tarlevel="INTERVAL" then output tempinterval;
18546 +    else output tempclass;
18547 +  run;
18549 +  /* iniitalize intTarget and classTarget flags */
18550 +  %let em_intNobs =0;
18551 +  %let em_classNobs = 0;
18552 +  %let em_intTarget= N;
18553 +  %let em_classTarget= N;
18555 +  proc sql;
18556 +    reset noprint;
18557 +    select count(*) into :em_intNobs from tempinterval;
18558 +  quit;
18559 +  proc sql;
18560 +    reset noprint;
18561 +    select count(*) into :em_classNobs from tempclass;
18562 +  quit;
18564 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18565 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18567 +  /* retrieve all information for interval targets */
18568 +  %if &em_intTarget eq Y %then %do;
18570 +    /* determine if leaf variable exists */
18571 +    %let dsid=%sysfunc(open(tempinterval,i));
18572 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18573 +    %let rc=%sysfunc(close(&dsid));
18575 +    proc transpose data=tempinterval
18576 +      %if &leafexists %then %do;
18577 +        (drop=leaf)
18578 +      %end;
18579 +      %if &validexist %then %do;
18580 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18581 +      %end;
18582 +      %else %do;
18583 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18584 +      %end;
18585 +      by node;
18586 +      id statname;
18587 +    run;
18588 +    data tempinterval;
18589 +      set tempinterval;
18590 +      if missing(N) then delete;
18591 +    run;
18592 +  %end;
18594 +  /* retrieve all information for class targets */
18595 +  %if &em_classTarget eq Y %then %do;
18596 +    proc sort data=tempclass; by node category; run;
18597 +    %if &validflag eq N %then %do;
18598 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18599 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18600 +    %end;
18601 +    %else %do;
18602 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18603 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18604 +    %end;
18605 +      set tempclass;
18607 +      %if &validflag eq N %then %do;
18608 +        %if "&adjusted" eq "N" %then %do;
18609 +          if statname="N" then output tempn;
18610 +        %end;
18611 +        %else %do;
18612 +          if statname="NPRIORS" then output tempn;
18613 +        %end;
18614 +        else if statname="PREDICTION" then output temppredict;
18615 +        else if statname="PROBABILITY" then output tempprob;
18616 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18617 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18618 +      %end;
18619 +      %else %do;
18620 +        %if "&adjusted" eq "N" %then %do;
18621 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18622 +        %end;
18623 +        %else %do;
18624 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18625 +        %end;
18626 +        else if statname="PREDICTION" then output temppredict;
18627 +        else if statname="PROBABILITY" then output tempprob;
18628 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18629 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18630 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18631 +      %end;
18632 +    run;
18635 +    /* determine if profit/loss exists in tempprofit */
18636 +    %let em_profitflag=0;
18637 +    %let em_lossflag=0;
18638 +    proc sql;
18639 +      reset noprint;
18640 +      select count(*) into :em_profitflag from tempprofit;
18641 +    quit;
18642 +    proc sql;
18643 +      reset noprint;
18644 +      select count(*) into :em_lossflag from temploss;
18645 +    quit;
18647 +    %if &validFlag eq Y %then %do;
18648 +      proc transpose data=tempn
18649 +        %if "&adjusted" eq "N" %then %do;
18650 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18651 +        %end;
18652 +        %else %do;
18653 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18654 +        %end;
18655 +        by node;
18656 +        id statname;
18657 +      run;
18658 +      %if &em_profitflag ne 0 %then %do;
18659 +        proc transpose data=tempprofit out=tempprofit;
18660 +          by node category;
18661 +          id statname ;
18662 +        run;
18663 +      %end;
18664 +      %if &em_lossflag ne 0 %then %do;
18665 +        proc transpose data=temploss out=temploss;
18666 +          by node category;
18667 +          id statname ;
18668 +        run;
18669 +      %end;
18670 +      data tempprob;
18671 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18672 +        by node
18673 +        %if &multipleTar eq Y %then %do;
18674 +          target
18675 +        %end;
18676 +        category;
18677 +      run;
18678 +    %end;
18680 +    /* store percentcorrect value */
18681 +    data temppredict;
18682 +      merge tempprob temppredict(in=_a);
18683 +      by node category;
18684 +      if _a then do;
18685 +        percentCorrect = statvalue;
18686 +        %if &validFlag eq Y %then %do;
18687 +          vpercentCorrect= vstatvalue;
18688 +        %end;
18689 +      end;
18690 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18691 +      %if &validFlag eq Y %then %do;
18692 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18693 +      %end;
18694 +      ;
18695 +      if missing(percentCorrect) then delete;
18696 +      drop target;
18697 +    run;
18699 +    /* build profittext */
18700 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18701 +      data tempprofittext(keep= node profittext profitloss);
18702 +        length profittext $800 profitloss 8.;
18703 +        retain profittext profitloss;
18705 +        merge tempprob
18706 +        %if &em_profitflag ne 0 %then %do;
18707 +          tempprofit
18708 +        %end;
18709 +        %else %if &em_lossflag ne 0 %then %do;
18710 +          temploss
18711 +        %end;
18712 +        ;
18713 +        by node category;
18715 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18716 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18717 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18718 +          %let profittype = ALL;
18719 +        %end;
18721 +        /* create the profitloss variable for nodecolor if selected */
18722 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18724 +        %if "&profittype" eq "ALL" %then %do;
18725 +          if strip(CATEGORY)="&targetEvent" then do;
18726 +            profitloss=statvalue;
18727 +          end;
18728 +          if first.node then do;
18729 +            %if &validFlag eq N %then %do;
18730 +             %if &em_profitflag ne 0 %then %do;
18731 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18732 +             %end;
18733 +             %if &em_lossflag ne 0 %then %do;
18734 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18735 +             %end;
18736 +            %end;
18737 +            %else %do;
18738 +             %if &em_profitflag ne 0 %then %do;
18739 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18739!+;
18740 +             %end;
18741 +             %if &em_lossflag ne 0 %then %do;
18742 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18743 +             %end;
18744 +            %end;
18745 +          end;
18746 +          else if last.node then do;
18747 +            %if &validFlag eq N %then %do;
18748 +             %if &em_profitflag ne 0 %then %do;
18749 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18750 +             %end;
18751 +             %if &em_lossflag ne 0 %then %do;
18752 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18753 +             %end;
18754 +             /*if CATEGORY="&targetEvent" then do;
18755 +               profitloss=statvalue;
18756 +             end;*/
18757 +            %end;
18758 +            %else %do;
18759 +             %if &em_profitflag ne 0 %then %do;
18760 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18760!+14.&EM_PROPERTY_SPLITPRECISION);
18761 +                if CATEGORY="&targetEvent" then do;
18762 +                 profitloss=ALTERNATIVE_PROFIT;
18763 +                end;
18764 +             %end;
18765 +             %if &em_lossflag ne 0 %then %do;
18766 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18766!+14.&EM_PROPERTY_SPLITPRECISION);
18767 +                if CATEGORY="&targetEvent" then do;
18768 +                  profitloss=ALTERNATIVE_LOSS;
18769 +                end;
18770 +             %end;
18771 +            %end;
18772 +            output;
18773 +          end;
18774 +          else do;
18775 +            %if &validFlag eq N %then %do;
18776 +             %if &em_profitflag ne 0 %then %do;
18777 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18778 +             %end;
18779 +             %if &em_lossflag ne 0 %then %do;
18780 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18781 +             %end;
18782 +            %end;
18783 +            %else %do;
18784 +             %if &em_profitflag ne 0 %then %do;
18785 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18785!+14.&EM_PROPERTY_SPLITPRECISION);
18786 +             %end;
18787 +             %if &em_lossflag ne 0 %then %do;
18788 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18788!+14.&EM_PROPERTY_SPLITPRECISION);
18789 +             %end;
18790 +            %end;
18791 +          end;
18792 +        %end;
18793 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18794 +          if strip(CATEGORY) = "&targetevent" then do;
18795 +            %if &validFlag eq N %then %do;
18796 +             %if &em_profitflag ne 0 %then %do;
18797 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18798 +             %end;
18799 +             %if &em_lossflag ne 0 %then %do;
18800 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18801 +             %end;
18802 +             profitloss=statvalue;
18803 +            %end;
18804 +            %else %do;
18805 +             %if &em_profitflag ne 0 %then %do;
18806 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18806!+;
18807 +                profitloss=ALTERNATIVE_PROFIT;
18808 +             %end;
18809 +             %if &em_lossflag ne 0 %then %do;
18810 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18811 +                profitloss=ALTERNATIVE_LOSS;
18812 +             %end;
18813 +            %end;
18814 +            output;
18815 +          end;
18816 +        %end;
18817 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18818 +          if strip(CATEGORY) = "&targetevent" then do;
18819 +            %if &validFlag eq N %then %do;
18820 +             profitloss=statvalue;
18821 +            %end;
18822 +            %else %do;
18823 +             %if &em_profitflag ne 0 %then %do;
18824 +                profitloss=ALTERNATIVE_PROFIT;
18825 +             %end;
18826 +             %if &em_lossflag ne 0 %then %do;
18827 +                profitloss=ALTERNATIVE_LOSS;
18828 +             %end;
18829 +            %end;
18830 +            output;
18831 +          end;
18832 +        %end;
18833 +      run;
18834 +    %end;
18836 +    data tempprob(keep= node probtext);
18837 +      length probtext $800;
18838 +      retain probtext;
18839 +      set tempprob ;
18840 +      by node;
18842 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18843 +      %let probtype = &EM_PROPERTY_TARGET;
18844 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18845 +        %let probtype = ALL;
18846 +      %end;
18848 +      %if "&probtype" eq "ALL" %then %do;
18849 +        if first.node then do;
18850 +          %if &validFlag eq N %then %do;
18851 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18852 +          %end;
18853 +          %else %do;
18854 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18855 +          %end;
18856 +        end;
18857 +        else if last.node then do;
18858 +          %if &validFlag eq N %then %do;
18859 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18860 +          %end;
18861 +          %else %do;
18862 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18863 +          %end;
18864 +          output;
18865 +        end;
18866 +        else do;
18867 +          %if &validFlag eq N %then %do;
18868 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18869 +          %end;
18870 +          %else %do;
18871 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18872 +          %end;
18873 +        end;
18874 +      %end;
18875 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18876 +        if strip(CATEGORY) = "&targetevent" then do;
18877 +          %if &validFlag eq N %then %do;
18878 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18879 +          %end;
18880 +          %else %do;
18881 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18882 +          %end;
18883 +          output;
18884 +        end;
18885 +      %end;
18886 +      %else %if "&probtype" eq "NONE" %then %do;
18887 +        if last.node then do;
18888 +          output;
18889 +        end;
18890 +      %end;
18891 +    run;
18892 +  %end;
18894 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18896 +  %let oldexists=0;
18897 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18898 +     data old_tree_plot;
18899 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18900 +        rename nodecolor=oldnodecolor;
18901 +     run;
18903 +     proc sort data=old_tree_plot;
18904 +        by node;
18905 +     run;
18907 +     %let oldexists=1;
18908 +  %end;
18910 +  data &EM_USER_TREE_PLOT;
18911 +    length textall $800;
18912 +    merge tempoutnodes temptargetused
18914 +    %if &em_intTarget eq Y %then %do;
18915 +      tempinterval
18916 +    %end;
18918 +    %if &em_classTarget eq Y %then %do;
18920 +      %if &validFlag eq N %then %do;
18921 +        tempn(rename=(statvalue=N))
18922 +      %end;
18923 +      %else %do;
18924 +        tempn
18925 +      %end;
18927 +      temppredict tempprob
18929 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18930 +        tempprofittext
18931 +      %end;
18932 +    %end;
18933 +    ;
18934 +    by node;
18936 +    /* build nodetext based on user selection */
18937 +    textall="";
18939 +    %if &em_intTarget eq Y %then %do;
18940 +    if tarlevel="INTERVAL" then do;
18941 +      /* Nodeid */
18942 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18943 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18944 +      %end;
18946 +      /* Target identifier if multiple targets are used */
18947 +      %if "&multipleTar" eq "Y" %then %do;
18948 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18949 +      %end;
18951 +      %if &validFlag eq Y %then %do;
18952 +         /* Column labels displayed in validflag eq Y only */
18953 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18954 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18954!+noquote ))";
18955 +         %end;
18957 +         /* Average values */
18958 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18959 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18960 +         %end;
18962 +         /* RASE */
18963 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18964 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18965 +         %end;
18967 +         /* Count */
18968 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18969 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18970 +         %end;
18971 +      %end;
18972 +      %else %do;
18973 +         /* Average values */
18974 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18975 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18976 +         %end;
18978 +         /* RASE */
18979 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18980 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18981 +         %end;
18983 +         /* Count */
18984 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18985 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18986 +         %end;
18987 +      %end;
18989 +      /* nodecolor */
18990 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18991 +        nodecolor=PREDICTION;
18992 +      %end;
18993 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18994 +        nodecolor=RASE;
18995 +      %end;
18996 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18997 +        nodecolor=1;
18998 +      %end;
19000 +    end;
19001 +    %end;
19002 +    %if &em_classTarget eq Y %then %do;
19003 +    if tarlevel^="INTERVAL" then  do;
19005 +      /* Nodeid */
19006 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19007 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19008 +      %end;
19009 +      /* Target identifier if multiple targets are used */
19010 +      %if "&multipleTar" eq "Y" %then %do;
19011 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19012 +      %end;
19014 +      /* Predicted values */
19015 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19016 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19017 +      %end;
19019 +      /* Column labels displayed in validflag eq Y only */
19020 +      %if "&ValidFlag" eq "Y" %then %do;
19021 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19022 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19022!+noquote ))";
19023 +        %end;
19024 +      %end;
19026 +      /* Target Values */
19027 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19028 +        textall=strip(textall)||"0A"x||strip(probtext);
19029 +      %end;
19031 +      /* include profit or loss for all target levels */
19032 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19033 +        textall=strip(textall)||"0A"x||strip(profittext);
19034 +      %end;
19036 +      %if &validFlag eq N %then %do;
19037 +        /* Percent Correct */
19038 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19039 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19040 +        %end;
19042 +         /* Count */
19043 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19044 +          %if "&adjusted" eq "N" %then %do;
19045 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19046 +          %end;
19047 +          %else %do;
19048 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19049 +          %end;
19050 +         %end;
19051 +      %end;
19052 +      %else %do;
19053 +        /* Percent Correct */
19054 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19055 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19056 +        %end;
19058 +         /* Count */
19059 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19060 +          %if "&adjusted" eq "N" %then %do;
19061 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19062 +          %end;
19063 +          %else %do;
19064 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19065 +          %end;
19066 +         %end;
19067 +      %end;
19069 +      /* nodecolor */
19070 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19071 +       %if &multipleTar ne Y %then %do;
19072 +        nodecolor=&predTarget;
19073 +       %end;
19074 +       %else %do;
19075 +         nodecolor=percentcorrect;
19076 +       %end;
19077 +      %end;
19078 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19079 +        nodecolor=percentcorrect;
19080 +      %end;
19081 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19082 +        nodecolor=1;
19083 +      %end;
19084 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19085 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19086 +          nodecolor=percentcorrect;
19087 +        %end;
19088 +        %else %do;
19089 +          nodecolor=profitloss;
19090 +        %end;
19091 +      %end;
19093 +    end;
19094 +    %end;
19095 +    %if &em_intTarget eq Y %then %do;
19096 +     drop  PREDICTION  TARGET TARLEVEL
19097 +     %if &ValidFlag eq Y %then %do;
19098 +         VPREDICTION
19099 +     %end;
19100 +     ;
19101 +    %end;
19102 +    %if &em_classTarget eq Y %then %do;
19103 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19104 +     %if &ValidFlag eq Y %then %do;
19105 +         VSTATVALUE
19106 +     %end;
19107 +     ;
19108 +    %end;
19110 +  run;
19112 +  /* add leaf index information to plotds - based on primary target only*/
19113 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19114 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19115 +      set &EM_USER_OUTSTATS;
19116 +      if ((statname="PROBABILITY"
19117 +      %if &validexist %then %do;
19118 +       or statname="VALID: PROBABILITY"
19119 +      %end;
19120 +      ) AND (CATEGORY="&TARGETEVENT")
19121 +      %if "&multipleTar" eq "Y" %then %do;
19122 +        AND (Target="%EM_TARGET")
19123 +      %end;
19124 +      );
19125 +    run;
19127 +    %if &validexist %then %do;
19128 +      proc sort data=tempprob; by node; run;
19129 +      %let vpredTarget = V%substr(&predTarget, 2);
19130 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19131 +         by node;
19132 +         id statname;
19133 +      run;
19134 +    %end;
19135 +  %end;
19136 +  %else %do;
19137 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19138 +      set &EM_USER_OUTSTATS;
19139 +      if ((statname="PREDICTION"
19140 +      %if &validexist %then %do;
19141 +       or statname="VALID: PREDICTION"
19142 +      %end;
19143 +      )
19144 +      %if "&multipleTar" eq "Y" %then %do;
19145 +        AND (Target="%EM_TARGET")
19146 +      %end;
19147 +      );
19148 +    run;
19149 +    %if &validexist %then %do;
19150 +      proc sort data=tempprob; by node; run;
19151 +      %let vpredTarget = V%substr(&predTarget, 2);
19152 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19153 +         by node;
19154 +         id statname;
19155 +      run;
19156 +    %end;
19157 +  %end;
19159 +  proc sort data=tempprob; by node; run;
19160 +  data tempoutnodes;
19161 +    merge tempoutnodes tempprob;
19162 +    by node;
19163 +  run;
19165 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19166 +  data tempnodes;
19167 +    retain traintotal validtotal;
19168 +    set tempnodes(where=(leaf ne . ));
19169 +    tprob=round(&predTarget, .01);
19170 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19171 +      percevent_train=round(tprob*100, .01);
19172 +    %end;
19173 +    %else %do;
19174 +      percevent_train=tprob;
19175 +    %end;
19177 +    perc_train=round((n/traintotal)*100, 0.01);
19178 +    /* leafwidth already has a *10 multiplier */
19179 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19181 +    %if &validexist %then %do;
19182 +      %let vpredTarget = V%substr(&predTarget,2);
19183 +      vprob=round(&vpredTarget, .01);
19184 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19185 +        percevent_valid=round(vprob*100, .01);
19186 +      %end;
19187 +      %else %do;
19188 +        percevent_valid=vprob;
19189 +      %end;
19190 +      perc_valid=round((vn/validtotal)*100, .01);
19191 +    %end;
19193 +    index=_N_;
19194 +    keep node index tprob perc_train percevent_train
19195 +    %if &validexist %then %do;
19196 +        vprob percevent_valid perc_valid
19197 +    %end;
19198 +    ;
19199 +  run;
19200 +  proc sort data=tempnodes; by node; run;
19201 +  data &EM_USER_TREE_PLOT;
19202 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19203 +    by node;
19204 +    if missing(node) then delete;
19205 +    %if &oldexists %then %do;
19206 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19207 +      drop oldnodecolor;
19208 +    %end;
19209 +    abovetext = compbl(abovetext);
19211 +    /* add variable labels */
19212 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19213 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19214 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19215 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19216 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19217 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19219 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19220 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19221 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19222 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19223 +          %end;
19224 +          %else %do;
19225 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19226 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19227 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19228 +          %end;
19229 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19231 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19232 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19233 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19234 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19235 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19236 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19237 +          %end;
19238 +          %else %do;
19239 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19240 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19241 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19242 +          %end;
19243 +    ;
19244 +  run;
19246 +  /* delete temporary tables */
19247 +  proc datasets lib=work nolist;
19248 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19249 +  run;
19251 +%mend em_tree_makePlotDs;
19255 +%macro em_tree_report;
19257 +   /* report properties */
19258 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19259 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19260 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19261 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19262 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19263 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19264 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19265 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19266 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19267 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19268 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19269 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19270 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19272 +   %let validexist=0;
19273 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19274 +     %let validexist=1;
19275 +   %end;
19277 +   /* determine if multiple targets will be processed */
19278 +   %let em_tree_multipleTargets=N;
19279 +   %let em_tree_numTarget=1;
19280 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19281 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19282 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19283 +         %let em_tree_multipleTargets=N;
19284 +      %end;
19285 +      %else %do;
19286 +        data _null_;
19287 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19288 +          if eof then
19289 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19290 +        run;
19292 +        %if &em_tree_numTarget gt 1 %then %do;
19293 +           %let em_tree_multipleTargets=Y;
19294 +        %end;
19295 +     %end;
19296 +   %end;
19298 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19300 +   /* variable importance */
19301 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19302 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19304 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19305 +     /* and the columns may not be generated                                                                                 */
19306 +     %let em_tree_cvexists=;
19307 +     %let em_tree_surrexists=.;
19308 +     data _null_;
19309 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19310 +       if eof then do ;
19311 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19312 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19313 +       end;
19314 +     run;
19316 +     data &EM_USER_OUTIMPORT;
19317 +         set &EM_USER_OUTIMPORT;
19318 +         /* format columns based on Precison value specified */
19319 +         format importance 15.&EM_PROPERTY_PRECISION
19320 +              %if &validexist %then %do;
19321 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19322 +              %end;
19323 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19324 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19325 +              %end;
19326 +         ;
19327 +     run;
19329 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19330 +     proc print data=&EM_USER_OUTIMPORT
19331 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19332 +          (where=((nrules>0) OR (nsurrogates>0)))
19333 +        %end;
19334 +        %else %do;
19335 +           (where=(nrules>0))
19336 +        %end;
19337 +        label noobs
19338 +        ;
19339 +     run;
19340 +     title10;
19342 +   %end;
19344 +   /* Sequence */
19345 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19346 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19347 +   data _null_ ;
19348 +      set &EM_USER_outseq (obs=2) end=eof ;
19349 +      if eof then do ;
19350 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19351 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19352 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19353 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19354 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19355 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19356 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19357 +      end;
19358 +    run;
19360 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19361 +      data &EM_USER_OUTSEQ;
19362 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19363 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19364 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19365 +           _XMISC_=_VMISC_
19366 +        %end;
19367 +        %if "&em_tree_aprof" ne "."  %then %do;
19368 +           _XAPROF_=_VAPROF_
19369 +           _XPROF_ = _VPROF_
19370 +        %end;
19371 +        %if "&em_tree_aloss" ne "."  %then %do;
19372 +           _XALOSS_=_VALOSS_
19373 +        %end;
19374 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19375 +           _XPASE_ = _VPASE_
19376 +           _XPMISC_ = _VPMISC_
19377 +        %end;
19379 +        ));
19380 +     %end;
19381 +     %else %do;
19382 +        set &EM_USER_OUTSEQ;
19383 +     %end;
19385 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19386 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19387 +            _MISC_   15.&EM_PROPERTY_PRECISION
19388 +         %end;
19389 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19390 +            _PASE_  15.&EM_PROPERTY_PRECISION
19391 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19392 +         %end;
19393 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19394 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19395 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19396 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19397 +            %end;
19398 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19399 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19400 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19401 +            %end;
19402 +         %end;
19403 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19404 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19405 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19406 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19407 +            %end;
19408 +         %end;
19409 +         %if "&em_tree_seq" ne "." %then %do;
19410 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19411 +         %end;
19412 +         %if "&em_tree_vseq" ne "." %then %do;
19413 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19414 +         %end;
19415 +         %if "&em_tree_aprof" ne "." %then %do;
19416 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19417 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19418 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19419 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19420 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19421 +           %end;
19422 +         %end;
19423 +         %else %if "&em_tree_aloss" ne "." %then %do;
19424 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19425 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19426 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19427 +           %end;
19428 +         %end;
19429 +      ;
19430 +    run;
19431 +   %end;
19433 +   /* Observation Based Importance */
19434 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19436 +      /* need to check for 0 obs */
19437 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19438 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19439 +      %let rc=%sysfunc(close(&dsid));
19441 +      %if &onobs %then %do;
19442 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19443 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19445 +         data &EM_USER_OUTOBSIMP;
19446 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19447 +           if _a;
19448 +           by _INPUT1_;
19449 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19450 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19451 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19452 +                   %end;
19453 +                   ;
19454 +         run;
19455 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19456 +      %end;
19457 +   %end;
19459 +  %end;
19461 +  /* create dataset to support tree diagram and icicle plot */
19462 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19463 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19465 +  /* display tree diagram */
19466 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19467 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19469 +  /* display icicle diagram */
19470 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19471 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19473 +  /* Leaf Statistics Plot */
19474 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19476 +  /* print leaf information to output window */
19477 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19479 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19480 +       by descending N;
19481 +     run;
19483 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19484 +     %local vn;
19485 +     data _null_;
19486 +       set t (obs=2) end=eof;
19487 +       if eof then do;
19488 +         call symput("vn", strip(put(vn, best.)));
19489 +       end;
19490 +     run;
19492 +     data t;
19493 +       set t;
19494 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19495 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19496 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19497 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19498 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19499 +       %end;
19500 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19501 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19502 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19503 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19504 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19505 +          %end;
19506 +       %end;
19507 +       ;
19508 +     run;
19510 +     /* determine if rase is found in t */
19511 +    %let dsid=%sysfunc(open(t,i));
19512 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19513 +    %let rc=%sysfunc(close(&dsid));
19515 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19516 +     proc print data=t noobs label;
19517 +       where tprob ne .;
19518 +       var node depth N tprob
19519 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19520 +         %if "&vn" ne "." %then %do;
19521 +           VN
19522 +         %end;
19523 +         vprob
19524 +       %end;
19525 +       %if &raseexists %then %do;
19526 +            RASE
19527 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19528 +              VRASE
19529 +            %end;
19530 +       %end;
19531 +       ;
19532 +     run;
19533 +     title10;
19534 +  %end;
19536 +  /* create plots that are done during training of node */
19537 +  /* display iterative plot, including reference line */
19538 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19539 +   /* %if &nleaves eq  %then %do; */
19540 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19541 +      data _null_;
19542 +        set &EM_USER_OUTTOPOLOGY end=eof;
19543 +        if eof then do;
19544 +          call symput('nleaves', LEAF);
19545 +        end;
19546 +      run;
19547 +   /* %end; */
19549 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19550 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19551 +  %end;
19553 +  /* display leaf statistics */
19554 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19556 +  /* stats by node if multiple targets = Y */
19557 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19558 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19559 +    data &EM_USER_OUTSTATS;
19560 +      set &EM_USER_OUTSTATS;
19562 +     * if STATNAME="TARGET" then delete;
19563 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19564 +      drop leaf;
19565 +    run;
19566 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19568 +  %end;
19569 +  %else %do;
19570 +    /* add outstats and outdescribe to spk but not results */
19571 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19572 +  %end;
19574 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set EMWS1.TREE3_OUTIMPORT.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 38 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 25 observations read from the data set EMWS1.TREE3_OUTSEQ.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 25 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TRUE');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 15 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 15 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 354 observations read from the data set EMWS1.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 147 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 126 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 147 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 42 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 21 observations read from the data set WORK.TEMPN.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 21 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 147 observations read from the data set EMWS1.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 11 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE3_TREE_PLOT has 21 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 21 observations read from the data set EMWS1.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 21 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 21 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141
NOTE: There were 21 observations read from the data set EMWS1.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
19575
19576  *------------------------------------------------------------*;
19577  * End REPORT: Tree3;
19578  *------------------------------------------------------------*;
 
19579  /* Reset EM Options */
19580  options formchar="|----|+|---+=|-/\<>*";
19581  options nocenter ls=256 ps=10000;
19582  goptions reset=all device=GIF NODISPLAY;
 
19583  proc sort data=WORK.EM_USER_REPORT;
19584  by ID VIEW;
19585  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19586  proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
19587  by NAME;
19588  run;
 
NOTE: There were 46 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 46 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
19589  proc sort data=EMWS1.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19590  by NAME;
19591  run;
 
NOTE: There were 46 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 46 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
19592  data WORK.ASSESS_META;
19593  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19594  by NAME;
19595  run;
 
NOTE: There were 46 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 46 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 46 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
19596  data EM_temp_assessMeta;
19597  set EMWS1.Tree3_CMeta_TRAIN;
19598  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19599  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19600  data EM_temp_assessdata;
19601  set EMWS1.Tree3_TRAIN(keep=
19602  F_audience_score_positive
19603  I_audience_score_positive
19604  P_audience_score_positiveFalse
19605  P_audience_score_positiveTrue
19606  Q_audience_score_positiveFalse
19607  Q_audience_score_positiveTrue
19608  R_audience_score_positiveFalse
19609  R_audience_score_positiveTrue
19610  U_audience_score_positive
19611  V_audience_score_positiveFalse
19612  V_audience_score_positiveTrue
19613  _WARN_
19614  audience_score_positive
19615  );
19616  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2438 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.15 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23897   data EM_temp_assessMeta;
23898   set EMWS1.Tree3_CMeta_TRAIN;
23899   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23900   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23901   data EM_temp_assessdata;
23902   set EMWS1.Tree3_VALIDATE(keep=
23903   F_audience_score_positive
23904   I_audience_score_positive
23905   P_audience_score_positiveFalse
23906   P_audience_score_positiveTrue
23907   Q_audience_score_positiveFalse
23908   Q_audience_score_positiveTrue
23909   R_audience_score_positiveFalse
23910   R_audience_score_positiveTrue
23911   U_audience_score_positive
23912   V_audience_score_positiveFalse
23913   V_audience_score_positiveTrue
23914   _WARN_
23915   audience_score_positive
23916   );
23917   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.
NOTE: View EMWS1.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 2440 observations read from the data set EMWS1.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2440 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.14 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28207   %let _cn = %sysfunc(getoption(CENTER));
28208   options nocenter;
28209   proc print data=EMWS1.Tree3_EMREPORTFIT noobs label;
28210   var STAT LABEL TRAIN
28211   VALIDATE
28212   ;
28213   by TARGET TARGETLABEL;
28214   title9 ' ';
28215   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28216   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28217   title10;
28218   options &_cn;
 
28219   proc sort data=EMWS1.Tree3_EMCLASSIFICATION nothreads;
28220   by DATAROLE TARGET TARGETLABEL;
28221   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
28222   %let _cn = %sysfunc(getoption(CENTER));
28223   options nocenter;
28224   proc print data=EMWS1.Tree3_EMCLASSIFICATION noobs label;
28225   var from into pct_row pct_col count percent
28226   ;
28227   by DATAROLE TARGET TARGETLABEL;
28228   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28229   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28230   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28231   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28232   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28233   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28234   where _TYPE_='PREDICTION';
28235   title9 ' ';
28236   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28237   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28238   title9;
28239   title10;
28240   options &_cn;
 
28241   %let _cn = %sysfunc(getoption(CENTER));
28242   options nocenter;
28243   data EMWS1.Tree3_EMEVENTREPORT;
28244   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28244 !  8;
28245   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28245 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28245 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28245 ! FALSEEVENT
28246   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28246 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28246 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28247      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28248   FALSEEVENT=0;
28249   FALSENEVENT=0;
28250   TRUEEVENT=0;
28251   TRUENEVENT=0;
28252   set EMWS1.Tree3_EMEVENTREPORT;
28253   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
28254   proc print data=EMWS1.Tree3_EMEVENTREPORT noobs label;
28255   title9 ' ';
28256   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28257   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28258   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28259   title10;
28260   options &_cn;
 
28261   proc datasets library=EMWS1 nolist;
28262   modify Tree3_EMRANK;
28263   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28264   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28265   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMRANK.DATA.
28266   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28267   %let _cn = %sysfunc(getoption(CENTER));
28268   options nocenter;
28269   proc print data=EMWS1.Tree3_EMRANK label noobs;
28270   var
28271   decile gain lift liftc resp respc N _meanP_;
28272   by
28273   notsorted DATAROLE
28274   notsorted TARGET
28275   notsorted TARGETLABEL
28276   ;
28277   title9 ' ';
28278   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28279   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28280   title10;
28281   options &_cn;
 
28282   proc datasets library=EMWS1 nolist;
28283   modify Tree3_EMSCOREDIST;
28284   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28285   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28286   run;
 
NOTE: MODIFY was successful for EMWS1.TREE3_EMSCOREDIST.DATA.
28287   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
