*------------------------------------------------------------*
* Training Log
Date:                November 17, 2019
Time:                16:33:29
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree3_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree3META;
14718  run;

NOTE: There were 46 observations read from the data set EMWS1.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
      

14719  proc print data=WORK.Tree3META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;

NOTE: There were 8 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

14725  title10;

14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN 
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN 
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN 
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN 
>>>>>>>>>>>>>> TARGET(   USE='Y' 
                         REPORT='N' 
                         NAME='audience_score_positive' 
                         ROLE='TARGET' 
                         LEVEL='BINARY' 
                         ORDER='' 
                         CREATOR='' 
                         FORMATTYPE='CATEGORY' 
                         FAMILY='' 
                         LOWERLIMIT=. 
                         UPPERLIMIT=. 
                         DISTRIBUTION='' 
                         COMMENT='' 
                         PRICE=. 
                         TYPE='C' 
                         LABEL='' 
                         FORMAT='$5.' 
                         INFORMAT='$5.' 
                         INDEX='N' 
                         INDEXTYPE='NONE' 
                         LENGTH=5 
                      )[11273] 
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB 
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB 
14811  data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14812  length ORDER $20;
14813  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14814     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14815  set EMWS1.TREE3_AUDIENCE_SCORE_P_DM( where=(_TYPE_="TARGET"));
14816  NumLevels=2;
14817  select(upcase(ORDER));
14818  when('DESC') ORDER = 'Descending';
14819  when('ASC') ORDER = 'Ascending';
14820  when('FMTDESC') ORDER = 'Formatted Descending';
14821  when('FMTASC') ORDER = 'Formatted Ascending';
14822  otherwise ORDER = 'Descending';
14823  end;
14824  output;
14825  run;

NOTE: There were 1 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

14826  title9 ' ';
14827  proc print data=WORK.Tree3_EVENT noobs label;
14828  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14829  title9 ' ';
14830  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14831  run;

NOTE: There were 1 observations read from the data set WORK.TREE3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14832  title10;

"No decisions defined for target "audience_score_positive"." 
14833  proc print data = EMWS1.Tree3_audience_score_p_DM noobs label;
14834  var _type_ variable label;
14835  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14836  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14837  title9 ' ';
14838  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14839  run;

NOTE: There were 7 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

14840  title10;

14841  %let EMEXCEPTIONSTRING=;
15366  *------------------------------------------------------------*;
15367  * Tree3: Generation of macros and macro variables;
15368  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15369  *------------------------------------------------------------*;

15370  %let EMEXCEPTIONSTRING=;
15371  *------------------------------------------------------------*;
15372  * TRAIN: Tree3;
15373  *------------------------------------------------------------*;
15374  %let EM_ACTION = TRAIN;
15375  %let syscc = 0;
15376  %macro main;
15377  
15378    %if %upcase(&EM_ACTION) = CREATE %then %do;
15379      filename temp catalog 'sashelp.emmodl.tree_create.source';
15380      %include temp;
15381      filename temp;
15382  
15383      %em_tree_create;
15384    %end;
15385  
15386     %else
15387     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15388  
15389         filename temp catalog 'sashelp.emmodl.tree_train.source';
15390         %include temp;
15391         filename temp;
15392         %em_tree_train;
15393     %end;
15394  
15395    %else
15396    %if %upcase(&EM_ACTION) = SCORE %then %do;
15397      filename temp catalog 'sashelp.emmodl.tree_score.source';
15398      %include temp;
15399      filename temp;
15400  
15401      %em_tree_score;
15402  
15403    %end;
15404  
15405    %else
15406    %if %upcase(&EM_ACTION) = REPORT %then %do;
15407  
15408         filename temp catalog 'sashelp.emmodl.tree_report.source';
15409         %include temp;
15410         filename temp;
15411  
15412         %em_tree_report;
15413     %end;
15414  
15415    %else
15416    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15417  
15418         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15419         %include temp;
15420         filename temp;
15421         %EM_TREE_OPENTREEVIEWER;
15422  
15423     %end;
15424  
15425    %else
15426    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15427  
15428         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15429         %include temp;
15430         filename temp;
15431         %EM_TREE_CLOSETREEVIEWER;
15432  
15433     %end;
15434  
15435  
15436     %doendm:
15437  %mend main;
15438  
15439  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15441 +%macro em_tree_train;
15443 +   %if &EM_IMPORT_DATA eq %then %do;
15444 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15445 +       %put &em_codebar;
15446 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15447 +       %put &errormsg;
15448 +       %put &em_codebar;
15449 +       %goto doendm;
15450 +   %end;
15451 +   %else
15452 +       %let EMEXCEPTIONSTRING =;
15454 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15455 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15456 +        %put &em_codebar;
15457 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15458 +        %put &errormsg;
15459 +        %put &em_codebar;
15460 +        %goto doendm;
15461 +   %end;
15463 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15464 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15465 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15466 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15467 +        %put &em_codebar;
15468 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15469 +        %put &errormsg;
15470 +        %put &em_codebar;
15471 +        %goto doendm;
15472 +   %end;
15474 +   /* Initialize property macro variables */
15475 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15476 +   %include temp;
15477 +   filename temp;
15479 +   %EM_SetProperties;
15481 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15482 +   %EM_GETNAME(key=EMTREE, type=DATA);
15483 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15484 +     /* if import eq Y and no importtable defined, throw an exception */
15485 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15486 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15487 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15488 +         %put &em_codebar;
15489 +         %put &errmsg;
15490 +         %put &em_codebar;
15491 +         %goto doendm;
15492 +      %end;
15493 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15494 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15495 +         %put &em_codebar;
15496 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15497 +         %put &errormsg;
15498 +         %put &em_codebar;
15499 +         %goto doendm;
15500 +      %end;
15501 +      %else %do;
15502 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15503 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15504 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15505 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15506 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15507 +         %let dsid = %sysfunc(close(&dsid));
15508 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15509 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15510 +            %put &em_codebar;
15511 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15512 +            %put &errormsg;
15513 +            %put &em_codebar;
15514 +            %goto doendm;
15515 +         %end;
15516 +      %end;
15517 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15518 +         proc delete data=&EM_USER_EMTREE;
15519 +         run;
15520 +      %end;
15521 +   %end;
15522 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15523 +      proc delete data=&EM_USER_EMTREE;
15524 +      run;
15525 +   %end;
15527 +   /* load tree macros */
15528 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15529 +   %include temp;
15530 +   filename temp;
15532 +   /* data sets */
15533 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15534 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15535 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15537 +   /* files */
15538 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15540 +   /* check actual num of target levels */
15541 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15542 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15543 +                              nLevel=_nTargetLevel );
15544 +      %if &_nTargetLevel  > 2 %then %do;
15545 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15546 +        %put &em_codebar;
15547 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15548 +        %put &errormsg;
15549 +        %put &em_codebar;
15550 +        %goto doendm;
15551 +      %end;
15552 +   %end;
15554 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15555 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15556 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15557 +        %let costflag=0;
15558 +        data _null_;
15559 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15560 +          if eof then call symput("costflag", _N_);
15561 +        run;
15562 +        %if &costflag gt 0 %then %do;
15563 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15564 +          %put &em_codebar;
15565 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15566 +          %put &errormsg;
15567 +          %put &em_codebar;
15568 +          %goto doendm;
15569 +       %end;
15570 +     %end;
15571 +   %end;
15573 +   /* determine if multiple targets will be processed */
15574 +   %let em_tree_multipleTargets=N;
15575 +   %let em_tree_numTarget = 1;
15576 +   %let em_tree_targetVars=;
15578 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15579 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15580 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15581 +         %let em_tree_multipleTargets=N;
15582 +      %end;
15583 +      %else %do;
15584 +         /* create macro array of targets  */
15585 +         data _null_;
15586 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15587 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15588 +           if eof then
15589 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15590 +        run;
15592 +        %if &em_tree_numTarget gt 1 %then %do;
15593 +           %let em_tree_multipleTargets=Y;
15594 +        %end;
15595 +      %end;
15596 +   %end;
15598 +   /* create view of only necessary variable for performance reasons */
15599 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15600 +   data &tempData / view=&tempData;
15601 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15602 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15603 +       %EM_TARGET
15604 +     %end;
15605 +     %else %do;
15606 +       %if &em_tree_numTarget ne 0 %then %do;
15607 +         %do i=1 %to &em_tree_numTarget;
15608 +            &&em_tree_targetVars&i
15609 +         %end;
15610 +       %end;
15611 +     %end;
15612 +     );
15613 +   run;
15615 +   /* run Tree procedure */
15616 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15618 +   /* Check return code and throw exception if error is detected */
15619 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15620 +   %if &syserr %then %do;
15621 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15622 +     %goto doendm;
15623 +   %end;
15625 +   /* add decision score code if multiple targets are processed */
15626 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15627 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15628 +   %end;
15630 +   /* create outfit dataset if multiple score statements have been executed */
15631 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15633 +   /* create English Rules */
15634 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15635 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15636 +       %em_tree_makeEnglishRules;
15638 +       /* English Rules */
15639 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15641 +     %end;
15642 +   filename x;
15644 +   %doendm:
15645 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15646 +%macro EM_SetProperties;
15648 +   /* train properties */
15649 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15688 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15689 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15691 +   /* properties for interactive sample */
15692 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15693 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15694 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15695 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15697 +   /* report properties */
15698 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15699 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15700 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15701 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15702 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15703 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15704 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15705 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15706 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15707 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15708 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15709 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15710 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15712 +   /* score properties */
15713 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15714 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15716 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15718 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15719 +  %global &nLevel;
15720 +  proc dmdb batch data=&indata
15721 +    classout=_tmp_dmdbout;
15722 +    class &target;
15723 +  run;
15724 +  data _tmp_dmdbout;
15725 +    set _tmp_dmdbout;
15726 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15727 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15728 +  run;
15729 +  data _null_;
15730 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15731 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15732 +    %let dsid = %sysfunc(close(&dsid));
15733 +     call symput("&nLevel", put(&_obs, Best12.));
15734 +  run;
15736 +  proc datasets lib=work nolist;
15737 +     delete _tmp_dmdbout;
15738 +  run;
15739 +  quit;
15740 +%Mend EM_CheckBinaryTargetLevel;
15743 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15745 +  /* determine the number of obs in training data */
15746 +  proc sql;
15747 +    reset noprint;
15748 +    select count(*) into :em_nobs from &indata;
15749 +  quit;
15751 +  /* determine the number of input variables */
15752 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15753 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15755 +  /* retrieve targetEvent from decmeta */
15756 +  %let targetEvent=;
15757 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15758 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15759 +      data _null_;
15760 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15761 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15762 +      run;
15763 +    %end;
15764 +  %end;
15766 +  /* create targetTable if multipleTar eq Y */
15767 +  data temptarget;
15768 +    set &EM_DATA_VARIABLESET;
15769 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15770 +  run;
15772 + /* data sets */
15773 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15774 + %EM_GETNAME(key=EMTREE,        type=DATA);
15775 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15776 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15777 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15778 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15779 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15780 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15781 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15782 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15784 + /* files */
15785 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15786 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15788 + /* turn on pmml if requested */
15789 + %let nnpmml=0;
15790 + %if %symexist(EM_PMML) %then %do;
15791 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15792 +       %let nnpmml=1;
15794 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15795 +%end;
15797 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15799 + %if &nnpmml or &numClassTarget %then %do;
15801 +       /* create dmdb needed for pmml generation */
15802 +       %let tree_maxlevel = 512;
15803 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15804 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15805 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15806 +         %end;
15807 +       %end;
15808 +       %if &tree_maxlevel gt 0 %then %do;
15809 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15810 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15811 +       %end;
15813 +       %let targetOrderString =;
15814 +       %let targetString = ;
15815 +       data _null_;
15816 +          length orderString nameString $10000;
15817 +          retain orderString nameString;
15818 +          set &em_data_variableset end=eof;
15819 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15820 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15821 +          %end;
15822 +          %else %do;
15823 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15824 +          %end;          select(order);
15825 +            when('')        order ='DESC';
15826 +            when('FMTASC')  order='ASCFMT';
15827 +            when('FMTDESC') order='DESFMT';
15828 +            otherwise;
15829 +          end;
15830 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15831 +          nameString = trim(nameString)!!' '!!trim(NAME);
15833 +          if eof then do;
15834 +             call symput('targetOrderString', trim(orderString));
15835 +             call symput('targetString', trim(nameString));
15836 +          end;
15837 +       run;
15839 +       %let arborkluge= "work._treeDMDB";
15841 +       proc dmdb batch data=&indata
15842 +       %if &nnpmml %then %do;
15843 +           PMML
15844 +       %end;
15845 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15848 +   %if &nnpmml %then %do;
15849 +        %if "%EM_ID" ne "" %then %do;
15850 +          id %EM_ID;
15851 +        %end;
15852 +        %if &EM_NUM_CLASS gt 0 %then %do;
15853 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15854 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15855 +               &targetOrderString;
15856 +        %end;
15857 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15858 +          var %EM_INTERVAL;
15859 +        %end;
15860 +        target &targetString %EM_INTERVAL_TARGET;
15861 +        %if "%EM_FREQ" ne "" %then %do;
15862 +          freq %EM_FREQ;
15863 +        %end;
15864 +  %end;
15865 +  %else %do;
15866 +      class  &targetOrderString;
15867 +      target &targetString %EM_INTERVAL_TARGET;
15868 +  %end;
15869 +       run;
15870 +       quit;
15872 +       proc datasets lib=work nolist;
15873 +          delete classout varout;
15874 +       run;
15875 +       quit;
15877 +    %end;
15878 + %end;
15880 + /* run Arbor procedure */
15881 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15882 +  proc arbor data=&INDATA
15884 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15885 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15886 +  %end;
15888 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15889 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15890 +  %end;
15892 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15893 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15894 +  %end;
15896 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15897 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15898 +  %end;
15900 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15901 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15902 +  %end;
15904 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15905 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15906 +  %end;
15907 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15908 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15909 +  %end;
15910 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15911 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15912 +  %end;
15914 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15915 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15916 +      alpha = &EM_PROPERTY_SIGLEVEL
15917 +    %end;
15918 +  %end;
15920 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15921 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15922 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15923 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15924 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15926 +        padjust =
15927 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15928 +          &chaid
15929 +        %end;
15930 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15931 +          DEPTH
15932 +        %end;
15933 +      %end;
15934 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15935 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15936 +         pvars = &num_inputs
15937 +      %end;
15938 +    %end;
15939 +  %end;
15940 +  %else %do;
15941 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15942 +         padjust = NONE
15943 +      %end;
15944 +  %end;
15946 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15947 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15948 +    Maxrules = &num_nrules
15949 +  %end;
15951 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15952 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15953 +    Maxsurrs = &num_nsurrs
15954 +  %end;
15956 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15957 +     Missing=&EM_PROPERTY_MISSINGVALUE
15958 +  %end;
15960 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15961 +     USEVARONCE
15962 +  %end;
15964 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15965 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15966 +  %end;
15969 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15970 +    event = "&targetEvent"
15971 +  %end;
15973 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15974 +     DECSEARCH
15975 +  %end;
15977 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15978 +     PRIORSSEARCH
15979 +  %end;
15981 +  %if &arbor_1 ne %then %do;
15982 +    &arbor_1
15983 +  %end;
15985 +  %if &em_arbor ne %then %do;
15986 +     &em_arbor
15987 +  %end;
15988 +  ;
15989 + %end;
15990 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15991 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15992 +       interact;
15993 + %end;
15994 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15995 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15996 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15997 +    %put &em_codebar;
15998 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15999 +    %put &errormsg;
16000 +    %put &em_codebar;
16001 +    %goto doendm;
16002 +   %end;
16003 +   %else %do;
16004 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16005 +       interact;
16006 +   %end;
16007 + %end;
16009 + %else %do;
16010 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16011 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16012 +    %put &em_codebar;
16013 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16014 +    %put &errormsg;
16015 +    %put &em_codebar;
16016 +    %goto doendm;
16017 +   %end;
16018 +   %else %do;
16019 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16020 +        interact;
16021 +   %end;
16022 + %end;
16024 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16025 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16026 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16027 +    %end;
16029 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16030 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16031 +    %end;
16033 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16034 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16035 +    %end;
16037 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16038 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16039 +    %end;
16041 +    %if "%EM_FREQ" ne "" %then %do;
16042 +       freq %EM_FREQ;
16043 +    %end;
16045 +    %if "&multipleTar" eq "Y" %then %do;
16046 +       /* cycle through all target vars in variableset */
16047 +       %let tdsid = %sysfunc(open(temptarget));
16048 +       %if &tdsid %then %do;
16049 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16050 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16051 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16052 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16053 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16054 +             target &var / level = &lvl
16055 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16056 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16057 +             %end;
16058 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16059 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16060 +             %end;
16061 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16062 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16063 +             %end;
16064 +          %end;
16065 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16066 +       %end;
16067 +       useTarget variable = %EM_TARGET;
16068 +    %end;
16069 +    %else %do;
16070 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16071 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16072 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16073 +      %end;
16074 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16075 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16076 +      %end;
16077 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16078 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16079 +      %end;
16080 +    %end;
16082 +    %if "&multipleTar" eq "N" %then %do;
16083 +      &EM_DEC_STATEMENT;
16084 +    %end;
16086 +    Performance &EM_PROPERTY_PERFORMANCE
16087 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16088 +      nodesize=&EM_PROPERTY_NODESAMPLE
16089 +    %end;
16090 +    ;
16092 +    %if "&intFlag" eq "Y" %then %do;
16093 +       INTERACT Largest;
16094 +       Train maxnewdepth=0;
16095 +    %end;
16097 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16098 +         Assess
16099 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16100 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16101 +              %put &em_codebar;
16102 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16103 +              %put &errormsg;
16104 +              %put &em_codebar;
16105 +            %end;
16106 +            %else %do;
16107 +               Validata=&EM_IMPORT_VALIDATE
16108 +            %end;
16109 +         %end;
16110 +         %else %do;
16111 +           NoValidata
16112 +         %end;
16113 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16114 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16115 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16116 +               %if &dsid %then %do;
16117 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16118 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16119 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16120 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16121 +                   %else %do;
16122 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16123 +                      %else %let measure= MISC;
16124 +                   %end;
16125 +                 %end;
16126 +               %end;
16127 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16128 +            %end;
16129 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16130 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16131 +                 %let measure=ASE;
16132 +              %end;
16133 +              %else %do;
16134 +                 %let measure=MISC;
16135 +              %end;
16136 +            %end;
16137 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16138 +              %let measure=ASE;
16139 +            %end;
16140 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16141 +               %let measure = LIFT;
16142 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16143 +               %if &dsid %then %do;
16144 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16145 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16146 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16147 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16148 +                 %end;
16149 +               %end;
16150 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16151 +            %end;
16152 +            measure=&measure
16153 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16154 +               event = "&targetEvent"
16155 +            %end;
16156 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16157 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16158 +            %end;
16159 +         %end;
16160 +         %if "&multipleTar" eq "N" %then %do;
16161 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16162 +               CV
16163 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16164 +                 CVNITer = &EM_PROPERTY_CVNITER
16165 +               %end;
16166 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16167 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16168 +               %end;
16169 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16170 +                 CVSeed = &EM_PROPERTY_CVSEED
16171 +               %end;
16172 +            %end;
16173 +         %end;
16174 +       %end;
16175 +      ;
16177 +      %if "&intFlag" ne "Y" %then %do;
16178 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16179 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16180 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16181 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16183 +          SUBTREE &subtree
16184 +          %if "&subtree" eq "NLEAVES" %then %do;
16185 +            =&EM_PROPERTY_NSUBTREE
16186 +          %end;
16187 +          ;
16188 +        %end;
16190 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16191 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16192 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16193 +          %end;
16194 +       %end;
16195 +      %end;
16196 + %end;
16199 + MakeMacro nleaves = nleaves;
16200 + save
16201 + %if "&EM_USER_EMTREE" ne "" %then %do;
16202 +   MODEL=&EM_USER_EMTREE
16203 + %end;
16204 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16205 +   SEQUENCE=&EM_USER_OUTSEQ
16206 + %end;
16207 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16208 +   IMPORTANCE=&EM_USER_OUTIMPORT
16209 + %end;
16210 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16211 +   NODESTAT=&EM_USER_OUTNODES
16212 + %end;
16213 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16214 +   SUMMARY=&EM_USER_OUTSUMMARY
16215 + %end;
16216 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16217 +   STATSBYNODE=&EM_USER_OUTSTATS
16218 + %end;
16219 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16220 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16221 + %end;
16222 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16223 +   Pathlistnonmissing=&EM_USER_OUTPATH
16224 + %end;
16225 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16226 +   RULES = &EM_USER_OUTRULES
16227 + %end;
16228 + ;
16230 + %if "&intFlag" ne "Y" %then %do;
16232 +   %let lookupString = ;
16233 +   %if ^%symexist(EM_OPTION) %then
16234 +      %let EM_OPTION=;
16236 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16237 +      %let lookupString = LOOKUP=SELECT;
16238 +   %end;
16240 +   %let codetext=;
16241 +   %let norescodetxt=;
16243 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16244 +     %let codetext=&codetext DUMMY;
16245 +     %let norescodetxt=&norescodetxt DUMMY;
16246 +   %end;
16247 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16248 +     %let codetext=&codetext NOLEAFID;
16249 +     %let norescodetxt=&norescodetxt NOLEAFID;
16250 +   %end;
16251 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16252 +     %let norescodetxt=&norescodetxt NOPRED;
16253 +   %end;
16255 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16256 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16258 +   %if &nnpmml %then %do;
16259 +     code pmml;
16260 +   %end;
16262 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16263 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16264 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16265 +   %end;
16266 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16267 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16268 +   %end;
16269 + %end;
16271 + run;
16272 + quit;
16274 + /*%em_checkerror(); */
16275 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16276 +   /* Delete DMDB catalog */
16277 +   proc datasets lib=work nolist;
16278 +       delete _treeDMDB / mt=cat;
16279 +  run;
16280 +  %end;
16282 + %if &nnpmml %then %do;
16283 +    ods pmml close;
16284 + %end;
16286 +  %doendm:
16288 +%mend em_tree_runTreeProcedure;
16290 +%macro em_tree_createFitStats( multipleTar= );
16293 +  /* create targetTable is multipleTar eq Y */
16294 +  data temptarget;
16295 +    set &EM_DATA_VARIABLESET;
16296 +    where ROLE="TARGET";
16297 +  run;
16299 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16300 +   data &EM_USER_EMOUTFIT;
16301 +     length target $32;
16302 +     merge work.fit_train
16303 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16304 +       work.fit_valid
16305 +     %end;
16306 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16307 +       work.fit_test
16308 +     %end;
16309 +     ;
16310 +     %if "&multipleTar" eq "N" %then %do;
16311 +       target="%EM_TARGET";
16312 +     %end;
16313 +     %else %do;
16314 +       target = _TARGET_;
16315 +     %end;
16316 +     drop _NW_ _SUMW_
16317 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16318 +        _VSUMW_
16319 +     %end;
16320 +     ;
16321 +   run;
16323 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16324 +     proc datasets library=work nolist;
16325 +       delete fit_valid;
16326 +     run;
16327 +   %end;
16328 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16329 +     proc datasets library=work nolist;
16330 +       delete fit_test;
16331 +     run;
16332 +   %end;
16334 +%mend em_tree_createFitStats;
16337 +%macro em_tree_makeEnglishRules;
16339 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16340 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16342 +  /* verify that necessary tables exist and if not, skip processing */
16343 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16344 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16345 +    %goto doendm;
16346 +  %end;
16347 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16348 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16349 +    %goto doendm;
16350 +  %end;
16352 +  /* determine length of variable in outpath dataset */
16353 +  %let vlength= ;
16354 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16355 +  %if &dsid ne %then %do;
16356 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16357 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16358 +  %end;
16359 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16361 +  data tempoutpath;
16362 +    length varname $&vlength;
16363 +    retain varname;
16364 +    set &EM_USER_OUTPATH;
16366 +    if ^missing(variable) then varname=variable;
16367 +    else if ^missing(var_name) then varname=var_name;
16368 +    output;
16369 +  run;
16371 +  /* create an array of generated predicted variable names */
16372 +  %let tree_pred_vars = ;
16373 +  %let tree_pred_label = ;
16374 +  %let numpred= 0;
16375 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16377 +    data _null_;
16378 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16379 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16380 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16381 +     if eof then
16382 +       call symput('numpred', strip(put(_N_, BEST.)));
16383 +    run;
16384 +  %end;
16386 +  /* determine if NPRIORS exists in outnodes  */
16387 +  %local nprior_flag;
16388 +  data _null_;
16389 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16390 +    if eof then do;
16391 +      call symput('nprior_flag', strip(put(npriors, best.)));
16392 +    end;
16393 +  run;
16395 +  proc sort data=tempoutpath; by node; run;
16396 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16398 +  data tempoutpath;
16399 +    merge tempoutpath(in=_a) outnodes(keep= node
16400 +    %if "&nprior_flag" ne "." %then %do;
16401 +      NPRIORS
16402 +    %end;
16403 +    %else %do;
16404 +      N
16405 +    %end;
16406 +    %if &numpred gt 0 %then %do;
16407 +      %do i=1 %to &numpred;
16408 +        &&tree_pred_vars&i
16409 +      %end;
16410 +    %end;
16411 +    );
16412 +    by node;
16413 +    if _a;
16414 +  run;
16416 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16418 +  data _null_;
16419 +    file x;
16420 +    set tempoutpath;
16421 +    by node descending varname;
16422 +    retain origvar oldnode string;
16423 +    length origvar $32 oldnode 8 string $200;
16425 +    if _N_ = 1 then do;
16426 +      origvar = varname;
16427 +      oldnode = node;
16428 +    end;
16430 +    if first.node then do;
16431 +       put "&EM_CODEBAR";
16432 +       put " Node = " node;
16433 +       put "&EM_CODEBAR";
16434 +    end;
16436 +      if first.varname then do;
16437 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16438 +            if MISSING(CHARACTER_VALUE) then do;
16439 +             if NUMERIC_VALUE ne .  then do;
16440 +              if ^first.node then do;
16441 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16442 +              end;
16443 +              else do;
16444 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16445 +              end;
16446 +             end;
16447 +            end;
16448 +            else do;
16449 +              if ^first.node then do;
16450 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16451 +              end;
16452 +              else do;
16453 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16454 +              end;
16455 +             end;
16456 +         end;
16457 +         else if RELATION in ("=") then do;
16458 +            if ^first.node then do;
16459 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16460 +            end;
16461 +            else do;
16462 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16463 +            end;
16464 +         end;
16465 +         else if RELATION in ("ISMISSING") then do;
16466 +            if ^first.node then do;
16467 +              string = " AND "|| strip(varname) || " equals Missing";
16468 +            end;
16469 +            else do;
16470 +              string = "if "|| strip(varname) ||" equals Missing";
16471 +            end;
16472 +         end;
16473 +         else if RELATION in ("ISNOTMISSING") then do;
16474 +            if ^first.node then do;
16475 +              string = " AND "|| strip(varname) || " equals All Values";
16476 +            end;
16477 +            else do;
16478 +              string = "if "|| strip(varname) ||" equals All Values";
16479 +            end;
16480 +         end;
16481 +         if ^missing(varname) then origvar = varname;
16482 +         oldnode=node;
16484 +      end;
16485 +      else do;
16486 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16487 +          if MISSING(CHARACTER_VALUE) then do;
16488 +           if  NUMERIC_VALUE ne .  then do;
16489 +            if ^MISSING(string) then
16490 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16491 +            else
16492 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16493 +           end;
16494 +          end;
16495 +          else do;
16496 +            if ^MISSING(string) then
16497 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16498 +            else
16499 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16500 +          end;
16502 +         end;
16503 +         else if RELATION in ("=") then do;
16504 +           string = strip(string)||", "||strip(character_value);
16505 +         end;
16506 +         else if RELATION in ("ISMISSING") then do;
16508 +         end;
16509 +         if ^missing(varname) then origvar = varname;
16510 +         oldnode=node;
16511 +      end;
16512 +      if last.varname then do;
16513 +         if RELATION in ("ISMISSING") then do;
16514 +           if ^first.varname then do;
16515 +             string = strip(string) || " or MISSING";
16516 +           end;
16517 +         end;
16518 +         put string;
16519 +         if ^missing(varname) then origvar = varname;
16520 +         oldnode=node;
16521 +      end;
16523 +      if last.node then do;
16524 +         put "then ";
16525 +         put " Tree Node Identifier   = " node;
16527 +         %if "&nprior_flag" ne "." %then %do;
16528 +           put " Number of Observations = " NPRIORS;
16529 +         %end;
16530 +         %else %do;
16531 +           put " Number of Observations = " N;
16532 +         %end;
16534 +         %if &numpred gt 0 %then %do;
16535 +           %do i=1 %to &numpred;
16536 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16537 +           %end;
16538 +         %end;
16540 +         put " ";
16541 +         if ^missing(varname) then origvar = varname;
16542 +         oldnode=node;
16543 +      end;
16545 +  run;
16547 +  proc datasets lib=work nolist;
16548 +    delete tempoutpath outnodes;
16549 +  run;
16551 +  %doendm:
16552 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.07 seconds
      
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.17 seconds
      cpu time            0.10 seconds
      


NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: DATA STEP view saved on file EMWS1.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
      

NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
      
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.20 seconds
      cpu time            0.15 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.15 seconds
      
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.26 seconds
      cpu time            0.17 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: Variable _WARN_ is uninitialized.
NOTE: 1381800 kilobytes of physical memory.
NOTE: Will use 2438 out of 2438 training cases.
NOTE: Using memory pool with 332268544 bytes.
NOTE: Will not search for split on variable NC17.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 2349992 bytes of work memory.
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.64 seconds
      cpu time            0.37 seconds
      
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.
NOTE: The subtree sequence contains 25 subtrees. The largest has 49 nodes and 25 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Created macro variable NLEAVES equal to 11.
NOTE: The data set EMWS1.TREE3_OUTIMPORT has 38 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_EMTREE has 1739 observations and 4 variables.
NOTE: The data set EMWS1.TREE3_OUTNODES has 21 observations and 24 variables.
NOTE: The data set EMWS1.TREE3_OUTPATH has 97 observations and 7 variables.
NOTE: The data set EMWS1.TREE3_OUTRULES has 354 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTSEQ has 25 observations and 20 variables.
NOTE: The data set EMWS1.TREE3_OUTSTATS has 147 observations and 5 variables.
NOTE: The data set EMWS1.TREE3_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE3_OUTTOPOLOGY has 21 observations and 5 variables.
NOTE: External file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\TREEFLOW.sas opened.
NOTE: External file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\TREEPUBLISH.sas opened.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.14 seconds
      
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.11 seconds
      
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.


NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE3.VIEW used (Total process time):
      real time           1.54 seconds
      cpu time            0.84 seconds
      
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           1.58 seconds
      cpu time            0.85 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE3_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 97 observations read from the data set EMWS1.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE3_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set EMWS1.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 21 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 97 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=17Nov2019:16:33:35,
      Create Time=17Nov2019:16:33:35

NOTE: 144 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 97 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

NOTE: Fileref X has been deassigned.
16554  
16555  *------------------------------------------------------------*;
16556  * End TRAIN: Tree3;
16557  *------------------------------------------------------------*;

16558  *------------------------------------------------------------*;
16559  * Close any missing semi colons;
16560  *------------------------------------------------------------*;
16561  ;
16562  ;
16563  ;
16564  ;
16565  quit;
16566  *------------------------------------------------------------*;
16567  * Close any unbalanced quotes;
16568  *------------------------------------------------------------*;
16569  /*; *"; *'; */
16570  ;
16571  run;
16572  quit;
16573  /* Reset EM Options */
16574  options formchar="|----|+|---+=|-/\<>*";
16575  options nocenter ls=256 ps=10000;
16576  goptions reset=all device=GIF NODISPLAY;

16577  proc sort data=WORK.EM_USER_REPORT;
16578  by ID VIEW;
16579  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

