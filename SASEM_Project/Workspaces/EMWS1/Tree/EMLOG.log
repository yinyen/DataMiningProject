*------------------------------------------------------------*
User:                yinyen
Date:                November 17, 2019
Time:                18:41:10
Site:                12600285
Platform:            X64_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                November 17, 2019
Time:                18:40:51
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.TreeMETA;
14718  run;
 
NOTE: There were 46 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 8 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
14719  proc print data=WORK.TreeMETA label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 8 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
14773  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14774  length ORDER $20;
14775  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14776     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14777  set EMWS1.TREE_AUDIENCE_SCORE_P_DM( where=(_TYPE_="TARGET"));
14778  NumLevels=2;
14779  select(upcase(ORDER));
14780  when('DESC') ORDER = 'Descending';
14781  when('ASC') ORDER = 'Ascending';
14782  when('FMTDESC') ORDER = 'Formatted Descending';
14783  when('FMTASC') ORDER = 'Formatted Ascending';
14784  otherwise ORDER = 'Descending';
14785  end;
14786  output;
14787  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
14788  title9 ' ';
14789  proc print data=WORK.Tree_EVENT noobs label;
14790  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14791  title9 ' ';
14792  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14793  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14794  title10;
 
"No decisions defined for target "audience_score_positive"."
14795  proc print data = EMWS1.Tree_audience_score_p_DM noobs label;
14796  var _type_ variable label;
14797  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14798  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14799  title9 ' ';
14800  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14801  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14802  title10;
 
14803  %let EMEXCEPTIONSTRING=;
15364  *------------------------------------------------------------*;
15365  * Tree: Generation of macros and macro variables;
15366  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15367  *------------------------------------------------------------*;
 
15368  %let EMEXCEPTIONSTRING=;
15369  *------------------------------------------------------------*;
15370  * TRAIN: Tree;
15371  *------------------------------------------------------------*;
15372  %let EM_ACTION = TRAIN;
15373  %let syscc = 0;
15374  %macro main;
15375
15376    %if %upcase(&EM_ACTION) = CREATE %then %do;
15377      filename temp catalog 'sashelp.emmodl.tree_create.source';
15378      %include temp;
15379      filename temp;
15380
15381      %em_tree_create;
15382    %end;
15383
15384     %else
15385     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15386
15387         filename temp catalog 'sashelp.emmodl.tree_train.source';
15388         %include temp;
15389         filename temp;
15390         %em_tree_train;
15391     %end;
15392
15393    %else
15394    %if %upcase(&EM_ACTION) = SCORE %then %do;
15395      filename temp catalog 'sashelp.emmodl.tree_score.source';
15396      %include temp;
15397      filename temp;
15398
15399      %em_tree_score;
15400
15401    %end;
15402
15403    %else
15404    %if %upcase(&EM_ACTION) = REPORT %then %do;
15405
15406         filename temp catalog 'sashelp.emmodl.tree_report.source';
15407         %include temp;
15408         filename temp;
15409
15410         %em_tree_report;
15411     %end;
15412
15413    %else
15414    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15415
15416         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15417         %include temp;
15418         filename temp;
15419         %EM_TREE_OPENTREEVIEWER;
15420
15421     %end;
15422
15423    %else
15424    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15425
15426         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15427         %include temp;
15428         filename temp;
15429         %EM_TREE_CLOSETREEVIEWER;
15430
15431     %end;
15432
15433
15434     %doendm:
15435  %mend main;
15436
15437  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15439 +%macro em_tree_train;
15441 +   %if &EM_IMPORT_DATA eq %then %do;
15442 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15443 +       %put &em_codebar;
15444 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15445 +       %put &errormsg;
15446 +       %put &em_codebar;
15447 +       %goto doendm;
15448 +   %end;
15449 +   %else
15450 +       %let EMEXCEPTIONSTRING =;
15452 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15453 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15454 +        %put &em_codebar;
15455 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15456 +        %put &errormsg;
15457 +        %put &em_codebar;
15458 +        %goto doendm;
15459 +   %end;
15461 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15462 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15463 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15464 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15465 +        %put &em_codebar;
15466 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15467 +        %put &errormsg;
15468 +        %put &em_codebar;
15469 +        %goto doendm;
15470 +   %end;
15472 +   /* Initialize property macro variables */
15473 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15474 +   %include temp;
15475 +   filename temp;
15477 +   %EM_SetProperties;
15479 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15480 +   %EM_GETNAME(key=EMTREE, type=DATA);
15481 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15482 +     /* if import eq Y and no importtable defined, throw an exception */
15483 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15484 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15485 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15486 +         %put &em_codebar;
15487 +         %put &errmsg;
15488 +         %put &em_codebar;
15489 +         %goto doendm;
15490 +      %end;
15491 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15492 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15493 +         %put &em_codebar;
15494 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15495 +         %put &errormsg;
15496 +         %put &em_codebar;
15497 +         %goto doendm;
15498 +      %end;
15499 +      %else %do;
15500 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15501 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15502 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15503 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15504 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15505 +         %let dsid = %sysfunc(close(&dsid));
15506 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15507 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15508 +            %put &em_codebar;
15509 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15510 +            %put &errormsg;
15511 +            %put &em_codebar;
15512 +            %goto doendm;
15513 +         %end;
15514 +      %end;
15515 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15516 +         proc delete data=&EM_USER_EMTREE;
15517 +         run;
15518 +      %end;
15519 +   %end;
15520 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15521 +      proc delete data=&EM_USER_EMTREE;
15522 +      run;
15523 +   %end;
15525 +   /* load tree macros */
15526 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15527 +   %include temp;
15528 +   filename temp;
15530 +   /* data sets */
15531 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15532 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15533 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15535 +   /* files */
15536 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15538 +   /* check actual num of target levels */
15539 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15540 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15541 +                              nLevel=_nTargetLevel );
15542 +      %if &_nTargetLevel  > 2 %then %do;
15543 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15544 +        %put &em_codebar;
15545 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15546 +        %put &errormsg;
15547 +        %put &em_codebar;
15548 +        %goto doendm;
15549 +      %end;
15550 +   %end;
15552 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15553 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15554 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15555 +        %let costflag=0;
15556 +        data _null_;
15557 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15558 +          if eof then call symput("costflag", _N_);
15559 +        run;
15560 +        %if &costflag gt 0 %then %do;
15561 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15562 +          %put &em_codebar;
15563 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15564 +          %put &errormsg;
15565 +          %put &em_codebar;
15566 +          %goto doendm;
15567 +       %end;
15568 +     %end;
15569 +   %end;
15571 +   /* determine if multiple targets will be processed */
15572 +   %let em_tree_multipleTargets=N;
15573 +   %let em_tree_numTarget = 1;
15574 +   %let em_tree_targetVars=;
15576 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15577 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15578 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15579 +         %let em_tree_multipleTargets=N;
15580 +      %end;
15581 +      %else %do;
15582 +         /* create macro array of targets  */
15583 +         data _null_;
15584 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15585 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15586 +           if eof then
15587 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15588 +        run;
15590 +        %if &em_tree_numTarget gt 1 %then %do;
15591 +           %let em_tree_multipleTargets=Y;
15592 +        %end;
15593 +      %end;
15594 +   %end;
15596 +   /* create view of only necessary variable for performance reasons */
15597 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15598 +   data &tempData / view=&tempData;
15599 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15600 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15601 +       %EM_TARGET
15602 +     %end;
15603 +     %else %do;
15604 +       %if &em_tree_numTarget ne 0 %then %do;
15605 +         %do i=1 %to &em_tree_numTarget;
15606 +            &&em_tree_targetVars&i
15607 +         %end;
15608 +       %end;
15609 +     %end;
15610 +     );
15611 +   run;
15613 +   /* run Tree procedure */
15614 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15616 +   /* Check return code and throw exception if error is detected */
15617 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15618 +   %if &syserr %then %do;
15619 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15620 +     %goto doendm;
15621 +   %end;
15623 +   /* add decision score code if multiple targets are processed */
15624 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15625 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15626 +   %end;
15628 +   /* create outfit dataset if multiple score statements have been executed */
15629 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15631 +   /* create English Rules */
15632 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15633 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15634 +       %em_tree_makeEnglishRules;
15636 +       /* English Rules */
15637 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15639 +     %end;
15640 +   filename x;
15642 +   %doendm:
15643 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15644 +%macro EM_SetProperties;
15646 +   /* train properties */
15647 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15660 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15681 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15682 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15683 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15685 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15686 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15687 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15689 +   /* properties for interactive sample */
15690 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15691 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15692 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15693 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15695 +   /* report properties */
15696 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15697 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15698 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15699 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15700 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15701 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15702 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15703 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15704 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15705 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15706 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15707 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15708 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15710 +   /* score properties */
15711 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15712 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15714 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15716 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15717 +  %global &nLevel;
15718 +  proc dmdb batch data=&indata
15719 +    classout=_tmp_dmdbout;
15720 +    class &target;
15721 +  run;
15722 +  data _tmp_dmdbout;
15723 +    set _tmp_dmdbout;
15724 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15725 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15726 +  run;
15727 +  data _null_;
15728 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15729 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15730 +    %let dsid = %sysfunc(close(&dsid));
15731 +     call symput("&nLevel", put(&_obs, Best12.));
15732 +  run;
15734 +  proc datasets lib=work nolist;
15735 +     delete _tmp_dmdbout;
15736 +  run;
15737 +  quit;
15738 +%Mend EM_CheckBinaryTargetLevel;
15741 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15743 +  /* determine the number of obs in training data */
15744 +  proc sql;
15745 +    reset noprint;
15746 +    select count(*) into :em_nobs from &indata;
15747 +  quit;
15749 +  /* determine the number of input variables */
15750 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15751 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15753 +  /* retrieve targetEvent from decmeta */
15754 +  %let targetEvent=;
15755 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15756 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15757 +      data _null_;
15758 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15759 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15760 +      run;
15761 +    %end;
15762 +  %end;
15764 +  /* create targetTable if multipleTar eq Y */
15765 +  data temptarget;
15766 +    set &EM_DATA_VARIABLESET;
15767 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15768 +  run;
15770 + /* data sets */
15771 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15772 + %EM_GETNAME(key=EMTREE,        type=DATA);
15773 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15774 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15775 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15776 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15777 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15778 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15779 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15780 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15782 + /* files */
15783 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15784 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15786 + /* turn on pmml if requested */
15787 + %let nnpmml=0;
15788 + %if %symexist(EM_PMML) %then %do;
15789 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15790 +       %let nnpmml=1;
15792 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15793 +%end;
15795 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15797 + %if &nnpmml or &numClassTarget %then %do;
15799 +       /* create dmdb needed for pmml generation */
15800 +       %let tree_maxlevel = 512;
15801 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15802 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15803 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15804 +         %end;
15805 +       %end;
15806 +       %if &tree_maxlevel gt 0 %then %do;
15807 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15808 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15809 +       %end;
15811 +       %let targetOrderString =;
15812 +       %let targetString = ;
15813 +       data _null_;
15814 +          length orderString nameString $10000;
15815 +          retain orderString nameString;
15816 +          set &em_data_variableset end=eof;
15817 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15818 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15819 +          %end;
15820 +          %else %do;
15821 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15822 +          %end;          select(order);
15823 +            when('')        order ='DESC';
15824 +            when('FMTASC')  order='ASCFMT';
15825 +            when('FMTDESC') order='DESFMT';
15826 +            otherwise;
15827 +          end;
15828 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15829 +          nameString = trim(nameString)!!' '!!trim(NAME);
15831 +          if eof then do;
15832 +             call symput('targetOrderString', trim(orderString));
15833 +             call symput('targetString', trim(nameString));
15834 +          end;
15835 +       run;
15837 +       %let arborkluge= "work._treeDMDB";
15839 +       proc dmdb batch data=&indata
15840 +       %if &nnpmml %then %do;
15841 +           PMML
15842 +       %end;
15843 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15846 +   %if &nnpmml %then %do;
15847 +        %if "%EM_ID" ne "" %then %do;
15848 +          id %EM_ID;
15849 +        %end;
15850 +        %if &EM_NUM_CLASS gt 0 %then %do;
15851 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15852 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15853 +               &targetOrderString;
15854 +        %end;
15855 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15856 +          var %EM_INTERVAL;
15857 +        %end;
15858 +        target &targetString %EM_INTERVAL_TARGET;
15859 +        %if "%EM_FREQ" ne "" %then %do;
15860 +          freq %EM_FREQ;
15861 +        %end;
15862 +  %end;
15863 +  %else %do;
15864 +      class  &targetOrderString;
15865 +      target &targetString %EM_INTERVAL_TARGET;
15866 +  %end;
15867 +       run;
15868 +       quit;
15870 +       proc datasets lib=work nolist;
15871 +          delete classout varout;
15872 +       run;
15873 +       quit;
15875 +    %end;
15876 + %end;
15878 + /* run Arbor procedure */
15879 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15880 +  proc arbor data=&INDATA
15882 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15883 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15884 +  %end;
15886 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15887 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15888 +  %end;
15890 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15891 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15892 +  %end;
15894 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15895 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15896 +  %end;
15898 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15899 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15900 +  %end;
15902 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15903 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15904 +  %end;
15905 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15906 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15907 +  %end;
15908 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15909 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15910 +  %end;
15912 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15913 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15914 +      alpha = &EM_PROPERTY_SIGLEVEL
15915 +    %end;
15916 +  %end;
15918 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15919 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15920 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15921 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15922 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15924 +        padjust =
15925 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15926 +          &chaid
15927 +        %end;
15928 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15929 +          DEPTH
15930 +        %end;
15931 +      %end;
15932 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15933 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15934 +         pvars = &num_inputs
15935 +      %end;
15936 +    %end;
15937 +  %end;
15938 +  %else %do;
15939 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15940 +         padjust = NONE
15941 +      %end;
15942 +  %end;
15944 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15945 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15946 +    Maxrules = &num_nrules
15947 +  %end;
15949 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15950 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15951 +    Maxsurrs = &num_nsurrs
15952 +  %end;
15954 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15955 +     Missing=&EM_PROPERTY_MISSINGVALUE
15956 +  %end;
15958 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15959 +     USEVARONCE
15960 +  %end;
15962 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15963 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15964 +  %end;
15967 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15968 +    event = "&targetEvent"
15969 +  %end;
15971 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15972 +     DECSEARCH
15973 +  %end;
15975 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15976 +     PRIORSSEARCH
15977 +  %end;
15979 +  %if &arbor_1 ne %then %do;
15980 +    &arbor_1
15981 +  %end;
15983 +  %if &em_arbor ne %then %do;
15984 +     &em_arbor
15985 +  %end;
15986 +  ;
15987 + %end;
15988 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15989 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15990 +       interact;
15991 + %end;
15992 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15993 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15994 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15995 +    %put &em_codebar;
15996 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15997 +    %put &errormsg;
15998 +    %put &em_codebar;
15999 +    %goto doendm;
16000 +   %end;
16001 +   %else %do;
16002 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
16003 +       interact;
16004 +   %end;
16005 + %end;
16007 + %else %do;
16008 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
16009 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
16010 +    %put &em_codebar;
16011 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
16012 +    %put &errormsg;
16013 +    %put &em_codebar;
16014 +    %goto doendm;
16015 +   %end;
16016 +   %else %do;
16017 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
16018 +        interact;
16019 +   %end;
16020 + %end;
16022 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
16023 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
16024 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
16025 +    %end;
16027 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16028 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16029 +    %end;
16031 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16032 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16033 +    %end;
16035 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16036 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16037 +    %end;
16039 +    %if "%EM_FREQ" ne "" %then %do;
16040 +       freq %EM_FREQ;
16041 +    %end;
16043 +    %if "&multipleTar" eq "Y" %then %do;
16044 +       /* cycle through all target vars in variableset */
16045 +       %let tdsid = %sysfunc(open(temptarget));
16046 +       %if &tdsid %then %do;
16047 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16048 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16049 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16050 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16051 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16052 +             target &var / level = &lvl
16053 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16054 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16055 +             %end;
16056 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16057 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16058 +             %end;
16059 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16060 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16061 +             %end;
16062 +          %end;
16063 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16064 +       %end;
16065 +       useTarget variable = %EM_TARGET;
16066 +    %end;
16067 +    %else %do;
16068 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16069 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16070 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16071 +      %end;
16072 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16073 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16074 +      %end;
16075 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16076 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16077 +      %end;
16078 +    %end;
16080 +    %if "&multipleTar" eq "N" %then %do;
16081 +      &EM_DEC_STATEMENT;
16082 +    %end;
16084 +    Performance &EM_PROPERTY_PERFORMANCE
16085 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16086 +      nodesize=&EM_PROPERTY_NODESAMPLE
16087 +    %end;
16088 +    ;
16090 +    %if "&intFlag" eq "Y" %then %do;
16091 +       INTERACT Largest;
16092 +       Train maxnewdepth=0;
16093 +    %end;
16095 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16096 +         Assess
16097 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16098 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16099 +              %put &em_codebar;
16100 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16101 +              %put &errormsg;
16102 +              %put &em_codebar;
16103 +            %end;
16104 +            %else %do;
16105 +               Validata=&EM_IMPORT_VALIDATE
16106 +            %end;
16107 +         %end;
16108 +         %else %do;
16109 +           NoValidata
16110 +         %end;
16111 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16112 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16113 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16114 +               %if &dsid %then %do;
16115 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16116 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16117 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16118 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16119 +                   %else %do;
16120 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16121 +                      %else %let measure= MISC;
16122 +                   %end;
16123 +                 %end;
16124 +               %end;
16125 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16126 +            %end;
16127 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16128 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16129 +                 %let measure=ASE;
16130 +              %end;
16131 +              %else %do;
16132 +                 %let measure=MISC;
16133 +              %end;
16134 +            %end;
16135 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16136 +              %let measure=ASE;
16137 +            %end;
16138 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16139 +               %let measure = LIFT;
16140 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16141 +               %if &dsid %then %do;
16142 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16143 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16144 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16145 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16146 +                 %end;
16147 +               %end;
16148 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16149 +            %end;
16150 +            measure=&measure
16151 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16152 +               event = "&targetEvent"
16153 +            %end;
16154 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16155 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16156 +            %end;
16157 +         %end;
16158 +         %if "&multipleTar" eq "N" %then %do;
16159 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16160 +               CV
16161 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16162 +                 CVNITer = &EM_PROPERTY_CVNITER
16163 +               %end;
16164 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16165 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16166 +               %end;
16167 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16168 +                 CVSeed = &EM_PROPERTY_CVSEED
16169 +               %end;
16170 +            %end;
16171 +         %end;
16172 +       %end;
16173 +      ;
16175 +      %if "&intFlag" ne "Y" %then %do;
16176 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16177 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16178 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16179 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16181 +          SUBTREE &subtree
16182 +          %if "&subtree" eq "NLEAVES" %then %do;
16183 +            =&EM_PROPERTY_NSUBTREE
16184 +          %end;
16185 +          ;
16186 +        %end;
16188 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16189 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16190 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16191 +          %end;
16192 +       %end;
16193 +      %end;
16194 + %end;
16197 + MakeMacro nleaves = nleaves;
16198 + save
16199 + %if "&EM_USER_EMTREE" ne "" %then %do;
16200 +   MODEL=&EM_USER_EMTREE
16201 + %end;
16202 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16203 +   SEQUENCE=&EM_USER_OUTSEQ
16204 + %end;
16205 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16206 +   IMPORTANCE=&EM_USER_OUTIMPORT
16207 + %end;
16208 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16209 +   NODESTAT=&EM_USER_OUTNODES
16210 + %end;
16211 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16212 +   SUMMARY=&EM_USER_OUTSUMMARY
16213 + %end;
16214 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16215 +   STATSBYNODE=&EM_USER_OUTSTATS
16216 + %end;
16217 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16218 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16219 + %end;
16220 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16221 +   Pathlistnonmissing=&EM_USER_OUTPATH
16222 + %end;
16223 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16224 +   RULES = &EM_USER_OUTRULES
16225 + %end;
16226 + ;
16228 + %if "&intFlag" ne "Y" %then %do;
16230 +   %let lookupString = ;
16231 +   %if ^%symexist(EM_OPTION) %then
16232 +      %let EM_OPTION=;
16234 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16235 +      %let lookupString = LOOKUP=SELECT;
16236 +   %end;
16238 +   %let codetext=;
16239 +   %let norescodetxt=;
16241 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16242 +     %let codetext=&codetext DUMMY;
16243 +     %let norescodetxt=&norescodetxt DUMMY;
16244 +   %end;
16245 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16246 +     %let codetext=&codetext NOLEAFID;
16247 +     %let norescodetxt=&norescodetxt NOLEAFID;
16248 +   %end;
16249 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16250 +     %let norescodetxt=&norescodetxt NOPRED;
16251 +   %end;
16253 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16254 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16256 +   %if &nnpmml %then %do;
16257 +     code pmml;
16258 +   %end;
16260 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16261 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16262 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16263 +   %end;
16264 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16265 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16266 +   %end;
16267 + %end;
16269 + run;
16270 + quit;
16272 + /*%em_checkerror(); */
16273 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16274 +   /* Delete DMDB catalog */
16275 +   proc datasets lib=work nolist;
16276 +       delete _treeDMDB / mt=cat;
16277 +  run;
16278 +  %end;
16280 + %if &nnpmml %then %do;
16281 +    ods pmml close;
16282 + %end;
16284 +  %doendm:
16286 +%mend em_tree_runTreeProcedure;
16288 +%macro em_tree_createFitStats( multipleTar= );
16291 +  /* create targetTable is multipleTar eq Y */
16292 +  data temptarget;
16293 +    set &EM_DATA_VARIABLESET;
16294 +    where ROLE="TARGET";
16295 +  run;
16297 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16298 +   data &EM_USER_EMOUTFIT;
16299 +     length target $32;
16300 +     merge work.fit_train
16301 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16302 +       work.fit_valid
16303 +     %end;
16304 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16305 +       work.fit_test
16306 +     %end;
16307 +     ;
16308 +     %if "&multipleTar" eq "N" %then %do;
16309 +       target="%EM_TARGET";
16310 +     %end;
16311 +     %else %do;
16312 +       target = _TARGET_;
16313 +     %end;
16314 +     drop _NW_ _SUMW_
16315 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16316 +        _VSUMW_
16317 +     %end;
16318 +     ;
16319 +   run;
16321 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16322 +     proc datasets library=work nolist;
16323 +       delete fit_valid;
16324 +     run;
16325 +   %end;
16326 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16327 +     proc datasets library=work nolist;
16328 +       delete fit_test;
16329 +     run;
16330 +   %end;
16332 +%mend em_tree_createFitStats;
16335 +%macro em_tree_makeEnglishRules;
16337 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16338 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16340 +  /* verify that necessary tables exist and if not, skip processing */
16341 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16342 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16343 +    %goto doendm;
16344 +  %end;
16345 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16346 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16347 +    %goto doendm;
16348 +  %end;
16350 +  /* determine length of variable in outpath dataset */
16351 +  %let vlength= ;
16352 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16353 +  %if &dsid ne %then %do;
16354 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16355 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16356 +  %end;
16357 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16359 +  data tempoutpath;
16360 +    length varname $&vlength;
16361 +    retain varname;
16362 +    set &EM_USER_OUTPATH;
16364 +    if ^missing(variable) then varname=variable;
16365 +    else if ^missing(var_name) then varname=var_name;
16366 +    output;
16367 +  run;
16369 +  /* create an array of generated predicted variable names */
16370 +  %let tree_pred_vars = ;
16371 +  %let tree_pred_label = ;
16372 +  %let numpred= 0;
16373 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16375 +    data _null_;
16376 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16377 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16378 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16379 +     if eof then
16380 +       call symput('numpred', strip(put(_N_, BEST.)));
16381 +    run;
16382 +  %end;
16384 +  /* determine if NPRIORS exists in outnodes  */
16385 +  %local nprior_flag;
16386 +  data _null_;
16387 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16388 +    if eof then do;
16389 +      call symput('nprior_flag', strip(put(npriors, best.)));
16390 +    end;
16391 +  run;
16393 +  proc sort data=tempoutpath; by node; run;
16394 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16396 +  data tempoutpath;
16397 +    merge tempoutpath(in=_a) outnodes(keep= node
16398 +    %if "&nprior_flag" ne "." %then %do;
16399 +      NPRIORS
16400 +    %end;
16401 +    %else %do;
16402 +      N
16403 +    %end;
16404 +    %if &numpred gt 0 %then %do;
16405 +      %do i=1 %to &numpred;
16406 +        &&tree_pred_vars&i
16407 +      %end;
16408 +    %end;
16409 +    );
16410 +    by node;
16411 +    if _a;
16412 +  run;
16414 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16416 +  data _null_;
16417 +    file x;
16418 +    set tempoutpath;
16419 +    by node descending varname;
16420 +    retain origvar oldnode string;
16421 +    length origvar $32 oldnode 8 string $200;
16423 +    if _N_ = 1 then do;
16424 +      origvar = varname;
16425 +      oldnode = node;
16426 +    end;
16428 +    if first.node then do;
16429 +       put "&EM_CODEBAR";
16430 +       put " Node = " node;
16431 +       put "&EM_CODEBAR";
16432 +    end;
16434 +      if first.varname then do;
16435 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16436 +            if MISSING(CHARACTER_VALUE) then do;
16437 +             if NUMERIC_VALUE ne .  then do;
16438 +              if ^first.node then do;
16439 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16440 +              end;
16441 +              else do;
16442 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16443 +              end;
16444 +             end;
16445 +            end;
16446 +            else do;
16447 +              if ^first.node then do;
16448 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16449 +              end;
16450 +              else do;
16451 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16452 +              end;
16453 +             end;
16454 +         end;
16455 +         else if RELATION in ("=") then do;
16456 +            if ^first.node then do;
16457 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16458 +            end;
16459 +            else do;
16460 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16461 +            end;
16462 +         end;
16463 +         else if RELATION in ("ISMISSING") then do;
16464 +            if ^first.node then do;
16465 +              string = " AND "|| strip(varname) || " equals Missing";
16466 +            end;
16467 +            else do;
16468 +              string = "if "|| strip(varname) ||" equals Missing";
16469 +            end;
16470 +         end;
16471 +         else if RELATION in ("ISNOTMISSING") then do;
16472 +            if ^first.node then do;
16473 +              string = " AND "|| strip(varname) || " equals All Values";
16474 +            end;
16475 +            else do;
16476 +              string = "if "|| strip(varname) ||" equals All Values";
16477 +            end;
16478 +         end;
16479 +         if ^missing(varname) then origvar = varname;
16480 +         oldnode=node;
16482 +      end;
16483 +      else do;
16484 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16485 +          if MISSING(CHARACTER_VALUE) then do;
16486 +           if  NUMERIC_VALUE ne .  then do;
16487 +            if ^MISSING(string) then
16488 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16489 +            else
16490 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16491 +           end;
16492 +          end;
16493 +          else do;
16494 +            if ^MISSING(string) then
16495 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16496 +            else
16497 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16498 +          end;
16500 +         end;
16501 +         else if RELATION in ("=") then do;
16502 +           string = strip(string)||", "||strip(character_value);
16503 +         end;
16504 +         else if RELATION in ("ISMISSING") then do;
16506 +         end;
16507 +         if ^missing(varname) then origvar = varname;
16508 +         oldnode=node;
16509 +      end;
16510 +      if last.varname then do;
16511 +         if RELATION in ("ISMISSING") then do;
16512 +           if ^first.varname then do;
16513 +             string = strip(string) || " or MISSING";
16514 +           end;
16515 +         end;
16516 +         put string;
16517 +         if ^missing(varname) then origvar = varname;
16518 +         oldnode=node;
16519 +      end;
16521 +      if last.node then do;
16522 +         put "then ";
16523 +         put " Tree Node Identifier   = " node;
16525 +         %if "&nprior_flag" ne "." %then %do;
16526 +           put " Number of Observations = " NPRIORS;
16527 +         %end;
16528 +         %else %do;
16529 +           put " Number of Observations = " N;
16530 +         %end;
16532 +         %if &numpred gt 0 %then %do;
16533 +           %do i=1 %to &numpred;
16534 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16535 +           %end;
16536 +         %end;
16538 +         put " ";
16539 +         if ^missing(varname) then origvar = varname;
16540 +         oldnode=node;
16541 +      end;
16543 +  run;
16545 +  proc datasets lib=work nolist;
16546 +    delete tempoutpath outnodes;
16547 +  run;
16549 +  %doendm:
16550 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.17 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.29 seconds
      cpu time            0.20 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.27 seconds
      cpu time            0.14 seconds
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.42 seconds
      cpu time            0.28 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.46 seconds
      cpu time            0.31 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Records processed = 2438   Memory used = 511K.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.38 seconds
      cpu time            0.26 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.43 seconds
      cpu time            0.29 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: 1383234 kilobytes of physical memory.
NOTE: Will use 2438 out of 2438 training cases.
NOTE: Using memory pool with 331660288 bytes.
NOTE: Will not search for split on variable NC17.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 12 times.
NOTE: Training used 2349992 bytes of work memory.
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.94 seconds
      cpu time            0.70 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.
NOTE: The subtree sequence contains 49 subtrees. The largest has 97 nodes and 49 leaves.
NOTE: Using subtree with 35 nodes and 18 leaves.
NOTE: Using subtree with 35 nodes and 18 leaves.
NOTE: Created macro variable NLEAVES equal to 18.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 38 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 3804 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 35 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 198 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 877 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 49 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 245 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 35 observations and 5 variables.
NOTE: External file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.40 seconds
      cpu time            0.29 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: Variable _WARN_ is uninitialized.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.25 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.
 
 
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           2.23 seconds
      cpu time            1.64 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           2.30 seconds
      cpu time            1.67 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 198 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 198 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 198 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 198 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 35 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 198 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 35 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 198 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 198 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 198 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=17Nov2019:18:40:59,
      Create Time=17Nov2019:11:43:43
 
NOTE: 245 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 76.
NOTE: There were 198 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16552
16553  *------------------------------------------------------------*;
16554  * End TRAIN: Tree;
16555  *------------------------------------------------------------*;
 
16556  *------------------------------------------------------------*;
16557  * Close any missing semi colons;
16558  *------------------------------------------------------------*;
16559  ;
16560  ;
16561  ;
16562  ;
16563  quit;
16564  *------------------------------------------------------------*;
16565  * Close any unbalanced quotes;
16566  *------------------------------------------------------------*;
16567  /*; *"; *'; */
16568  ;
16569  run;
16570  quit;
16571  /* Reset EM Options */
16572  options formchar="|----|+|---+=|-/\<>*";
16573  options nocenter ls=256 ps=10000;
16574  goptions reset=all device=GIF NODISPLAY;
 
16575  proc sort data=WORK.EM_USER_REPORT;
16576  by ID VIEW;
16577  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                November 17, 2019
Time:                18:41:00
*------------------------------------------------------------*
16679  %let EMEXCEPTIONSTRING=;
16680  *------------------------------------------------------------*;
16681  * SCORE: Tree;
16682  *------------------------------------------------------------*;
16683  %let EM_ACTION = SCORE;
16684  %let syscc = 0;
16685  %macro main;
16686
16687    %if %upcase(&EM_ACTION) = CREATE %then %do;
16688      filename temp catalog 'sashelp.emmodl.tree_create.source';
16689      %include temp;
16690      filename temp;
16691
16692      %em_tree_create;
16693    %end;
16694
16695     %else
16696     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16697
16698         filename temp catalog 'sashelp.emmodl.tree_train.source';
16699         %include temp;
16700         filename temp;
16701         %em_tree_train;
16702     %end;
16703
16704    %else
16705    %if %upcase(&EM_ACTION) = SCORE %then %do;
16706      filename temp catalog 'sashelp.emmodl.tree_score.source';
16707      %include temp;
16708      filename temp;
16709
16710      %em_tree_score;
16711
16712    %end;
16713
16714    %else
16715    %if %upcase(&EM_ACTION) = REPORT %then %do;
16716
16717         filename temp catalog 'sashelp.emmodl.tree_report.source';
16718         %include temp;
16719         filename temp;
16720
16721         %em_tree_report;
16722     %end;
16723
16724    %else
16725    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16726
16727         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16728         %include temp;
16729         filename temp;
16730         %EM_TREE_OPENTREEVIEWER;
16731
16732     %end;
16733
16734    %else
16735    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16736
16737         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16738         %include temp;
16739         filename temp;
16740         %EM_TREE_CLOSETREEVIEWER;
16741
16742     %end;
16743
16744
16745     %doendm:
16746  %mend main;
16747
16748  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16750 +%macro em_tree_score;
16752 +   /* determine if multiple targets will be processed */
16753 +   %let em_tree_multipleTargets=N;
16754 +   %let em_tree_numTarget=1;
16755 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16756 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16757 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16758 +         %let em_tree_multipleTargets=N;
16759 +      %end;
16760 +      %else %do;
16761 +         /* create macro array of targets  */
16762 +         data _null_;
16763 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16764 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16765 +           if eof then
16766 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16767 +        run;
16769 +        %if &em_tree_numTarget gt 1 %then %do;
16770 +           %let em_tree_multipleTargets=Y;
16771 +        %end;
16772 +      %end;
16773 +   %end;
16775 +   /* build flow and publish scoring code */
16776 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16777 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16779 +   filename treeflow "&EM_USER_TREEFLOW";
16780 +   filename treepub "&EM_USER_TREEPUBLISH";
16782 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16783 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16785 +   %em_copyfile(infref=treeflow, outfref=flowref);
16786 +   %em_copyfile(infref=treepub, outfref=pubref);
16788 +   filename treeflow;
16789 +   filename treepub;
16791 +   /* if priors are used, add code to generate unadjusted residuals in export */
16792 +   %let useAdjPriors = N;
16793 +   data _null_;
16794 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16795 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16796 +   run;
16797 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16798 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16799 +      %include temp;
16800 +      filename temp;
16802 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16803 +      filename adjref "&EM_USER_adjResidualCode";
16804 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16806 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16808 +      filename adjref;
16809 +   %end;
16811 +   /* LEAF */
16812 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16813 +      data _null_;
16814 +        file flowref mod;
16815 +        put 'drop _LEAF_;';
16816 +      run;
16818 +      data _null_;
16819 +        file pubref mod;
16820 +        put 'drop _LEAF_;';
16821 +      run;
16823 +   %end;
16825 +   filename flowref;
16826 +   filename pubref;
16828 +   /* em_metachange code */
16829 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16830 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16831 +   %end;
16833 +   /* variable selection based on importance stat    */
16834 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16835 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16836 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16837 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16838 +     %let obs = %sysfunc(fetch(&dsid));
16839 +     %do %while(&obs=0);
16840 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16841 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16842 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16843 +       %let obs = %sysfunc(fetch(&dsid));
16844 +     %end;
16845 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16846 +   %end;
16848 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16849 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16850 +    %let tree_pred_vars = ;
16851 +    %let tree_pred_lvl =;
16852 +    %let numpred= 0;
16854 +    data _null_;
16855 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16856 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16857 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16858 +     if eof then
16859 +       call symput('numpred', strip(put(_N_, BEST.)));
16860 +    run;
16861 +   %end;
16863 +   %if &numpred ne 0 %then %do;
16864 +    %do i=1 %to &numpred;
16865 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16866 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16867 +    %end;
16868 +   %end;
16870 +   /* determine if multiple targets will be processed */
16871 +   %let em_tree_multipleTargets=N;
16872 +   %let em_tree_numTarget=1;
16873 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16874 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16875 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16876 +         %let em_tree_multipleTargets=N;
16877 +      %end;
16878 +      %else %do;
16879 +        data _null_;
16880 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16881 +          if eof then
16882 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16883 +        run;
16885 +        %if &em_tree_numTarget gt 1 %then %do;
16886 +           %let em_tree_multipleTargets=Y;
16887 +        %end;
16888 +     %end;
16889 +   %end;
16891 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16892 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16894 +      /* variable importance */
16895 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16896 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16898 +         %let validexist=0;
16899 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16900 +           %let validexist=1;
16901 +         %end;
16903 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16904 +         /* and the columns may not be generated                                                                                 */
16905 +         %let em_tree_cvexists=;
16906 +         %let em_tree_surrexists=.;
16907 +         data _null_;
16908 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16909 +            if eof then do ;
16910 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16911 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16912 +            end;
16913 +         run;
16915 +         data &EM_USER_OUTIMPORT;
16916 +            set &EM_USER_OUTIMPORT;
16918 +            /* format columns based on Precison value specified */
16919 +            format importance 15.&EM_PROPERTY_PRECISION
16920 +                 %if &validexist %then %do;
16921 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16922 +                 %end;
16923 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16924 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16925 +                 %end;
16926 +            ;
16927 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16928 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16929 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16930 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16931 +                 %if "&em_tree_surrexists" ne "" %then %do;
16932 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16933 +                 %end;
16934 +                 %if &validexist %then %do;
16935 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16936 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16937 +                 %end;
16938 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16939 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16940 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16941 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16942 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16943 +                 %end;
16944 +            ;
16945 +         run;
16947 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16948 +      %end;
16949 +   %end;
16951 +   %doendm:
16952 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=17Nov2019:18:40:59,
      Create Time=16Nov2019:00:25:13
 
NOTE: 337 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 75.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=17Nov2019:18:40:59,
      Create Time=16Nov2019:00:25:13
 
NOTE: 311 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 67.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15834,
      Last Modified=17Nov2019:18:40:59,
      Create Time=16Nov2019:00:25:13
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14776,
      Last Modified=17Nov2019:18:40:59,
      Create Time=16Nov2019:00:25:13
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 11 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 12 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 12 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 13 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 14 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 16 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 17 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 18 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 19 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 19 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 20 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 21 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 21 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 23 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 24 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 24 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 25 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 25 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 28 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 28 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 29 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 29 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 30 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 31 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 38 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 38 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
16953
16954  *------------------------------------------------------------*;
16955  * End SCORE: Tree;
16956  *------------------------------------------------------------*;
 
16957  proc sort data=WORK.EM_METACHANGE;
16958  by key uname;
16959  run;
 
NOTE: There were 32 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 32 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
16960  filename x "D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
16961  data _null_;
16962  file x;
16963  put 'if upcase(NAME) = "G" then do;';
16964  put 'ROLE = "REJECTED";';
16965  put 'end;';
16966  put 'else ';
16967  put 'if upcase(NAME) = "GENRE_ACTION" then do;';
16968  put 'ROLE = "REJECTED";';
16969  put 'end;';
16970  put 'else ';
16971  put 'if upcase(NAME) = "GENRE_ADVENTURE" then do;';
16972  put 'ROLE = "REJECTED";';
16973  put 'end;';
16974  put 'else ';
16975  put 'if upcase(NAME) = "GENRE_ANIMATIONMANGA" then do;';
16976  put 'ROLE = "REJECTED";';
16977  put 'end;';
16978  put 'else ';
16979  put 'if upcase(NAME) = "GENRE_ARTHOUSEINTER" then do;';
16980  put 'ROLE = "REJECTED";';
16981  put 'end;';
16982  put 'else ';
16983  put 'if upcase(NAME) = "GENRE_CLASSICSCULT" then do;';
16984  put 'ROLE = "REJECTED";';
16985  put 'end;';
16986  put 'else ';
16987  put 'if upcase(NAME) = "GENRE_COMEDY" then do;';
16988  put 'ROLE = "REJECTED";';
16989  put 'end;';
16990  put 'else ';
16991  put 'if upcase(NAME) = "GENRE_FAMILYKIDS" then do;';
16992  put 'ROLE = "REJECTED";';
16993  put 'end;';
16994  put 'else ';
16995  put 'if upcase(NAME) = "GENRE_FANTASY" then do;';
16996  put 'ROLE = "REJECTED";';
16997  put 'end;';
16998  put 'else ';
16999  put 'if upcase(NAME) = "GENRE_FITNESSSPORTS" then do;';
17000  put 'ROLE = "REJECTED";';
17001  put 'end;';
17002  put 'else ';
17003  put 'if upcase(NAME) = "GENRE_HORROR" then do;';
17004  put 'ROLE = "REJECTED";';
17005  put 'end;';
17006  put 'else ';
17007  put 'if upcase(NAME) = "GENRE_MUSICALPERFARTS" then do;';
17008  put 'ROLE = "REJECTED";';
17009  put 'end;';
17010  put 'else ';
17011  put 'if upcase(NAME) = "GENRE_ROMANCE" then do;';
17012  put 'ROLE = "REJECTED";';
17013  put 'end;';
17014  put 'else ';
17015  put 'if upcase(NAME) = "GENRE_SCI_FI" then do;';
17016  put 'ROLE = "REJECTED";';
17017  put 'end;';
17018  put 'else ';
17019  put 'if upcase(NAME) = "GENRE_SPECIAL_INTEREST" then do;';
17020  put 'ROLE = "REJECTED";';
17021  put 'end;';
17022  put 'else ';
17023  put 'if upcase(NAME) = "GENRE_THRILLMYSSUSP" then do;';
17024  put 'ROLE = "REJECTED";';
17025  put 'end;';
17026  put 'else ';
17027  put 'if upcase(NAME) = "GENRE_WESTERN" then do;';
17028  put 'ROLE = "REJECTED";';
17029  put 'end;';
17030  put 'else ';
17031  put 'if upcase(NAME) = "IMP_DOMESTIC_GROSS" then do;';
17032  put 'ROLE = "REJECTED";';
17033  put 'end;';
17034  put 'else ';
17035  put 'if upcase(NAME) = "IMP_DOMESTIC_OPENING" then do;';
17036  put 'ROLE = "REJECTED";';
17037  put 'end;';
17038  put 'else ';
17039  put 'if upcase(NAME) = "IMP_FOREIGN_GROSS" then do;';
17040  put 'ROLE = "REJECTED";';
17041  put 'end;';
17042  put 'else ';
17043  put 'if upcase(NAME) = "IMP_MARKETS_MISSING" then do;';
17044  put 'ROLE = "REJECTED";';
17045  put 'end;';
17046  put 'else ';
17047  put 'if upcase(NAME) = "IMP_SS_MEDIAN" then do;';
17048  put 'ROLE = "REJECTED";';
17049  put 'end;';
17050  put 'else ';
17051  put 'if upcase(NAME) = "IMP_SS_P75" then do;';
17052  put 'ROLE = "REJECTED";';
17053  put 'end;';
17054  put 'else ';
17055  put 'if upcase(NAME) = "IMP_TOTAL_GROSS" then do;';
17056  put 'ROLE = "REJECTED";';
17057  put 'end;';
17058  put 'else ';
17059  put 'if upcase(NAME) = "NC17" then do;';
17060  put 'ROLE = "REJECTED";';
17061  put 'end;';
17062  put 'else ';
17063  put 'if upcase(NAME) = "NR" then do;';
17064  put 'ROLE = "REJECTED";';
17065  put 'end;';
17066  put 'else ';
17067  put 'if upcase(NAME) = "PG" then do;';
17068  put 'ROLE = "REJECTED";';
17069  put 'end;';
17070  put 'else ';
17071  put 'if upcase(NAME) = "PG_13" then do;';
17072  put 'ROLE = "REJECTED";';
17073  put 'end;';
17074  put 'else ';
17075  put 'if upcase(NAME) = "Q_AUDIENCE_SCORE_POSITIVEFALSE" then do;';
17076  put 'ROLE = "ASSESS";';
17077  put 'end;';
17078  put 'else ';
17079  put 'if upcase(NAME) = "Q_AUDIENCE_SCORE_POSITIVETRUE" then do;';
17080  put 'ROLE = "ASSESS";';
17081  put 'end;';
17082  put 'else ';
17083  put 'if upcase(NAME) = "R" then do;';
17084  put 'ROLE = "REJECTED";';
17085  put 'end;';
17086  put 'else ';
17087  put 'if upcase(NAME) = "_NODE_" then do;';
17088  put 'ROLE = "SEGMENT";';
17089  put 'LEVEL = "NOMINAL";';
17090  put 'end;';
17091  run;
 
NOTE: The file X is:
      Filename=D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=17Nov2019:18:41:01,
      Create Time=16Nov2019:00:25:13
 
NOTE: 128 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
17092  filename x;
NOTE: Fileref X has been deassigned.
 
17093  filename emflow "D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17094  *------------------------------------------------------------*;
17095  * Tree: Scoring DATA data;
17096  *------------------------------------------------------------*;
17097  data EMWS1.Tree_TRAIN
17098  / view=EMWS1.Tree_TRAIN
17099  ;
17100  set EMWS1.Impt_TRAIN
17101  ;
17102  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17103 +****************************************************************;
17104 +******             DECISION TREE SCORING CODE             ******;
17105 +****************************************************************;
17106 +
17107 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17108 +LENGTH F_audience_score_positive  $    5;
17109 +LENGTH I_audience_score_positive  $    5;
17110 +LENGTH U_audience_score_positive  $    5;
17111 +LENGTH _WARN_  $    4;
17112 +
17113 +******              LABELS FOR NEW VARIABLES              ******;
17114 +label _NODE_ = 'Node' ;
17115 +label _LEAF_ = 'Leaf' ;
17116 +label P_audience_score_positiveTrue =
17117 +'Predicted: audience_score_positive=True' ;
17118 +label P_audience_score_positiveFalse =
17119 +'Predicted: audience_score_positive=False' ;
17120 +label Q_audience_score_positiveTrue =
17121 +'Unadjusted P: audience_score_positive=True' ;
17122 +label Q_audience_score_positiveFalse =
17123 +'Unadjusted P: audience_score_positive=False' ;
17124 +label V_audience_score_positiveTrue =
17125 +'Validated: audience_score_positive=True' ;
17126 +label V_audience_score_positiveFalse =
17127 +'Validated: audience_score_positive=False' ;
17128 +label R_audience_score_positiveTrue =
17129 +'Residual: audience_score_positive=True' ;
17130 +label R_audience_score_positiveFalse =
17131 +'Residual: audience_score_positive=False' ;
17132 +label F_audience_score_positive = 'From: audience_score_positive' ;
17133 +label I_audience_score_positive = 'Into: audience_score_positive' ;
17134 +label U_audience_score_positive =
17135 +'Unnormalized Into: audience_score_positive' ;
17136 +label _WARN_ = 'Warnings' ;
17137 +
17138 +
17139 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17140 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17141 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17142 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17143 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17144 +
17145 +
17146 +_ARBFMT_5 = PUT( audience_score_positive , $5.);
17147 + %DMNORMCP( _ARBFMT_5, F_audience_score_positive );
17148 +
17149 +******             ASSIGN OBSERVATION TO NODE             ******;
17150 +IF  NOT MISSING(IMP_ss_p25 ) AND
17151 +                 0.875 <= IMP_ss_p25  THEN DO;
17152 +  IF  NOT MISSING(tomatometer_count ) AND
17153 +                   130.5 <= tomatometer_count  THEN DO;
17154 +    _NODE_  =                    7;
17155 +    _LEAF_  =                   18;
17156 +    P_audience_score_positiveTrue  =      0.9269406392694;
17157 +    P_audience_score_positiveFalse  =     0.07305936073059;
17158 +    Q_audience_score_positiveTrue  =      0.9269406392694;
17159 +    Q_audience_score_positiveFalse  =     0.07305936073059;
17160 +    V_audience_score_positiveTrue  =     0.91079812206572;
17161 +    V_audience_score_positiveFalse  =     0.08920187793427;
17162 +    I_audience_score_positive  = 'TRUE' ;
17163 +    U_audience_score_positive  = 'True' ;
17164 +    END;
17165 +  ELSE DO;
17166 +    IF  NOT MISSING(IMP_ss_std ) AND
17167 +          0.39564972747488 <= IMP_ss_std  THEN DO;
17168 +      _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17169 +       %DMNORMIP( _ARBFMT_12);
17170 +      IF _ARBFMT_12 IN ('1' ) THEN DO;
17171 +        _NODE_  =                   26;
17172 +        _LEAF_  =                   15;
17173 +        P_audience_score_positiveTrue  =     0.67948717948717;
17174 +        P_audience_score_positiveFalse  =     0.32051282051282;
17175 +        Q_audience_score_positiveTrue  =     0.67948717948717;
17176 +        Q_audience_score_positiveFalse  =     0.32051282051282;
17177 +        V_audience_score_positiveTrue  =      0.7012987012987;
17178 +        V_audience_score_positiveFalse  =     0.29870129870129;
17179 +        I_audience_score_positive  = 'TRUE' ;
17180 +        U_audience_score_positive  = 'True' ;
17181 +        END;
17182 +      ELSE DO;
17183 +        IF  NOT MISSING(IMP_runtime ) AND
17184 +                         110.5 <= IMP_runtime  THEN DO;
17185 +          _NODE_  =                   51;
17186 +          _LEAF_  =                   17;
17187 +          P_audience_score_positiveTrue  =      0.6938775510204;
17188 +          P_audience_score_positiveFalse  =     0.30612244897959;
17189 +          Q_audience_score_positiveTrue  =      0.6938775510204;
17190 +          Q_audience_score_positiveFalse  =     0.30612244897959;
17191 +          V_audience_score_positiveTrue  =     0.55263157894736;
17192 +          V_audience_score_positiveFalse  =     0.44736842105263;
17193 +          I_audience_score_positive  = 'TRUE' ;
17194 +          U_audience_score_positive  = 'True' ;
17195 +          END;
17196 +        ELSE DO;
17197 +          _NODE_  =                   50;
17198 +          _LEAF_  =                   16;
17199 +          P_audience_score_positiveTrue  =     0.43457943925233;
17200 +          P_audience_score_positiveFalse  =     0.56542056074766;
17201 +          Q_audience_score_positiveTrue  =     0.43457943925233;
17202 +          Q_audience_score_positiveFalse  =     0.56542056074766;
17203 +          V_audience_score_positiveTrue  =     0.44444444444444;
17204 +          V_audience_score_positiveFalse  =     0.55555555555555;
17205 +          I_audience_score_positive  = 'FALSE' ;
17206 +          U_audience_score_positive  = 'False' ;
17207 +          END;
17208 +        END;
17209 +      END;
17210 +    ELSE DO;
17211 +      IF  NOT MISSING(IMP_ss_count ) AND
17212 +        IMP_ss_count  <                 19.5 THEN DO;
17213 +        IF  NOT MISSING(IMP_user_rating_count ) AND
17214 +                         474.5 <= IMP_user_rating_count  THEN DO;
17215 +          _NODE_  =                   45;
17216 +          _LEAF_  =                   13;
17217 +          P_audience_score_positiveTrue  =     0.73584905660377;
17218 +          P_audience_score_positiveFalse  =     0.26415094339622;
17219 +          Q_audience_score_positiveTrue  =     0.73584905660377;
17220 +          Q_audience_score_positiveFalse  =     0.26415094339622;
17221 +          V_audience_score_positiveTrue  =     0.77611940298507;
17222 +          V_audience_score_positiveFalse  =     0.22388059701492;
17223 +          I_audience_score_positive  = 'TRUE' ;
17224 +          U_audience_score_positive  = 'True' ;
17225 +          END;
17226 +        ELSE DO;
17227 +          IF  NOT MISSING(IMP_user_rating_count ) AND
17228 +                           385.5 <= IMP_user_rating_count  THEN DO;
17229 +            _NODE_  =                   83;
17230 +            _LEAF_  =                   12;
17231 +            P_audience_score_positiveTrue  =                 0.25;
17232 +            P_audience_score_positiveFalse  =                 0.75;
17233 +            Q_audience_score_positiveTrue  =                 0.25;
17234 +            Q_audience_score_positiveFalse  =                 0.75;
17235 +            V_audience_score_positiveTrue  =                0.125;
17236 +            V_audience_score_positiveFalse  =                0.875;
17237 +            I_audience_score_positive  = 'FALSE' ;
17238 +            U_audience_score_positive  = 'False' ;
17239 +            END;
17240 +          ELSE DO;
17241 +            _NODE_  =                   82;
17242 +            _LEAF_  =                   11;
17243 +            P_audience_score_positiveTrue  =     0.61224489795918;
17244 +            P_audience_score_positiveFalse  =     0.38775510204081;
17245 +            Q_audience_score_positiveTrue  =     0.61224489795918;
17246 +            Q_audience_score_positiveFalse  =     0.38775510204081;
17247 +            V_audience_score_positiveTrue  =     0.61494252873563;
17248 +            V_audience_score_positiveFalse  =     0.38505747126436;
17249 +            I_audience_score_positive  = 'TRUE' ;
17250 +            U_audience_score_positive  = 'True' ;
17251 +            END;
17252 +          END;
17253 +        END;
17254 +      ELSE DO;
17255 +        _NODE_  =                   25;
17256 +        _LEAF_  =                   14;
17257 +        P_audience_score_positiveTrue  =     0.83387622149837;
17258 +        P_audience_score_positiveFalse  =     0.16612377850162;
17259 +        Q_audience_score_positiveTrue  =     0.83387622149837;
17260 +        Q_audience_score_positiveFalse  =     0.16612377850162;
17261 +        V_audience_score_positiveTrue  =     0.76567656765676;
17262 +        V_audience_score_positiveFalse  =     0.23432343234323;
17263 +        I_audience_score_positive  = 'TRUE' ;
17264 +        U_audience_score_positive  = 'True' ;
17265 +        END;
17266 +      END;
17267 +    END;
17268 +  END;
17269 +ELSE DO;
17270 +  _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17271 +   %DMNORMIP( _ARBFMT_12);
17272 +  IF _ARBFMT_12 IN ('1' ) THEN DO;
17273 +    _NODE_  =                    4;
17274 +    _LEAF_  =                    1;
17275 +    P_audience_score_positiveTrue  =     0.63157894736842;
17276 +    P_audience_score_positiveFalse  =     0.36842105263157;
17277 +    Q_audience_score_positiveTrue  =     0.63157894736842;
17278 +    Q_audience_score_positiveFalse  =     0.36842105263157;
17279 +    V_audience_score_positiveTrue  =     0.71428571428571;
17280 +    V_audience_score_positiveFalse  =     0.28571428571428;
17281 +    I_audience_score_positive  = 'TRUE' ;
17282 +    U_audience_score_positive  = 'True' ;
17283 +    END;
17284 +  ELSE DO;
17285 +    IF  NOT MISSING(IMP_runtime ) AND
17286 +               103.9140625 <= IMP_runtime  THEN DO;
17287 +      IF  NOT MISSING(IMP_ss_std ) AND
17288 +        IMP_ss_std  <     0.46179765923036 THEN DO;
17289 +        IF  NOT MISSING(IMP_user_rating_count ) AND
17290 +                        9282.5 <= IMP_user_rating_count  THEN DO;
17291 +          _NODE_  =                   41;
17292 +          _LEAF_  =                    7;
17293 +          P_audience_score_positiveTrue  =     0.94444444444444;
17294 +          P_audience_score_positiveFalse  =     0.05555555555555;
17295 +          Q_audience_score_positiveTrue  =     0.94444444444444;
17296 +          Q_audience_score_positiveFalse  =     0.05555555555555;
17297 +          V_audience_score_positiveTrue  =     0.69767441860465;
17298 +          V_audience_score_positiveFalse  =     0.30232558139534;
17299 +          I_audience_score_positive  = 'TRUE' ;
17300 +          U_audience_score_positive  = 'True' ;
17301 +          END;
17302 +        ELSE DO;
17303 +          _NODE_  =                   40;
17304 +          _LEAF_  =                    6;
17305 +          P_audience_score_positiveTrue  =     0.44776119402985;
17306 +          P_audience_score_positiveFalse  =     0.55223880597014;
17307 +          Q_audience_score_positiveTrue  =     0.44776119402985;
17308 +          Q_audience_score_positiveFalse  =     0.55223880597014;
17309 +          V_audience_score_positiveTrue  =              0.46875;
17310 +          V_audience_score_positiveFalse  =              0.53125;
17311 +          I_audience_score_positive  = 'FALSE' ;
17312 +          U_audience_score_positive  = 'False' ;
17313 +          END;
17314 +        END;
17315 +      ELSE DO;
17316 +        _ARBFMT_12 = PUT( genre_DramaTele , BEST12.);
17317 +         %DMNORMIP( _ARBFMT_12);
17318 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17319 +          IF  NOT MISSING(IMP_ss_count ) AND
17320 +                             286 <= IMP_ss_count  THEN DO;
17321 +            _NODE_  =                   81;
17322 +            _LEAF_  =                   10;
17323 +            P_audience_score_positiveTrue  =                 0.75;
17324 +            P_audience_score_positiveFalse  =                 0.25;
17325 +            Q_audience_score_positiveTrue  =                 0.75;
17326 +            Q_audience_score_positiveFalse  =                 0.25;
17327 +            V_audience_score_positiveTrue  =     0.71428571428571;
17328 +            V_audience_score_positiveFalse  =     0.28571428571428;
17329 +            I_audience_score_positive  = 'TRUE' ;
17330 +            U_audience_score_positive  = 'True' ;
17331 +            END;
17332 +          ELSE DO;
17333 +            _NODE_  =                   80;
17334 +            _LEAF_  =                    9;
17335 +            P_audience_score_positiveTrue  =      0.1551724137931;
17336 +            P_audience_score_positiveFalse  =     0.84482758620689;
17337 +            Q_audience_score_positiveTrue  =      0.1551724137931;
17338 +            Q_audience_score_positiveFalse  =     0.84482758620689;
17339 +            V_audience_score_positiveTrue  =     0.30172413793103;
17340 +            V_audience_score_positiveFalse  =     0.69827586206896;
17341 +            I_audience_score_positive  = 'FALSE' ;
17342 +            U_audience_score_positive  = 'False' ;
17343 +            END;
17344 +          END;
17345 +        ELSE DO;
17346 +          _NODE_  =                   42;
17347 +          _LEAF_  =                    8;
17348 +          P_audience_score_positiveTrue  =     0.39487179487179;
17349 +          P_audience_score_positiveFalse  =      0.6051282051282;
17350 +          Q_audience_score_positiveTrue  =     0.39487179487179;
17351 +          Q_audience_score_positiveFalse  =      0.6051282051282;
17352 +          V_audience_score_positiveTrue  =     0.32710280373831;
17353 +          V_audience_score_positiveFalse  =     0.67289719626168;
17354 +          I_audience_score_positive  = 'FALSE' ;
17355 +          U_audience_score_positive  = 'False' ;
17356 +          END;
17357 +        END;
17358 +      END;
17359 +    ELSE DO;
17360 +      IF  NOT MISSING(IMP_ss_mean ) AND
17361 +            0.59962546816479 <= IMP_ss_mean  THEN DO;
17362 +        IF  NOT MISSING(IMP_user_rating_count ) AND
17363 +                         15376 <= IMP_user_rating_count  THEN DO;
17364 +          IF  NOT MISSING(IMP_ss_mean ) AND
17365 +            IMP_ss_mean  <     0.63378735718205 THEN DO;
17366 +            _NODE_  =                   72;
17367 +            _LEAF_  =                    4;
17368 +            P_audience_score_positiveTrue  =                    0;
17369 +            P_audience_score_positiveFalse  =                    1;
17370 +            Q_audience_score_positiveTrue  =                    0;
17371 +            Q_audience_score_positiveFalse  =                    1;
17372 +            V_audience_score_positiveTrue  =     0.44444444444444;
17373 +            V_audience_score_positiveFalse  =     0.55555555555555;
17374 +            I_audience_score_positive  = 'FALSE' ;
17375 +            U_audience_score_positive  = 'False' ;
17376 +            END;
17377 +          ELSE DO;
17378 +            _NODE_  =                   73;
17379 +            _LEAF_  =                    5;
17380 +            P_audience_score_positiveTrue  =     0.88235294117647;
17381 +            P_audience_score_positiveFalse  =     0.11764705882352;
17382 +            Q_audience_score_positiveTrue  =     0.88235294117647;
17383 +            Q_audience_score_positiveFalse  =     0.11764705882352;
17384 +            V_audience_score_positiveTrue  =     0.57142857142857;
17385 +            V_audience_score_positiveFalse  =     0.42857142857142;
17386 +            I_audience_score_positive  = 'TRUE' ;
17387 +            U_audience_score_positive  = 'True' ;
17388 +            END;
17389 +          END;
17390 +        ELSE DO;
17391 +          _NODE_  =                   38;
17392 +          _LEAF_  =                    3;
17393 +          P_audience_score_positiveTrue  =     0.23011363636363;
17394 +          P_audience_score_positiveFalse  =     0.76988636363636;
17395 +          Q_audience_score_positiveTrue  =     0.23011363636363;
17396 +          Q_audience_score_positiveFalse  =     0.76988636363636;
17397 +          V_audience_score_positiveTrue  =      0.2081081081081;
17398 +          V_audience_score_positiveFalse  =     0.79189189189189;
17399 +          I_audience_score_positive  = 'FALSE' ;
17400 +          U_audience_score_positive  = 'False' ;
17401 +          END;
17402 +        END;
17403 +      ELSE DO;
17404 +        _NODE_  =                   20;
17405 +        _LEAF_  =                    2;
17406 +        P_audience_score_positiveTrue  =     0.11709601873536;
17407 +        P_audience_score_positiveFalse  =     0.88290398126463;
17408 +        Q_audience_score_positiveTrue  =     0.11709601873536;
17409 +        Q_audience_score_positiveFalse  =     0.88290398126463;
17410 +        V_audience_score_positiveTrue  =     0.16331658291457;
17411 +        V_audience_score_positiveFalse  =     0.83668341708542;
17412 +        I_audience_score_positive  = 'FALSE' ;
17413 +        U_audience_score_positive  = 'False' ;
17414 +        END;
17415 +      END;
17416 +    END;
17417 +  END;
17418 +
17419 +*****  RESIDUALS R_ *************;
17420 +IF  F_audience_score_positive  NE 'TRUE'
17421 +AND F_audience_score_positive  NE 'FALSE'  THEN DO;
17422 +        R_audience_score_positiveTrue  = .;
17423 +        R_audience_score_positiveFalse  = .;
17424 + END;
17425 + ELSE DO;
17426 +       R_audience_score_positiveTrue  =  -P_audience_score_positiveTrue ;
17427 +       R_audience_score_positiveFalse  =  -P_audience_score_positiveFalse ;
17428 +       SELECT( F_audience_score_positive  );
17429 +          WHEN( 'TRUE'  ) R_audience_score_positiveTrue  =
17430 +        R_audience_score_positiveTrue  +1;
17431 +          WHEN( 'FALSE'  ) R_audience_score_positiveFalse  =
17432 +        R_audience_score_positiveFalse  +1;
17433 +       END;
17434 + END;
17435 +
17436 +****************************************************************;
17437 +******          END OF DECISION TREE SCORING CODE         ******;
17438 +****************************************************************;
17439 +
17440 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17441  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.15 seconds
 
 
17442  quit;
17443  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17444  filename emflow "D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17445  *------------------------------------------------------------*;
17446  * Tree: Scoring VALIDATE data;
17447  *------------------------------------------------------------*;
17448  data EMWS1.Tree_VALIDATE
17449  / view=EMWS1.Tree_VALIDATE
17450  ;
17451  set EMWS1.Impt_VALIDATE
17452  ;
17453  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\DataMiningProject\SASEM_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17454 +****************************************************************;
17455 +******             DECISION TREE SCORING CODE             ******;
17456 +****************************************************************;
17457 +
17458 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17459 +LENGTH F_audience_score_positive  $    5;
17460 +LENGTH I_audience_score_positive  $    5;
17461 +LENGTH U_audience_score_positive  $    5;
17462 +LENGTH _WARN_  $    4;
17463 +
17464 +******              LABELS FOR NEW VARIABLES              ******;
17465 +label _NODE_ = 'Node' ;
17466 +label _LEAF_ = 'Leaf' ;
17467 +label P_audience_score_positiveTrue =
17468 +'Predicted: audience_score_positive=True' ;
17469 +label P_audience_score_positiveFalse =
17470 +'Predicted: audience_score_positive=False' ;
17471 +label Q_audience_score_positiveTrue =
17472 +'Unadjusted P: audience_score_positive=True' ;
17473 +label Q_audience_score_positiveFalse =
17474 +'Unadjusted P: audience_score_positive=False' ;
17475 +label V_audience_score_positiveTrue =
17476 +'Validated: audience_score_positive=True' ;
17477 +label V_audience_score_positiveFalse =
17478 +'Validated: audience_score_positive=False' ;
17479 +label R_audience_score_positiveTrue =
17480 +'Residual: audience_score_positive=True' ;
17481 +label R_audience_score_positiveFalse =
17482 +'Residual: audience_score_positive=False' ;
17483 +label F_audience_score_positive = 'From: audience_score_positive' ;
17484 +label I_audience_score_positive = 'Into: audience_score_positive' ;
17485 +label U_audience_score_positive =
17486 +'Unnormalized Into: audience_score_positive' ;
17487 +label _WARN_ = 'Warnings' ;
17488 +
17489 +
17490 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17491 +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
17492 +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
17493 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17494 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17495 +
17496 +
17497 +_ARBFMT_5 = PUT( audience_score_positive , $5.);
17498 + %DMNORMCP( _ARBFMT_5, F_audience_score_positive );
17499 +
17500 +******             ASSIGN OBSERVATION TO NODE             ******;
17501 +IF  NOT MISSING(IMP_ss_p25 ) AND
17502 +                 0.875 <= IMP_ss_p25  THEN DO;
17503 +  IF  NOT MISSING(tomatometer_count ) AND
17504 +                   130.5 <= tomatometer_count  THEN DO;
17505 +    _NODE_  =                    7;
17506 +    _LEAF_  =                   18;
17507 +    P_audience_score_positiveTrue  =      0.9269406392694;
17508 +    P_audience_score_positiveFalse  =     0.07305936073059;
17509 +    Q_audience_score_positiveTrue  =      0.9269406392694;
17510 +    Q_audience_score_positiveFalse  =     0.07305936073059;
17511 +    V_audience_score_positiveTrue  =     0.91079812206572;
17512 +    V_audience_score_positiveFalse  =     0.08920187793427;
17513 +    I_audience_score_positive  = 'TRUE' ;
17514 +    U_audience_score_positive  = 'True' ;
17515 +    END;
17516 +  ELSE DO;
17517 +    IF  NOT MISSING(IMP_ss_std ) AND
17518 +          0.39564972747488 <= IMP_ss_std  THEN DO;
17519 +      _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17520 +       %DMNORMIP( _ARBFMT_12);
17521 +      IF _ARBFMT_12 IN ('1' ) THEN DO;
17522 +        _NODE_  =                   26;
17523 +        _LEAF_  =                   15;
17524 +        P_audience_score_positiveTrue  =     0.67948717948717;
17525 +        P_audience_score_positiveFalse  =     0.32051282051282;
17526 +        Q_audience_score_positiveTrue  =     0.67948717948717;
17527 +        Q_audience_score_positiveFalse  =     0.32051282051282;
17528 +        V_audience_score_positiveTrue  =      0.7012987012987;
17529 +        V_audience_score_positiveFalse  =     0.29870129870129;
17530 +        I_audience_score_positive  = 'TRUE' ;
17531 +        U_audience_score_positive  = 'True' ;
17532 +        END;
17533 +      ELSE DO;
17534 +        IF  NOT MISSING(IMP_runtime ) AND
17535 +                         110.5 <= IMP_runtime  THEN DO;
17536 +          _NODE_  =                   51;
17537 +          _LEAF_  =                   17;
17538 +          P_audience_score_positiveTrue  =      0.6938775510204;
17539 +          P_audience_score_positiveFalse  =     0.30612244897959;
17540 +          Q_audience_score_positiveTrue  =      0.6938775510204;
17541 +          Q_audience_score_positiveFalse  =     0.30612244897959;
17542 +          V_audience_score_positiveTrue  =     0.55263157894736;
17543 +          V_audience_score_positiveFalse  =     0.44736842105263;
17544 +          I_audience_score_positive  = 'TRUE' ;
17545 +          U_audience_score_positive  = 'True' ;
17546 +          END;
17547 +        ELSE DO;
17548 +          _NODE_  =                   50;
17549 +          _LEAF_  =                   16;
17550 +          P_audience_score_positiveTrue  =     0.43457943925233;
17551 +          P_audience_score_positiveFalse  =     0.56542056074766;
17552 +          Q_audience_score_positiveTrue  =     0.43457943925233;
17553 +          Q_audience_score_positiveFalse  =     0.56542056074766;
17554 +          V_audience_score_positiveTrue  =     0.44444444444444;
17555 +          V_audience_score_positiveFalse  =     0.55555555555555;
17556 +          I_audience_score_positive  = 'FALSE' ;
17557 +          U_audience_score_positive  = 'False' ;
17558 +          END;
17559 +        END;
17560 +      END;
17561 +    ELSE DO;
17562 +      IF  NOT MISSING(IMP_ss_count ) AND
17563 +        IMP_ss_count  <                 19.5 THEN DO;
17564 +        IF  NOT MISSING(IMP_user_rating_count ) AND
17565 +                         474.5 <= IMP_user_rating_count  THEN DO;
17566 +          _NODE_  =                   45;
17567 +          _LEAF_  =                   13;
17568 +          P_audience_score_positiveTrue  =     0.73584905660377;
17569 +          P_audience_score_positiveFalse  =     0.26415094339622;
17570 +          Q_audience_score_positiveTrue  =     0.73584905660377;
17571 +          Q_audience_score_positiveFalse  =     0.26415094339622;
17572 +          V_audience_score_positiveTrue  =     0.77611940298507;
17573 +          V_audience_score_positiveFalse  =     0.22388059701492;
17574 +          I_audience_score_positive  = 'TRUE' ;
17575 +          U_audience_score_positive  = 'True' ;
17576 +          END;
17577 +        ELSE DO;
17578 +          IF  NOT MISSING(IMP_user_rating_count ) AND
17579 +                           385.5 <= IMP_user_rating_count  THEN DO;
17580 +            _NODE_  =                   83;
17581 +            _LEAF_  =                   12;
17582 +            P_audience_score_positiveTrue  =                 0.25;
17583 +            P_audience_score_positiveFalse  =                 0.75;
17584 +            Q_audience_score_positiveTrue  =                 0.25;
17585 +            Q_audience_score_positiveFalse  =                 0.75;
17586 +            V_audience_score_positiveTrue  =                0.125;
17587 +            V_audience_score_positiveFalse  =                0.875;
17588 +            I_audience_score_positive  = 'FALSE' ;
17589 +            U_audience_score_positive  = 'False' ;
17590 +            END;
17591 +          ELSE DO;
17592 +            _NODE_  =                   82;
17593 +            _LEAF_  =                   11;
17594 +            P_audience_score_positiveTrue  =     0.61224489795918;
17595 +            P_audience_score_positiveFalse  =     0.38775510204081;
17596 +            Q_audience_score_positiveTrue  =     0.61224489795918;
17597 +            Q_audience_score_positiveFalse  =     0.38775510204081;
17598 +            V_audience_score_positiveTrue  =     0.61494252873563;
17599 +            V_audience_score_positiveFalse  =     0.38505747126436;
17600 +            I_audience_score_positive  = 'TRUE' ;
17601 +            U_audience_score_positive  = 'True' ;
17602 +            END;
17603 +          END;
17604 +        END;
17605 +      ELSE DO;
17606 +        _NODE_  =                   25;
17607 +        _LEAF_  =                   14;
17608 +        P_audience_score_positiveTrue  =     0.83387622149837;
17609 +        P_audience_score_positiveFalse  =     0.16612377850162;
17610 +        Q_audience_score_positiveTrue  =     0.83387622149837;
17611 +        Q_audience_score_positiveFalse  =     0.16612377850162;
17612 +        V_audience_score_positiveTrue  =     0.76567656765676;
17613 +        V_audience_score_positiveFalse  =     0.23432343234323;
17614 +        I_audience_score_positive  = 'TRUE' ;
17615 +        U_audience_score_positive  = 'True' ;
17616 +        END;
17617 +      END;
17618 +    END;
17619 +  END;
17620 +ELSE DO;
17621 +  _ARBFMT_12 = PUT( genre_HistDocument , BEST12.);
17622 +   %DMNORMIP( _ARBFMT_12);
17623 +  IF _ARBFMT_12 IN ('1' ) THEN DO;
17624 +    _NODE_  =                    4;
17625 +    _LEAF_  =                    1;
17626 +    P_audience_score_positiveTrue  =     0.63157894736842;
17627 +    P_audience_score_positiveFalse  =     0.36842105263157;
17628 +    Q_audience_score_positiveTrue  =     0.63157894736842;
17629 +    Q_audience_score_positiveFalse  =     0.36842105263157;
17630 +    V_audience_score_positiveTrue  =     0.71428571428571;
17631 +    V_audience_score_positiveFalse  =     0.28571428571428;
17632 +    I_audience_score_positive  = 'TRUE' ;
17633 +    U_audience_score_positive  = 'True' ;
17634 +    END;
17635 +  ELSE DO;
17636 +    IF  NOT MISSING(IMP_runtime ) AND
17637 +               103.9140625 <= IMP_runtime  THEN DO;
17638 +      IF  NOT MISSING(IMP_ss_std ) AND
17639 +        IMP_ss_std  <     0.46179765923036 THEN DO;
17640 +        IF  NOT MISSING(IMP_user_rating_count ) AND
17641 +                        9282.5 <= IMP_user_rating_count  THEN DO;
17642 +          _NODE_  =                   41;
17643 +          _LEAF_  =                    7;
17644 +          P_audience_score_positiveTrue  =     0.94444444444444;
17645 +          P_audience_score_positiveFalse  =     0.05555555555555;
17646 +          Q_audience_score_positiveTrue  =     0.94444444444444;
17647 +          Q_audience_score_positiveFalse  =     0.05555555555555;
17648 +          V_audience_score_positiveTrue  =     0.69767441860465;
17649 +          V_audience_score_positiveFalse  =     0.30232558139534;
17650 +          I_audience_score_positive  = 'TRUE' ;
17651 +          U_audience_score_positive  = 'True' ;
17652 +          END;
17653 +        ELSE DO;
17654 +          _NODE_  =                   40;
17655 +          _LEAF_  =                    6;
17656 +          P_audience_score_positiveTrue  =     0.44776119402985;
17657 +          P_audience_score_positiveFalse  =     0.55223880597014;
17658 +          Q_audience_score_positiveTrue  =     0.44776119402985;
17659 +          Q_audience_score_positiveFalse  =     0.55223880597014;
17660 +          V_audience_score_positiveTrue  =              0.46875;
17661 +          V_audience_score_positiveFalse  =              0.53125;
17662 +          I_audience_score_positive  = 'FALSE' ;
17663 +          U_audience_score_positive  = 'False' ;
17664 +          END;
17665 +        END;
17666 +      ELSE DO;
17667 +        _ARBFMT_12 = PUT( genre_DramaTele , BEST12.);
17668 +         %DMNORMIP( _ARBFMT_12);
17669 +        IF _ARBFMT_12 IN ('0' ) THEN DO;
17670 +          IF  NOT MISSING(IMP_ss_count ) AND
17671 +                             286 <= IMP_ss_count  THEN DO;
17672 +            _NODE_  =                   81;
17673 +            _LEAF_  =                   10;
17674 +            P_audience_score_positiveTrue  =                 0.75;
17675 +            P_audience_score_positiveFalse  =                 0.25;
17676 +            Q_audience_score_positiveTrue  =                 0.75;
17677 +            Q_audience_score_positiveFalse  =                 0.25;
17678 +            V_audience_score_positiveTrue  =     0.71428571428571;
17679 +            V_audience_score_positiveFalse  =     0.28571428571428;
17680 +            I_audience_score_positive  = 'TRUE' ;
17681 +            U_audience_score_positive  = 'True' ;
17682 +            END;
17683 +          ELSE DO;
17684 +            _NODE_  =                   80;
17685 +            _LEAF_  =                    9;
17686 +            P_audience_score_positiveTrue  =      0.1551724137931;
17687 +            P_audience_score_positiveFalse  =     0.84482758620689;
17688 +            Q_audience_score_positiveTrue  =      0.1551724137931;
17689 +            Q_audience_score_positiveFalse  =     0.84482758620689;
17690 +            V_audience_score_positiveTrue  =     0.30172413793103;
17691 +            V_audience_score_positiveFalse  =     0.69827586206896;
17692 +            I_audience_score_positive  = 'FALSE' ;
17693 +            U_audience_score_positive  = 'False' ;
17694 +            END;
17695 +          END;
17696 +        ELSE DO;
17697 +          _NODE_  =                   42;
17698 +          _LEAF_  =                    8;
17699 +          P_audience_score_positiveTrue  =     0.39487179487179;
17700 +          P_audience_score_positiveFalse  =      0.6051282051282;
17701 +          Q_audience_score_positiveTrue  =     0.39487179487179;
17702 +          Q_audience_score_positiveFalse  =      0.6051282051282;
17703 +          V_audience_score_positiveTrue  =     0.32710280373831;
17704 +          V_audience_score_positiveFalse  =     0.67289719626168;
17705 +          I_audience_score_positive  = 'FALSE' ;
17706 +          U_audience_score_positive  = 'False' ;
17707 +          END;
17708 +        END;
17709 +      END;
17710 +    ELSE DO;
17711 +      IF  NOT MISSING(IMP_ss_mean ) AND
17712 +            0.59962546816479 <= IMP_ss_mean  THEN DO;
17713 +        IF  NOT MISSING(IMP_user_rating_count ) AND
17714 +                         15376 <= IMP_user_rating_count  THEN DO;
17715 +          IF  NOT MISSING(IMP_ss_mean ) AND
17716 +            IMP_ss_mean  <     0.63378735718205 THEN DO;
17717 +            _NODE_  =                   72;
17718 +            _LEAF_  =                    4;
17719 +            P_audience_score_positiveTrue  =                    0;
17720 +            P_audience_score_positiveFalse  =                    1;
17721 +            Q_audience_score_positiveTrue  =                    0;
17722 +            Q_audience_score_positiveFalse  =                    1;
17723 +            V_audience_score_positiveTrue  =     0.44444444444444;
17724 +            V_audience_score_positiveFalse  =     0.55555555555555;
17725 +            I_audience_score_positive  = 'FALSE' ;
17726 +            U_audience_score_positive  = 'False' ;
17727 +            END;
17728 +          ELSE DO;
17729 +            _NODE_  =                   73;
17730 +            _LEAF_  =                    5;
17731 +            P_audience_score_positiveTrue  =     0.88235294117647;
17732 +            P_audience_score_positiveFalse  =     0.11764705882352;
17733 +            Q_audience_score_positiveTrue  =     0.88235294117647;
17734 +            Q_audience_score_positiveFalse  =     0.11764705882352;
17735 +            V_audience_score_positiveTrue  =     0.57142857142857;
17736 +            V_audience_score_positiveFalse  =     0.42857142857142;
17737 +            I_audience_score_positive  = 'TRUE' ;
17738 +            U_audience_score_positive  = 'True' ;
17739 +            END;
17740 +          END;
17741 +        ELSE DO;
17742 +          _NODE_  =                   38;
17743 +          _LEAF_  =                    3;
17744 +          P_audience_score_positiveTrue  =     0.23011363636363;
17745 +          P_audience_score_positiveFalse  =     0.76988636363636;
17746 +          Q_audience_score_positiveTrue  =     0.23011363636363;
17747 +          Q_audience_score_positiveFalse  =     0.76988636363636;
17748 +          V_audience_score_positiveTrue  =      0.2081081081081;
17749 +          V_audience_score_positiveFalse  =     0.79189189189189;
17750 +          I_audience_score_positive  = 'FALSE' ;
17751 +          U_audience_score_positive  = 'False' ;
17752 +          END;
17753 +        END;
17754 +      ELSE DO;
17755 +        _NODE_  =                   20;
17756 +        _LEAF_  =                    2;
17757 +        P_audience_score_positiveTrue  =     0.11709601873536;
17758 +        P_audience_score_positiveFalse  =     0.88290398126463;
17759 +        Q_audience_score_positiveTrue  =     0.11709601873536;
17760 +        Q_audience_score_positiveFalse  =     0.88290398126463;
17761 +        V_audience_score_positiveTrue  =     0.16331658291457;
17762 +        V_audience_score_positiveFalse  =     0.83668341708542;
17763 +        I_audience_score_positive  = 'FALSE' ;
17764 +        U_audience_score_positive  = 'False' ;
17765 +        END;
17766 +      END;
17767 +    END;
17768 +  END;
17769 +
17770 +*****  RESIDUALS R_ *************;
17771 +IF  F_audience_score_positive  NE 'TRUE'
17772 +AND F_audience_score_positive  NE 'FALSE'  THEN DO;
17773 +        R_audience_score_positiveTrue  = .;
17774 +        R_audience_score_positiveFalse  = .;
17775 + END;
17776 + ELSE DO;
17777 +       R_audience_score_positiveTrue  =  -P_audience_score_positiveTrue ;
17778 +       R_audience_score_positiveFalse  =  -P_audience_score_positiveFalse ;
17779 +       SELECT( F_audience_score_positive  );
17780 +          WHEN( 'TRUE'  ) R_audience_score_positiveTrue  =
17781 +        R_audience_score_positiveTrue  +1;
17782 +          WHEN( 'FALSE'  ) R_audience_score_positiveFalse  =
17783 +        R_audience_score_positiveFalse  +1;
17784 +       END;
17785 + END;
17786 +
17787 +****************************************************************;
17788 +******          END OF DECISION TREE SCORING CODE         ******;
17789 +****************************************************************;
17790 +
17791 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17792  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.14 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.17 seconds
 
 
17793  quit;
17794  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
 
17796  proc sort data=WORK.EM_USER_REPORT;
17797  by ID VIEW;
17798  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
17799  *------------------------------------------------------------*;
17800  * Tree: Computing metadata for TRAIN data;
17801  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
18277  data WORK.MODELTEMP_INFO;
18278  set EMWS1.Tree_EMINFO;
18279  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18280  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
18281  data EMWS1.Tree_EMINFO;
18282  length TARGET KEY $32 DATA $43;
18283  input TARGET KEY DATA $;
18284  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18288  run;
18289  data EMWS1.Tree_EMINFO;
18290  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
18291  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
18292  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
18293  by TARGET KEY;
18294  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.18 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                November 17, 2019
Time:                18:41:04
*------------------------------------------------------------*
18318  data EMWS1.Tree_EMOUTFIT;
18319  set EMWS1.Tree_EMOUTFIT;
18320  length TargetLabel $200;
18321  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18322  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
18323  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18324  by TARGET;
18325  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
18326  %let _EMwarndup = 0;
18327  %let _EMtargetdup =;
18328  %let _EMASEtargetdup =;
18329  data _null_;
18330  set EMWS1.Tree_EMOUTFIT;
18331  if .<_ASE_<0.000001 then do;
18332  call symput('_EMwarndup', '1');
18333  call symput('_EMtargetdup', target);
18334  call symput('_EMASEtargetdup', put(_ASE_, best.));
18335  end;
18336  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18337  %let EMEXCEPTIONSTRING=;
18338  *------------------------------------------------------------*;
18339  * REPORT: Tree;
18340  *------------------------------------------------------------*;
18341  %let EM_ACTION = REPORT;
18342  %let syscc = 0;
18343  %macro main;
18344
18345    %if %upcase(&EM_ACTION) = CREATE %then %do;
18346      filename temp catalog 'sashelp.emmodl.tree_create.source';
18347      %include temp;
18348      filename temp;
18349
18350      %em_tree_create;
18351    %end;
18352
18353     %else
18354     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18355
18356         filename temp catalog 'sashelp.emmodl.tree_train.source';
18357         %include temp;
18358         filename temp;
18359         %em_tree_train;
18360     %end;
18361
18362    %else
18363    %if %upcase(&EM_ACTION) = SCORE %then %do;
18364      filename temp catalog 'sashelp.emmodl.tree_score.source';
18365      %include temp;
18366      filename temp;
18367
18368      %em_tree_score;
18369
18370    %end;
18371
18372    %else
18373    %if %upcase(&EM_ACTION) = REPORT %then %do;
18374
18375         filename temp catalog 'sashelp.emmodl.tree_report.source';
18376         %include temp;
18377         filename temp;
18378
18379         %em_tree_report;
18380     %end;
18381
18382    %else
18383    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18384
18385         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18386         %include temp;
18387         filename temp;
18388         %EM_TREE_OPENTREEVIEWER;
18389
18390     %end;
18391
18392    %else
18393    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18394
18395         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18396         %include temp;
18397         filename temp;
18398         %EM_TREE_CLOSETREEVIEWER;
18399
18400     %end;
18401
18402
18403     %doendm:
18404  %mend main;
18405
18406  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18408 +%macro em_tree_makePlotDs( multipleTar= );
18410 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18411 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18412 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18413 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18415 +  /* determine if validation statistics will be displayed */
18416 +  %let validflag=N;
18417 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18418 +    /* determine if validation data exists */
18419 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18420 +      %let validflag=Y;
18421 +    %end;
18422 +  %end;
18424 +   /* retrieve name of decmeta even in presence of multiple targets */
18425 +   %let decmeta = ;
18426 +   %if &EM_DEC_DECMETA eq %then %do;
18427 +     data _Target;
18428 +       set &em_data_variableset;
18429 +       where ROLE='TARGET' and USE in('D', 'Y');
18430 +       keep NAME;
18431 +     run;
18432 +     proc sort data=_Target;
18433 +       by NAME;
18434 +     run;
18435 +     proc sort data=EM_TARGETDECINFO;
18436 +       by TARGET;
18437 +     run;
18438 +     data _Target;
18439 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18440 +       by NAME;
18441 +       if _a then do;
18442 +         call symput('decmeta', trim(DECMETA));
18443 +       end;
18444 +     run;
18445 +     proc delete data=_Target;run;
18446 +   %end;
18447 +   %else %let decmeta = &EM_DEC_DECMETA;
18450 +  /* retrieve targetEvent from decmeta */
18451 +  %let targetEvent=;
18452 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18453 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18454 +      data _null_;
18455 +       set &DECMETA(where=(_TYPE_="TARGET"));
18456 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18457 +      run;
18458 +    %end;
18459 +  %end;
18461 +  /* retrieve predicted var for targetEvent from decmeta */
18462 +  %let predTarget=;
18463 +  %let predLvl=;
18464 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18465 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18466 +      data _null_;
18467 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18468 +       call symput('predTarget', strip(VARIABLE));
18469 +       call symput('predLvl', strip(LEVEL));
18470 +      run;
18471 +    %end;
18472 +  %end;
18473 +  %else %do;
18474 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18475 +      data _null_;
18476 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18477 +       call symput('predTarget', strip(VARIABLE));
18478 +      run;
18479 +    %end;
18480 +  %end;
18482 +  /* create BelowText value */
18483 +  data belowtext;
18484 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18485 +    keep node belowtext;
18486 +  run;
18488 +  /* relace belowtext with variable label if it exists */
18489 +  data belowtext2;
18490 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18491 +    keep node belowtextlbl;
18492 +  run;
18494 +  proc sort data=belowtext; by node; run;
18495 +  proc sort data=belowtext2; by node; run;
18497 +  data belowtext;
18498 +    merge belowtext belowtext2(in=_a);
18499 +    by node;
18500 +    if _a then belowtext=belowtextlbl;
18501 +    keep node belowtext;
18502 +  run;
18504 +  /* create AboveText value */
18505 +  data abovetext;
18506 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18507 +  run;
18508 +  proc sort data=abovetext; by node numeric_value; run;
18510 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18511 +  data abovetext;
18512 +    set abovetext(rename=(node=parent));
18513 +    by parent numeric_value;
18514 +    retain abovetext tempstring flag branch origval origchar ;
18515 +    length abovetext $256;
18516 +    length tempstring origchar $64;
18518 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18519 +      if first.parent then do;
18520 +        if missing(character_value) then do;
18521 +          numeric_value = round(numeric_value, &sp_precision);
18522 +          abovetext = "< "||strip(NUMERIC_VALUE);
18523 +          branch = 1;
18524 +          origval = numeric_value;
18525 +          output;
18526 +        end;
18527 +        else do;
18528 +          abovetext = "< "||strip(CHARACTER_VALUE);
18529 +          branch = 1;
18530 +          origchar = character_value;
18531 +          output;
18532 +        end;
18534 +        if first.parent AND last.parent then do;
18535 +          if missing(character_value) then do;
18536 +            numeric_value = round(numeric_value, &sp_precision);
18537 +            branch = branch + 1;
18538 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18539 +            output;
18540 +          end;
18541 +          else do;
18542 +            branch = branch + 1;
18543 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18544 +            output;
18545 +          end;
18546 +        end;
18547 +      end;
18548 +      else if last.parent then do;
18549 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18550 +          if missing(character_value) then do;
18551 +            numeric_value = round(numeric_value, &sp_precision);
18552 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18553 +          end;
18554 +          else do;
18555 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18556 +          end;
18557 +          branch = branch + 1;
18558 +          output;
18560 +          if missing(character_value) then do;
18561 +            numeric_value = round(numeric_value, &sp_precision);
18562 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18563 +          end;
18564 +          else do;
18565 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18566 +          end;
18567 +          branch = branch + 1;
18568 +          output;
18569 +        end;
18570 +        else do;
18571 +          if missing(character_value) then do;
18572 +            numeric_value = round(numeric_value, &sp_precision);
18573 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18574 +          end;
18575 +          else do;
18576 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18577 +          end;
18578 +          branch = branch + 1;
18579 +          output;
18580 +        end;
18581 +      end;
18582 +      else do;
18583 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18584 +          if missing(character_value) then do;
18585 +            numeric_value = round(numeric_value,&sp_precision);
18586 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18587 +            origval = numeric_value;
18588 +          end;
18589 +          else do;
18590 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18591 +            origchar = character_value;
18592 +          end;
18593 +          branch = branch + 1;
18594 +          output;
18596 +        end;
18597 +        else do;
18598 +          if missing(character_value) then do;
18599 +            numeric_value = round(numeric_value, &sp_precision);
18600 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18601 +            origval = numeric_value;
18602 +          end;
18603 +          else do;
18604 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18605 +            origval = character_value;
18606 +          end;
18607 +          branch = branch + 1;
18608 +          output;
18609 +        end;
18610 +      end;
18611 +    end;
18612 +    else do;
18613 +       if first.numeric_value then do;
18614 +         flag = 0;
18615 +         abovetext = strip(CHARACTER_VALUE);
18616 +         branch = numeric_value;
18617 +         if first.numeric_value AND last.numeric_value then do;
18618 +           output;
18619 +         end;
18620 +       end;
18621 +       else if last.numeric_value then do;
18622 +         if flag=0 then do;
18623 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18624 +           length = length(strip(tempstring));
18625 +           if length < 32 then do;
18626 +             abovetext = strip(tempstring);
18627 +           end;
18628 +           else do;
18629 +             abovetext = strip(abovetext)||", ...";
18630 +             flag = 1;
18631 +           end;
18632 +         end;
18633 +         branch = numeric_value;
18634 +         output;
18635 +       end;
18636 +       else do;
18637 +         if flag=0 then do;
18638 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18639 +           length = length(strip(tempstring));
18640 +           if length < 32 then do;
18641 +             abovetext = strip(tempstring);
18642 +           end;
18643 +           else do;
18644 +             abovetext = strip(abovetext)||", ...";
18645 +             flag=1;
18646 +           end;
18647 +         end;
18648 +         branch = numeric_value;
18649 +       end;
18650 +    end;
18651 +    keep parent branch abovetext;
18652 +  run;
18654 +  /* MIssing value to abovetext */
18655 +  data tempmissing;
18656 +    set &EM_USER_OUTRULES;
18657 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18658 +    rename node=parent numeric_value=branch character_value=misschar;
18659 +  run;
18662 +  proc sort data=abovetext; by parent branch; run;
18663 +  proc sort data=tempmissing; by parent branch; run;
18664 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18666 +  data tempoutnodes;
18667 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18668 +    by parent branch;
18669 +    length traintotal validtotal 8;
18670 +    retain traintotal validtotal;
18672 +    if _a then do;
18673 +      if ^MISSING(abovetext) then do;
18674 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18675 +      end;
18676 +      else do;
18677 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18678 +      end;
18679 +    end;
18680 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18682 +    if node=1 then do;
18683 +      traintotal = N;
18684 +      validtotal=VN;
18685 +    end;
18687 +    drop role rank stat misschar belowtext;
18688 +  run;
18689 +  proc sort data=tempoutnodes; by node; run;
18690 +  proc sort data=belowtext; by node; run;
18692 +  data tempoutnodes;
18693 +    merge tempoutnodes belowtext;
18694 +    by node;
18696 +  run;
18698 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18699 +  %let adjusted = N;
18700 +  %let npriors = 0;
18701 +  data _null_ ;
18702 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18703 +    if eof then do ;
18704 +      call symput("npriors" , strip(put(_N_,best.))) ;
18705 +    end;
18706 +  run;
18707 +  %if &npriors gt 0 %then %let adjusted=Y;
18710 +  /* create a table with targetUsed and targetLevel columns for each node */
18711 +  data temptarmeta;
18712 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18713 +    %if &multipleTar eq N %then %do;
18714 +      AND USE in ('D', 'Y')
18715 +    %end;
18716 +    ));
18717 +    length TARGET $32;
18718 +    Target=name;
18719 +    keep target level;
18720 +  run;
18722 +  %if &multipleTar eq Y %then %do;
18723 +    data temptargetused;
18724 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18725 +      keep node target;
18726 +    run;
18727 +    proc sort data=temptargetused; by target; run;
18728 +    proc sort data=temptarmeta; by target; run;
18729 +    data temptargetused;
18730 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18731 +      by target;
18732 +      if _a and _b;
18733 +    run;
18734 +  %end;
18735 +  %else %do;
18736 +    data temptargetused;
18737 +      set &EM_USER_OUTSTATS;
18738 +      length target $32 tarlevel $10;
18739 +      target="%EM_TARGET";
18740 +      tarlevel="%EM_TARGET_LEVEL";
18741 +      keep node target tarlevel;
18742 +    run;
18743 +    proc sort data=temptargetused nodupkey; by node; run;
18744 +  %end;
18746 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18747 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18748 +  proc sort data=temptargetused; by node; run;
18751 +  /* create tables for all interval targets as well as all class targets */
18752 +  data tempinterval tempclass;
18753 +    merge tempoutstats temptargetused( rename=(target=targetused));
18754 +    by node;
18755 +    %if "&multipleTar" eq "Y" %then %do;
18756 +      if ((missing(Target)) OR (target=targetused ));
18757 +    %end;
18759 +    if tarlevel="INTERVAL" then output tempinterval;
18760 +    else output tempclass;
18761 +  run;
18763 +  /* iniitalize intTarget and classTarget flags */
18764 +  %let em_intNobs =0;
18765 +  %let em_classNobs = 0;
18766 +  %let em_intTarget= N;
18767 +  %let em_classTarget= N;
18769 +  proc sql;
18770 +    reset noprint;
18771 +    select count(*) into :em_intNobs from tempinterval;
18772 +  quit;
18773 +  proc sql;
18774 +    reset noprint;
18775 +    select count(*) into :em_classNobs from tempclass;
18776 +  quit;
18778 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18779 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18781 +  /* retrieve all information for interval targets */
18782 +  %if &em_intTarget eq Y %then %do;
18784 +    /* determine if leaf variable exists */
18785 +    %let dsid=%sysfunc(open(tempinterval,i));
18786 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18787 +    %let rc=%sysfunc(close(&dsid));
18789 +    proc transpose data=tempinterval
18790 +      %if &leafexists %then %do;
18791 +        (drop=leaf)
18792 +      %end;
18793 +      %if &validexist %then %do;
18794 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18795 +      %end;
18796 +      %else %do;
18797 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18798 +      %end;
18799 +      by node;
18800 +      id statname;
18801 +    run;
18802 +    data tempinterval;
18803 +      set tempinterval;
18804 +      if missing(N) then delete;
18805 +    run;
18806 +  %end;
18808 +  /* retrieve all information for class targets */
18809 +  %if &em_classTarget eq Y %then %do;
18810 +    proc sort data=tempclass; by node category; run;
18811 +    %if &validflag eq N %then %do;
18812 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18813 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18814 +    %end;
18815 +    %else %do;
18816 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18817 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18818 +    %end;
18819 +      set tempclass;
18821 +      %if &validflag eq N %then %do;
18822 +        %if "&adjusted" eq "N" %then %do;
18823 +          if statname="N" then output tempn;
18824 +        %end;
18825 +        %else %do;
18826 +          if statname="NPRIORS" then output tempn;
18827 +        %end;
18828 +        else if statname="PREDICTION" then output temppredict;
18829 +        else if statname="PROBABILITY" then output tempprob;
18830 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18831 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18832 +      %end;
18833 +      %else %do;
18834 +        %if "&adjusted" eq "N" %then %do;
18835 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18836 +        %end;
18837 +        %else %do;
18838 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18839 +        %end;
18840 +        else if statname="PREDICTION" then output temppredict;
18841 +        else if statname="PROBABILITY" then output tempprob;
18842 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18843 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18844 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18845 +      %end;
18846 +    run;
18849 +    /* determine if profit/loss exists in tempprofit */
18850 +    %let em_profitflag=0;
18851 +    %let em_lossflag=0;
18852 +    proc sql;
18853 +      reset noprint;
18854 +      select count(*) into :em_profitflag from tempprofit;
18855 +    quit;
18856 +    proc sql;
18857 +      reset noprint;
18858 +      select count(*) into :em_lossflag from temploss;
18859 +    quit;
18861 +    %if &validFlag eq Y %then %do;
18862 +      proc transpose data=tempn
18863 +        %if "&adjusted" eq "N" %then %do;
18864 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18865 +        %end;
18866 +        %else %do;
18867 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18868 +        %end;
18869 +        by node;
18870 +        id statname;
18871 +      run;
18872 +      %if &em_profitflag ne 0 %then %do;
18873 +        proc transpose data=tempprofit out=tempprofit;
18874 +          by node category;
18875 +          id statname ;
18876 +        run;
18877 +      %end;
18878 +      %if &em_lossflag ne 0 %then %do;
18879 +        proc transpose data=temploss out=temploss;
18880 +          by node category;
18881 +          id statname ;
18882 +        run;
18883 +      %end;
18884 +      data tempprob;
18885 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18886 +        by node
18887 +        %if &multipleTar eq Y %then %do;
18888 +          target
18889 +        %end;
18890 +        category;
18891 +      run;
18892 +    %end;
18894 +    /* store percentcorrect value */
18895 +    data temppredict;
18896 +      merge tempprob temppredict(in=_a);
18897 +      by node category;
18898 +      if _a then do;
18899 +        percentCorrect = statvalue;
18900 +        %if &validFlag eq Y %then %do;
18901 +          vpercentCorrect= vstatvalue;
18902 +        %end;
18903 +      end;
18904 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18905 +      %if &validFlag eq Y %then %do;
18906 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18907 +      %end;
18908 +      ;
18909 +      if missing(percentCorrect) then delete;
18910 +      drop target;
18911 +    run;
18913 +    /* build profittext */
18914 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18915 +      data tempprofittext(keep= node profittext profitloss);
18916 +        length profittext $800 profitloss 8.;
18917 +        retain profittext profitloss;
18919 +        merge tempprob
18920 +        %if &em_profitflag ne 0 %then %do;
18921 +          tempprofit
18922 +        %end;
18923 +        %else %if &em_lossflag ne 0 %then %do;
18924 +          temploss
18925 +        %end;
18926 +        ;
18927 +        by node category;
18929 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18930 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18931 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18932 +          %let profittype = ALL;
18933 +        %end;
18935 +        /* create the profitloss variable for nodecolor if selected */
18936 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18938 +        %if "&profittype" eq "ALL" %then %do;
18939 +          if strip(CATEGORY)="&targetEvent" then do;
18940 +            profitloss=statvalue;
18941 +          end;
18942 +          if first.node then do;
18943 +            %if &validFlag eq N %then %do;
18944 +             %if &em_profitflag ne 0 %then %do;
18945 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18946 +             %end;
18947 +             %if &em_lossflag ne 0 %then %do;
18948 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18949 +             %end;
18950 +            %end;
18951 +            %else %do;
18952 +             %if &em_profitflag ne 0 %then %do;
18953 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18953!+;
18954 +             %end;
18955 +             %if &em_lossflag ne 0 %then %do;
18956 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18957 +             %end;
18958 +            %end;
18959 +          end;
18960 +          else if last.node then do;
18961 +            %if &validFlag eq N %then %do;
18962 +             %if &em_profitflag ne 0 %then %do;
18963 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18964 +             %end;
18965 +             %if &em_lossflag ne 0 %then %do;
18966 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18967 +             %end;
18968 +             /*if CATEGORY="&targetEvent" then do;
18969 +               profitloss=statvalue;
18970 +             end;*/
18971 +            %end;
18972 +            %else %do;
18973 +             %if &em_profitflag ne 0 %then %do;
18974 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18974!+14.&EM_PROPERTY_SPLITPRECISION);
18975 +                if CATEGORY="&targetEvent" then do;
18976 +                 profitloss=ALTERNATIVE_PROFIT;
18977 +                end;
18978 +             %end;
18979 +             %if &em_lossflag ne 0 %then %do;
18980 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18980!+14.&EM_PROPERTY_SPLITPRECISION);
18981 +                if CATEGORY="&targetEvent" then do;
18982 +                  profitloss=ALTERNATIVE_LOSS;
18983 +                end;
18984 +             %end;
18985 +            %end;
18986 +            output;
18987 +          end;
18988 +          else do;
18989 +            %if &validFlag eq N %then %do;
18990 +             %if &em_profitflag ne 0 %then %do;
18991 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18992 +             %end;
18993 +             %if &em_lossflag ne 0 %then %do;
18994 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18995 +             %end;
18996 +            %end;
18997 +            %else %do;
18998 +             %if &em_profitflag ne 0 %then %do;
18999 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18999!+14.&EM_PROPERTY_SPLITPRECISION);
19000 +             %end;
19001 +             %if &em_lossflag ne 0 %then %do;
19002 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19002!+14.&EM_PROPERTY_SPLITPRECISION);
19003 +             %end;
19004 +            %end;
19005 +          end;
19006 +        %end;
19007 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19008 +          if strip(CATEGORY) = "&targetevent" then do;
19009 +            %if &validFlag eq N %then %do;
19010 +             %if &em_profitflag ne 0 %then %do;
19011 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19012 +             %end;
19013 +             %if &em_lossflag ne 0 %then %do;
19014 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19015 +             %end;
19016 +             profitloss=statvalue;
19017 +            %end;
19018 +            %else %do;
19019 +             %if &em_profitflag ne 0 %then %do;
19020 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19020!+;
19021 +                profitloss=ALTERNATIVE_PROFIT;
19022 +             %end;
19023 +             %if &em_lossflag ne 0 %then %do;
19024 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19025 +                profitloss=ALTERNATIVE_LOSS;
19026 +             %end;
19027 +            %end;
19028 +            output;
19029 +          end;
19030 +        %end;
19031 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19032 +          if strip(CATEGORY) = "&targetevent" then do;
19033 +            %if &validFlag eq N %then %do;
19034 +             profitloss=statvalue;
19035 +            %end;
19036 +            %else %do;
19037 +             %if &em_profitflag ne 0 %then %do;
19038 +                profitloss=ALTERNATIVE_PROFIT;
19039 +             %end;
19040 +             %if &em_lossflag ne 0 %then %do;
19041 +                profitloss=ALTERNATIVE_LOSS;
19042 +             %end;
19043 +            %end;
19044 +            output;
19045 +          end;
19046 +        %end;
19047 +      run;
19048 +    %end;
19050 +    data tempprob(keep= node probtext);
19051 +      length probtext $800;
19052 +      retain probtext;
19053 +      set tempprob ;
19054 +      by node;
19056 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19057 +      %let probtype = &EM_PROPERTY_TARGET;
19058 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19059 +        %let probtype = ALL;
19060 +      %end;
19062 +      %if "&probtype" eq "ALL" %then %do;
19063 +        if first.node then do;
19064 +          %if &validFlag eq N %then %do;
19065 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19066 +          %end;
19067 +          %else %do;
19068 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19069 +          %end;
19070 +        end;
19071 +        else if last.node then do;
19072 +          %if &validFlag eq N %then %do;
19073 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19074 +          %end;
19075 +          %else %do;
19076 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19077 +          %end;
19078 +          output;
19079 +        end;
19080 +        else do;
19081 +          %if &validFlag eq N %then %do;
19082 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19083 +          %end;
19084 +          %else %do;
19085 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19086 +          %end;
19087 +        end;
19088 +      %end;
19089 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19090 +        if strip(CATEGORY) = "&targetevent" then do;
19091 +          %if &validFlag eq N %then %do;
19092 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19093 +          %end;
19094 +          %else %do;
19095 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19096 +          %end;
19097 +          output;
19098 +        end;
19099 +      %end;
19100 +      %else %if "&probtype" eq "NONE" %then %do;
19101 +        if last.node then do;
19102 +          output;
19103 +        end;
19104 +      %end;
19105 +    run;
19106 +  %end;
19108 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19110 +  %let oldexists=0;
19111 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19112 +     data old_tree_plot;
19113 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19114 +        rename nodecolor=oldnodecolor;
19115 +     run;
19117 +     proc sort data=old_tree_plot;
19118 +        by node;
19119 +     run;
19121 +     %let oldexists=1;
19122 +  %end;
19124 +  data &EM_USER_TREE_PLOT;
19125 +    length textall $800;
19126 +    merge tempoutnodes temptargetused
19128 +    %if &em_intTarget eq Y %then %do;
19129 +      tempinterval
19130 +    %end;
19132 +    %if &em_classTarget eq Y %then %do;
19134 +      %if &validFlag eq N %then %do;
19135 +        tempn(rename=(statvalue=N))
19136 +      %end;
19137 +      %else %do;
19138 +        tempn
19139 +      %end;
19141 +      temppredict tempprob
19143 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19144 +        tempprofittext
19145 +      %end;
19146 +    %end;
19147 +    ;
19148 +    by node;
19150 +    /* build nodetext based on user selection */
19151 +    textall="";
19153 +    %if &em_intTarget eq Y %then %do;
19154 +    if tarlevel="INTERVAL" then do;
19155 +      /* Nodeid */
19156 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19157 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19158 +      %end;
19160 +      /* Target identifier if multiple targets are used */
19161 +      %if "&multipleTar" eq "Y" %then %do;
19162 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19163 +      %end;
19165 +      %if &validFlag eq Y %then %do;
19166 +         /* Column labels displayed in validflag eq Y only */
19167 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19168 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19168!+noquote ))";
19169 +         %end;
19171 +         /* Average values */
19172 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19173 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19174 +         %end;
19176 +         /* RASE */
19177 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19178 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19179 +         %end;
19181 +         /* Count */
19182 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19183 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19184 +         %end;
19185 +      %end;
19186 +      %else %do;
19187 +         /* Average values */
19188 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19189 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19190 +         %end;
19192 +         /* RASE */
19193 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19194 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19195 +         %end;
19197 +         /* Count */
19198 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19199 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19200 +         %end;
19201 +      %end;
19203 +      /* nodecolor */
19204 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19205 +        nodecolor=PREDICTION;
19206 +      %end;
19207 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19208 +        nodecolor=RASE;
19209 +      %end;
19210 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19211 +        nodecolor=1;
19212 +      %end;
19214 +    end;
19215 +    %end;
19216 +    %if &em_classTarget eq Y %then %do;
19217 +    if tarlevel^="INTERVAL" then  do;
19219 +      /* Nodeid */
19220 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19221 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19222 +      %end;
19223 +      /* Target identifier if multiple targets are used */
19224 +      %if "&multipleTar" eq "Y" %then %do;
19225 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19226 +      %end;
19228 +      /* Predicted values */
19229 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19230 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19231 +      %end;
19233 +      /* Column labels displayed in validflag eq Y only */
19234 +      %if "&ValidFlag" eq "Y" %then %do;
19235 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19236 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19236!+noquote ))";
19237 +        %end;
19238 +      %end;
19240 +      /* Target Values */
19241 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19242 +        textall=strip(textall)||"0A"x||strip(probtext);
19243 +      %end;
19245 +      /* include profit or loss for all target levels */
19246 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19247 +        textall=strip(textall)||"0A"x||strip(profittext);
19248 +      %end;
19250 +      %if &validFlag eq N %then %do;
19251 +        /* Percent Correct */
19252 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19253 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19254 +        %end;
19256 +         /* Count */
19257 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19258 +          %if "&adjusted" eq "N" %then %do;
19259 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19260 +          %end;
19261 +          %else %do;
19262 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19263 +          %end;
19264 +         %end;
19265 +      %end;
19266 +      %else %do;
19267 +        /* Percent Correct */
19268 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19269 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19270 +        %end;
19272 +         /* Count */
19273 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19274 +          %if "&adjusted" eq "N" %then %do;
19275 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19276 +          %end;
19277 +          %else %do;
19278 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19279 +          %end;
19280 +         %end;
19281 +      %end;
19283 +      /* nodecolor */
19284 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19285 +       %if &multipleTar ne Y %then %do;
19286 +        nodecolor=&predTarget;
19287 +       %end;
19288 +       %else %do;
19289 +         nodecolor=percentcorrect;
19290 +       %end;
19291 +      %end;
19292 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19293 +        nodecolor=percentcorrect;
19294 +      %end;
19295 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19296 +        nodecolor=1;
19297 +      %end;
19298 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19299 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19300 +          nodecolor=percentcorrect;
19301 +        %end;
19302 +        %else %do;
19303 +          nodecolor=profitloss;
19304 +        %end;
19305 +      %end;
19307 +    end;
19308 +    %end;
19309 +    %if &em_intTarget eq Y %then %do;
19310 +     drop  PREDICTION  TARGET TARLEVEL
19311 +     %if &ValidFlag eq Y %then %do;
19312 +         VPREDICTION
19313 +     %end;
19314 +     ;
19315 +    %end;
19316 +    %if &em_classTarget eq Y %then %do;
19317 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19318 +     %if &ValidFlag eq Y %then %do;
19319 +         VSTATVALUE
19320 +     %end;
19321 +     ;
19322 +    %end;
19324 +  run;
19326 +  /* add leaf index information to plotds - based on primary target only*/
19327 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19328 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19329 +      set &EM_USER_OUTSTATS;
19330 +      if ((statname="PROBABILITY"
19331 +      %if &validexist %then %do;
19332 +       or statname="VALID: PROBABILITY"
19333 +      %end;
19334 +      ) AND (CATEGORY="&TARGETEVENT")
19335 +      %if "&multipleTar" eq "Y" %then %do;
19336 +        AND (Target="%EM_TARGET")
19337 +      %end;
19338 +      );
19339 +    run;
19341 +    %if &validexist %then %do;
19342 +      proc sort data=tempprob; by node; run;
19343 +      %let vpredTarget = V%substr(&predTarget, 2);
19344 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19345 +         by node;
19346 +         id statname;
19347 +      run;
19348 +    %end;
19349 +  %end;
19350 +  %else %do;
19351 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19352 +      set &EM_USER_OUTSTATS;
19353 +      if ((statname="PREDICTION"
19354 +      %if &validexist %then %do;
19355 +       or statname="VALID: PREDICTION"
19356 +      %end;
19357 +      )
19358 +      %if "&multipleTar" eq "Y" %then %do;
19359 +        AND (Target="%EM_TARGET")
19360 +      %end;
19361 +      );
19362 +    run;
19363 +    %if &validexist %then %do;
19364 +      proc sort data=tempprob; by node; run;
19365 +      %let vpredTarget = V%substr(&predTarget, 2);
19366 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19367 +         by node;
19368 +         id statname;
19369 +      run;
19370 +    %end;
19371 +  %end;
19373 +  proc sort data=tempprob; by node; run;
19374 +  data tempoutnodes;
19375 +    merge tempoutnodes tempprob;
19376 +    by node;
19377 +  run;
19379 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19380 +  data tempnodes;
19381 +    retain traintotal validtotal;
19382 +    set tempnodes(where=(leaf ne . ));
19383 +    tprob=round(&predTarget, .01);
19384 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19385 +      percevent_train=round(tprob*100, .01);
19386 +    %end;
19387 +    %else %do;
19388 +      percevent_train=tprob;
19389 +    %end;
19391 +    perc_train=round((n/traintotal)*100, 0.01);
19392 +    /* leafwidth already has a *10 multiplier */
19393 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19395 +    %if &validexist %then %do;
19396 +      %let vpredTarget = V%substr(&predTarget,2);
19397 +      vprob=round(&vpredTarget, .01);
19398 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19399 +        percevent_valid=round(vprob*100, .01);
19400 +      %end;
19401 +      %else %do;
19402 +        percevent_valid=vprob;
19403 +      %end;
19404 +      perc_valid=round((vn/validtotal)*100, .01);
19405 +    %end;
19407 +    index=_N_;
19408 +    keep node index tprob perc_train percevent_train
19409 +    %if &validexist %then %do;
19410 +        vprob percevent_valid perc_valid
19411 +    %end;
19412 +    ;
19413 +  run;
19414 +  proc sort data=tempnodes; by node; run;
19415 +  data &EM_USER_TREE_PLOT;
19416 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19417 +    by node;
19418 +    if missing(node) then delete;
19419 +    %if &oldexists %then %do;
19420 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19421 +      drop oldnodecolor;
19422 +    %end;
19423 +    abovetext = compbl(abovetext);
19425 +    /* add variable labels */
19426 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19427 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19428 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19429 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19430 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19431 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19433 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19434 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19435 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19436 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19437 +          %end;
19438 +          %else %do;
19439 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19440 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19441 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19442 +          %end;
19443 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19445 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19446 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19447 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19448 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19449 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19450 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19451 +          %end;
19452 +          %else %do;
19453 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19454 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19455 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19456 +          %end;
19457 +    ;
19458 +  run;
19460 +  /* delete temporary tables */
19461 +  proc datasets lib=work nolist;
19462 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19463 +  run;
19465 +%mend em_tree_makePlotDs;
19469 +%macro em_tree_report;
19471 +   /* report properties */
19472 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19473 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19474 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19475 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19476 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19477 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19478 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19479 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19480 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19481 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19482 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19483 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19484 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19486 +   %let validexist=0;
19487 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19488 +     %let validexist=1;
19489 +   %end;
19491 +   /* determine if multiple targets will be processed */
19492 +   %let em_tree_multipleTargets=N;
19493 +   %let em_tree_numTarget=1;
19494 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19495 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19496 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19497 +         %let em_tree_multipleTargets=N;
19498 +      %end;
19499 +      %else %do;
19500 +        data _null_;
19501 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19502 +          if eof then
19503 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19504 +        run;
19506 +        %if &em_tree_numTarget gt 1 %then %do;
19507 +           %let em_tree_multipleTargets=Y;
19508 +        %end;
19509 +     %end;
19510 +   %end;
19512 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19514 +   /* variable importance */
19515 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19516 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19518 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19519 +     /* and the columns may not be generated                                                                                 */
19520 +     %let em_tree_cvexists=;
19521 +     %let em_tree_surrexists=.;
19522 +     data _null_;
19523 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19524 +       if eof then do ;
19525 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19526 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19527 +       end;
19528 +     run;
19530 +     data &EM_USER_OUTIMPORT;
19531 +         set &EM_USER_OUTIMPORT;
19532 +         /* format columns based on Precison value specified */
19533 +         format importance 15.&EM_PROPERTY_PRECISION
19534 +              %if &validexist %then %do;
19535 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19536 +              %end;
19537 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19538 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19539 +              %end;
19540 +         ;
19541 +     run;
19543 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19544 +     proc print data=&EM_USER_OUTIMPORT
19545 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19546 +          (where=((nrules>0) OR (nsurrogates>0)))
19547 +        %end;
19548 +        %else %do;
19549 +           (where=(nrules>0))
19550 +        %end;
19551 +        label noobs
19552 +        ;
19553 +     run;
19554 +     title10;
19556 +   %end;
19558 +   /* Sequence */
19559 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19560 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19561 +   data _null_ ;
19562 +      set &EM_USER_outseq (obs=2) end=eof ;
19563 +      if eof then do ;
19564 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19565 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19566 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19567 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19568 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19569 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19570 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19571 +      end;
19572 +    run;
19574 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19575 +      data &EM_USER_OUTSEQ;
19576 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19577 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19578 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19579 +           _XMISC_=_VMISC_
19580 +        %end;
19581 +        %if "&em_tree_aprof" ne "."  %then %do;
19582 +           _XAPROF_=_VAPROF_
19583 +           _XPROF_ = _VPROF_
19584 +        %end;
19585 +        %if "&em_tree_aloss" ne "."  %then %do;
19586 +           _XALOSS_=_VALOSS_
19587 +        %end;
19588 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19589 +           _XPASE_ = _VPASE_
19590 +           _XPMISC_ = _VPMISC_
19591 +        %end;
19593 +        ));
19594 +     %end;
19595 +     %else %do;
19596 +        set &EM_USER_OUTSEQ;
19597 +     %end;
19599 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19600 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19601 +            _MISC_   15.&EM_PROPERTY_PRECISION
19602 +         %end;
19603 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19604 +            _PASE_  15.&EM_PROPERTY_PRECISION
19605 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19606 +         %end;
19607 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19608 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19609 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19610 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19611 +            %end;
19612 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19613 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19614 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19615 +            %end;
19616 +         %end;
19617 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19618 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19619 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19620 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19621 +            %end;
19622 +         %end;
19623 +         %if "&em_tree_seq" ne "." %then %do;
19624 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19625 +         %end;
19626 +         %if "&em_tree_vseq" ne "." %then %do;
19627 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19628 +         %end;
19629 +         %if "&em_tree_aprof" ne "." %then %do;
19630 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19631 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19632 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19633 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19634 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19635 +           %end;
19636 +         %end;
19637 +         %else %if "&em_tree_aloss" ne "." %then %do;
19638 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19639 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19640 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19641 +           %end;
19642 +         %end;
19643 +      ;
19644 +    run;
19645 +   %end;
19647 +   /* Observation Based Importance */
19648 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19650 +      /* need to check for 0 obs */
19651 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19652 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19653 +      %let rc=%sysfunc(close(&dsid));
19655 +      %if &onobs %then %do;
19656 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19657 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19659 +         data &EM_USER_OUTOBSIMP;
19660 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19661 +           if _a;
19662 +           by _INPUT1_;
19663 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19664 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19665 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19666 +                   %end;
19667 +                   ;
19668 +         run;
19669 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19670 +      %end;
19671 +   %end;
19673 +  %end;
19675 +  /* create dataset to support tree diagram and icicle plot */
19676 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19677 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19679 +  /* display tree diagram */
19680 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19681 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19683 +  /* display icicle diagram */
19684 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19685 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19687 +  /* Leaf Statistics Plot */
19688 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19690 +  /* print leaf information to output window */
19691 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19693 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19694 +       by descending N;
19695 +     run;
19697 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19698 +     %local vn;
19699 +     data _null_;
19700 +       set t (obs=2) end=eof;
19701 +       if eof then do;
19702 +         call symput("vn", strip(put(vn, best.)));
19703 +       end;
19704 +     run;
19706 +     data t;
19707 +       set t;
19708 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19709 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19710 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19711 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19712 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19713 +       %end;
19714 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19715 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19716 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19717 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19718 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19719 +          %end;
19720 +       %end;
19721 +       ;
19722 +     run;
19724 +     /* determine if rase is found in t */
19725 +    %let dsid=%sysfunc(open(t,i));
19726 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19727 +    %let rc=%sysfunc(close(&dsid));
19729 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19730 +     proc print data=t noobs label;
19731 +       where tprob ne .;
19732 +       var node depth N tprob
19733 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19734 +         %if "&vn" ne "." %then %do;
19735 +           VN
19736 +         %end;
19737 +         vprob
19738 +       %end;
19739 +       %if &raseexists %then %do;
19740 +            RASE
19741 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19742 +              VRASE
19743 +            %end;
19744 +       %end;
19745 +       ;
19746 +     run;
19747 +     title10;
19748 +  %end;
19750 +  /* create plots that are done during training of node */
19751 +  /* display iterative plot, including reference line */
19752 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19753 +   /* %if &nleaves eq  %then %do; */
19754 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19755 +      data _null_;
19756 +        set &EM_USER_OUTTOPOLOGY end=eof;
19757 +        if eof then do;
19758 +          call symput('nleaves', LEAF);
19759 +        end;
19760 +      run;
19761 +   /* %end; */
19763 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19764 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19765 +  %end;
19767 +  /* display leaf statistics */
19768 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19770 +  /* stats by node if multiple targets = Y */
19771 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19772 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19773 +    data &EM_USER_OUTSTATS;
19774 +      set &EM_USER_OUTSTATS;
19776 +     * if STATNAME="TARGET" then delete;
19777 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19778 +      drop leaf;
19779 +    run;
19780 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19782 +  %end;
19783 +  %else %do;
19784 +    /* add outstats and outdescribe to spk but not results */
19785 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19786 +  %end;
19788 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 38 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 38 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 49 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TRUE');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 20 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 34 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 877 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 17 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 34 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 17 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 17 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 245 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 245 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 210 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 245 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 245 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 245 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 245 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 245 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 245 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 35 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 35 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: There were 70 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 70 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: There were 35 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 35 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 35 observations read from the data set WORK.TEMPN.
NOTE: There were 35 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 35 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 35 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 18 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 18 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 35 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 35 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 35 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
19789
19790  *------------------------------------------------------------*;
19791  * End REPORT: Tree;
19792  *------------------------------------------------------------*;
 
19793  /* Reset EM Options */
19794  options formchar="|----|+|---+=|-/\<>*";
19795  options nocenter ls=256 ps=10000;
19796  goptions reset=all device=GIF NODISPLAY;
 
19797  proc sort data=WORK.EM_USER_REPORT;
19798  by ID VIEW;
19799  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
19800  proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
19801  by NAME;
19802  run;
 
NOTE: There were 46 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 46 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
19803  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19804  by NAME;
19805  run;
 
NOTE: There were 46 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 46 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
19806  data WORK.ASSESS_META;
19807  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19808  by NAME;
19809  run;
 
NOTE: There were 46 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 46 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 46 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19810  data EM_temp_assessMeta;
19811  set EMWS1.Tree_CMeta_TRAIN;
19812  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19813  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19814  data EM_temp_assessdata;
19815  set EMWS1.Tree_TRAIN(keep=
19816  F_audience_score_positive
19817  I_audience_score_positive
19818  P_audience_score_positiveFalse
19819  P_audience_score_positiveTrue
19820  Q_audience_score_positiveFalse
19821  Q_audience_score_positiveTrue
19822  R_audience_score_positiveFalse
19823  R_audience_score_positiveTrue
19824  U_audience_score_positive
19825  V_audience_score_positiveFalse
19826  V_audience_score_positiveTrue
19827  _WARN_
19828  audience_score_positive
19829  );
19830  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.25 seconds
 
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2438 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.37 seconds
      cpu time            0.28 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24111   data EM_temp_assessMeta;
24112   set EMWS1.Tree_CMeta_TRAIN;
24113   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24114   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
24115   data EM_temp_assessdata;
24116   set EMWS1.Tree_VALIDATE(keep=
24117   F_audience_score_positive
24118   I_audience_score_positive
24119   P_audience_score_positiveFalse
24120   P_audience_score_positiveTrue
24121   Q_audience_score_positiveFalse
24122   Q_audience_score_positiveTrue
24123   R_audience_score_positiveFalse
24124   R_audience_score_positiveTrue
24125   U_audience_score_positive
24126   V_audience_score_positiveFalse
24127   V_audience_score_positiveTrue
24128   _WARN_
24129   audience_score_positive
24130   );
24131   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.21 seconds
 
NOTE: There were 2440 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 2440 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2440 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.33 seconds
      cpu time            0.26 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28421   %let _cn = %sysfunc(getoption(CENTER));
28422   options nocenter;
28423   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
28424   var STAT LABEL TRAIN
28425   VALIDATE
28426   ;
28427   by TARGET TARGETLABEL;
28428   title9 ' ';
28429   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28430   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28431   title10;
28432   options &_cn;
 
28433   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
28434   by DATAROLE TARGET TARGETLABEL;
28435   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
28436   %let _cn = %sysfunc(getoption(CENTER));
28437   options nocenter;
28438   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
28439   var from into pct_row pct_col count percent
28440   ;
28441   by DATAROLE TARGET TARGETLABEL;
28442   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28443   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28444   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28445   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28446   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28447   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28448   where _TYPE_='PREDICTION';
28449   title9 ' ';
28450   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28451   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28452   title9;
28453   title10;
28454   options &_cn;
 
28455   %let _cn = %sysfunc(getoption(CENTER));
28456   options nocenter;
28457   data EMWS1.Tree_EMEVENTREPORT;
28458   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28458 !  8;
28459   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28459 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28459 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28459 ! FALSEEVENT
28460   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28460 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28460 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28461      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28462   FALSEEVENT=0;
28463   FALSENEVENT=0;
28464   TRUEEVENT=0;
28465   TRUENEVENT=0;
28466   set EMWS1.Tree_EMEVENTREPORT;
28467   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28468   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
28469   title9 ' ';
28470   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28471   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28472   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28473   title10;
28474   options &_cn;
 
28475   proc datasets library=EMWS1 nolist;
28476   modify Tree_EMRANK;
28477   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28478   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28479   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
28480   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
28481   %let _cn = %sysfunc(getoption(CENTER));
28482   options nocenter;
28483   proc print data=EMWS1.Tree_EMRANK label noobs;
28484   var
28485   decile gain lift liftc resp respc N _meanP_;
28486   by
28487   notsorted DATAROLE
28488   notsorted TARGET
28489   notsorted TARGETLABEL
28490   ;
28491   title9 ' ';
28492   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28493   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28494   title10;
28495   options &_cn;
 
28496   proc datasets library=EMWS1 nolist;
28497   modify Tree_EMSCOREDIST;
28498   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28499   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28500   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
28501   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
