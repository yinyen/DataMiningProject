*------------------------------------------------------------*
* Report Log
Date:                November 17, 2019
Time:                18:41:04
*------------------------------------------------------------*
18318  data EMWS1.Tree_EMOUTFIT;
18319  set EMWS1.Tree_EMOUTFIT;
18320  length TargetLabel $200;
18321  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18322  run;

NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

18323  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18324  by TARGET;
18325  run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

18326  %let _EMwarndup = 0;
18327  %let _EMtargetdup =;
18328  %let _EMASEtargetdup =;
18329  data _null_;
18330  set EMWS1.Tree_EMOUTFIT;
18331  if .<_ASE_<0.000001 then do;
18332  call symput('_EMwarndup', '1');
18333  call symput('_EMtargetdup', target);
18334  call symput('_EMASEtargetdup', put(_ASE_, best.));
18335  end;
18336  run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18337  %let EMEXCEPTIONSTRING=;
18338  *------------------------------------------------------------*;
18339  * REPORT: Tree;
18340  *------------------------------------------------------------*;
18341  %let EM_ACTION = REPORT;
18342  %let syscc = 0;
18343  %macro main;
18344  
18345    %if %upcase(&EM_ACTION) = CREATE %then %do;
18346      filename temp catalog 'sashelp.emmodl.tree_create.source';
18347      %include temp;
18348      filename temp;
18349  
18350      %em_tree_create;
18351    %end;
18352  
18353     %else
18354     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18355  
18356         filename temp catalog 'sashelp.emmodl.tree_train.source';
18357         %include temp;
18358         filename temp;
18359         %em_tree_train;
18360     %end;
18361  
18362    %else
18363    %if %upcase(&EM_ACTION) = SCORE %then %do;
18364      filename temp catalog 'sashelp.emmodl.tree_score.source';
18365      %include temp;
18366      filename temp;
18367  
18368      %em_tree_score;
18369  
18370    %end;
18371  
18372    %else
18373    %if %upcase(&EM_ACTION) = REPORT %then %do;
18374  
18375         filename temp catalog 'sashelp.emmodl.tree_report.source';
18376         %include temp;
18377         filename temp;
18378  
18379         %em_tree_report;
18380     %end;
18381  
18382    %else
18383    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18384  
18385         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18386         %include temp;
18387         filename temp;
18388         %EM_TREE_OPENTREEVIEWER;
18389  
18390     %end;
18391  
18392    %else
18393    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18394  
18395         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18396         %include temp;
18397         filename temp;
18398         %EM_TREE_CLOSETREEVIEWER;
18399  
18400     %end;
18401  
18402  
18403     %doendm:
18404  %mend main;
18405  
18406  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18408 +%macro em_tree_makePlotDs( multipleTar= );
18410 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18411 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18412 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18413 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18415 +  /* determine if validation statistics will be displayed */
18416 +  %let validflag=N;
18417 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18418 +    /* determine if validation data exists */
18419 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18420 +      %let validflag=Y;
18421 +    %end;
18422 +  %end;
18424 +   /* retrieve name of decmeta even in presence of multiple targets */
18425 +   %let decmeta = ;
18426 +   %if &EM_DEC_DECMETA eq %then %do;
18427 +     data _Target;
18428 +       set &em_data_variableset;
18429 +       where ROLE='TARGET' and USE in('D', 'Y');
18430 +       keep NAME;
18431 +     run;
18432 +     proc sort data=_Target;
18433 +       by NAME;
18434 +     run;
18435 +     proc sort data=EM_TARGETDECINFO;
18436 +       by TARGET;
18437 +     run;
18438 +     data _Target;
18439 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18440 +       by NAME;
18441 +       if _a then do;
18442 +         call symput('decmeta', trim(DECMETA));
18443 +       end;
18444 +     run;
18445 +     proc delete data=_Target;run;
18446 +   %end;
18447 +   %else %let decmeta = &EM_DEC_DECMETA;
18450 +  /* retrieve targetEvent from decmeta */
18451 +  %let targetEvent=;
18452 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18453 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18454 +      data _null_;
18455 +       set &DECMETA(where=(_TYPE_="TARGET"));
18456 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18457 +      run;
18458 +    %end;
18459 +  %end;
18461 +  /* retrieve predicted var for targetEvent from decmeta */
18462 +  %let predTarget=;
18463 +  %let predLvl=;
18464 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18465 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18466 +      data _null_;
18467 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18468 +       call symput('predTarget', strip(VARIABLE));
18469 +       call symput('predLvl', strip(LEVEL));
18470 +      run;
18471 +    %end;
18472 +  %end;
18473 +  %else %do;
18474 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18475 +      data _null_;
18476 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18477 +       call symput('predTarget', strip(VARIABLE));
18478 +      run;
18479 +    %end;
18480 +  %end;
18482 +  /* create BelowText value */
18483 +  data belowtext;
18484 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18485 +    keep node belowtext;
18486 +  run;
18488 +  /* relace belowtext with variable label if it exists */
18489 +  data belowtext2;
18490 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18491 +    keep node belowtextlbl;
18492 +  run;
18494 +  proc sort data=belowtext; by node; run;
18495 +  proc sort data=belowtext2; by node; run;
18497 +  data belowtext;
18498 +    merge belowtext belowtext2(in=_a);
18499 +    by node;
18500 +    if _a then belowtext=belowtextlbl;
18501 +    keep node belowtext;
18502 +  run;
18504 +  /* create AboveText value */
18505 +  data abovetext;
18506 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18507 +  run;
18508 +  proc sort data=abovetext; by node numeric_value; run;
18510 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18511 +  data abovetext;
18512 +    set abovetext(rename=(node=parent));
18513 +    by parent numeric_value;
18514 +    retain abovetext tempstring flag branch origval origchar ;
18515 +    length abovetext $256;
18516 +    length tempstring origchar $64;
18518 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18519 +      if first.parent then do;
18520 +        if missing(character_value) then do;
18521 +          numeric_value = round(numeric_value, &sp_precision);
18522 +          abovetext = "< "||strip(NUMERIC_VALUE);
18523 +          branch = 1;
18524 +          origval = numeric_value;
18525 +          output;
18526 +        end;
18527 +        else do;
18528 +          abovetext = "< "||strip(CHARACTER_VALUE);
18529 +          branch = 1;
18530 +          origchar = character_value;
18531 +          output;
18532 +        end;
18534 +        if first.parent AND last.parent then do;
18535 +          if missing(character_value) then do;
18536 +            numeric_value = round(numeric_value, &sp_precision);
18537 +            branch = branch + 1;
18538 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18539 +            output;
18540 +          end;
18541 +          else do;
18542 +            branch = branch + 1;
18543 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18544 +            output;
18545 +          end;
18546 +        end;
18547 +      end;
18548 +      else if last.parent then do;
18549 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18550 +          if missing(character_value) then do;
18551 +            numeric_value = round(numeric_value, &sp_precision);
18552 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18553 +          end;
18554 +          else do;
18555 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18556 +          end;
18557 +          branch = branch + 1;
18558 +          output;
18560 +          if missing(character_value) then do;
18561 +            numeric_value = round(numeric_value, &sp_precision);
18562 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18563 +          end;
18564 +          else do;
18565 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18566 +          end;
18567 +          branch = branch + 1;
18568 +          output;
18569 +        end;
18570 +        else do;
18571 +          if missing(character_value) then do;
18572 +            numeric_value = round(numeric_value, &sp_precision);
18573 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18574 +          end;
18575 +          else do;
18576 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18577 +          end;
18578 +          branch = branch + 1;
18579 +          output;
18580 +        end;
18581 +      end;
18582 +      else do;
18583 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18584 +          if missing(character_value) then do;
18585 +            numeric_value = round(numeric_value,&sp_precision);
18586 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18587 +            origval = numeric_value;
18588 +          end;
18589 +          else do;
18590 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18591 +            origchar = character_value;
18592 +          end;
18593 +          branch = branch + 1;
18594 +          output;
18596 +        end;
18597 +        else do;
18598 +          if missing(character_value) then do;
18599 +            numeric_value = round(numeric_value, &sp_precision);
18600 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18601 +            origval = numeric_value;
18602 +          end;
18603 +          else do;
18604 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18605 +            origval = character_value;
18606 +          end;
18607 +          branch = branch + 1;
18608 +          output;
18609 +        end;
18610 +      end;
18611 +    end;
18612 +    else do;
18613 +       if first.numeric_value then do;
18614 +         flag = 0;
18615 +         abovetext = strip(CHARACTER_VALUE);
18616 +         branch = numeric_value;
18617 +         if first.numeric_value AND last.numeric_value then do;
18618 +           output;
18619 +         end;
18620 +       end;
18621 +       else if last.numeric_value then do;
18622 +         if flag=0 then do;
18623 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18624 +           length = length(strip(tempstring));
18625 +           if length < 32 then do;
18626 +             abovetext = strip(tempstring);
18627 +           end;
18628 +           else do;
18629 +             abovetext = strip(abovetext)||", ...";
18630 +             flag = 1;
18631 +           end;
18632 +         end;
18633 +         branch = numeric_value;
18634 +         output;
18635 +       end;
18636 +       else do;
18637 +         if flag=0 then do;
18638 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18639 +           length = length(strip(tempstring));
18640 +           if length < 32 then do;
18641 +             abovetext = strip(tempstring);
18642 +           end;
18643 +           else do;
18644 +             abovetext = strip(abovetext)||", ...";
18645 +             flag=1;
18646 +           end;
18647 +         end;
18648 +         branch = numeric_value;
18649 +       end;
18650 +    end;
18651 +    keep parent branch abovetext;
18652 +  run;
18654 +  /* MIssing value to abovetext */
18655 +  data tempmissing;
18656 +    set &EM_USER_OUTRULES;
18657 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18658 +    rename node=parent numeric_value=branch character_value=misschar;
18659 +  run;
18662 +  proc sort data=abovetext; by parent branch; run;
18663 +  proc sort data=tempmissing; by parent branch; run;
18664 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18666 +  data tempoutnodes;
18667 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18668 +    by parent branch;
18669 +    length traintotal validtotal 8;
18670 +    retain traintotal validtotal;
18672 +    if _a then do;
18673 +      if ^MISSING(abovetext) then do;
18674 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18675 +      end;
18676 +      else do;
18677 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18678 +      end;
18679 +    end;
18680 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18682 +    if node=1 then do;
18683 +      traintotal = N;
18684 +      validtotal=VN;
18685 +    end;
18687 +    drop role rank stat misschar belowtext;
18688 +  run;
18689 +  proc sort data=tempoutnodes; by node; run;
18690 +  proc sort data=belowtext; by node; run;
18692 +  data tempoutnodes;
18693 +    merge tempoutnodes belowtext;
18694 +    by node;
18696 +  run;
18698 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18699 +  %let adjusted = N;
18700 +  %let npriors = 0;
18701 +  data _null_ ;
18702 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18703 +    if eof then do ;
18704 +      call symput("npriors" , strip(put(_N_,best.))) ;
18705 +    end;
18706 +  run;
18707 +  %if &npriors gt 0 %then %let adjusted=Y;
18710 +  /* create a table with targetUsed and targetLevel columns for each node */
18711 +  data temptarmeta;
18712 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18713 +    %if &multipleTar eq N %then %do;
18714 +      AND USE in ('D', 'Y')
18715 +    %end;
18716 +    ));
18717 +    length TARGET $32;
18718 +    Target=name;
18719 +    keep target level;
18720 +  run;
18722 +  %if &multipleTar eq Y %then %do;
18723 +    data temptargetused;
18724 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18725 +      keep node target;
18726 +    run;
18727 +    proc sort data=temptargetused; by target; run;
18728 +    proc sort data=temptarmeta; by target; run;
18729 +    data temptargetused;
18730 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18731 +      by target;
18732 +      if _a and _b;
18733 +    run;
18734 +  %end;
18735 +  %else %do;
18736 +    data temptargetused;
18737 +      set &EM_USER_OUTSTATS;
18738 +      length target $32 tarlevel $10;
18739 +      target="%EM_TARGET";
18740 +      tarlevel="%EM_TARGET_LEVEL";
18741 +      keep node target tarlevel;
18742 +    run;
18743 +    proc sort data=temptargetused nodupkey; by node; run;
18744 +  %end;
18746 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18747 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18748 +  proc sort data=temptargetused; by node; run;
18751 +  /* create tables for all interval targets as well as all class targets */
18752 +  data tempinterval tempclass;
18753 +    merge tempoutstats temptargetused( rename=(target=targetused));
18754 +    by node;
18755 +    %if "&multipleTar" eq "Y" %then %do;
18756 +      if ((missing(Target)) OR (target=targetused ));
18757 +    %end;
18759 +    if tarlevel="INTERVAL" then output tempinterval;
18760 +    else output tempclass;
18761 +  run;
18763 +  /* iniitalize intTarget and classTarget flags */
18764 +  %let em_intNobs =0;
18765 +  %let em_classNobs = 0;
18766 +  %let em_intTarget= N;
18767 +  %let em_classTarget= N;
18769 +  proc sql;
18770 +    reset noprint;
18771 +    select count(*) into :em_intNobs from tempinterval;
18772 +  quit;
18773 +  proc sql;
18774 +    reset noprint;
18775 +    select count(*) into :em_classNobs from tempclass;
18776 +  quit;
18778 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18779 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18781 +  /* retrieve all information for interval targets */
18782 +  %if &em_intTarget eq Y %then %do;
18784 +    /* determine if leaf variable exists */
18785 +    %let dsid=%sysfunc(open(tempinterval,i));
18786 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18787 +    %let rc=%sysfunc(close(&dsid));
18789 +    proc transpose data=tempinterval
18790 +      %if &leafexists %then %do;
18791 +        (drop=leaf)
18792 +      %end;
18793 +      %if &validexist %then %do;
18794 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18795 +      %end;
18796 +      %else %do;
18797 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18798 +      %end;
18799 +      by node;
18800 +      id statname;
18801 +    run;
18802 +    data tempinterval;
18803 +      set tempinterval;
18804 +      if missing(N) then delete;
18805 +    run;
18806 +  %end;
18808 +  /* retrieve all information for class targets */
18809 +  %if &em_classTarget eq Y %then %do;
18810 +    proc sort data=tempclass; by node category; run;
18811 +    %if &validflag eq N %then %do;
18812 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18813 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18814 +    %end;
18815 +    %else %do;
18816 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18817 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18818 +    %end;
18819 +      set tempclass;
18821 +      %if &validflag eq N %then %do;
18822 +        %if "&adjusted" eq "N" %then %do;
18823 +          if statname="N" then output tempn;
18824 +        %end;
18825 +        %else %do;
18826 +          if statname="NPRIORS" then output tempn;
18827 +        %end;
18828 +        else if statname="PREDICTION" then output temppredict;
18829 +        else if statname="PROBABILITY" then output tempprob;
18830 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18831 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18832 +      %end;
18833 +      %else %do;
18834 +        %if "&adjusted" eq "N" %then %do;
18835 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18836 +        %end;
18837 +        %else %do;
18838 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18839 +        %end;
18840 +        else if statname="PREDICTION" then output temppredict;
18841 +        else if statname="PROBABILITY" then output tempprob;
18842 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18843 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18844 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18845 +      %end;
18846 +    run;
18849 +    /* determine if profit/loss exists in tempprofit */
18850 +    %let em_profitflag=0;
18851 +    %let em_lossflag=0;
18852 +    proc sql;
18853 +      reset noprint;
18854 +      select count(*) into :em_profitflag from tempprofit;
18855 +    quit;
18856 +    proc sql;
18857 +      reset noprint;
18858 +      select count(*) into :em_lossflag from temploss;
18859 +    quit;
18861 +    %if &validFlag eq Y %then %do;
18862 +      proc transpose data=tempn
18863 +        %if "&adjusted" eq "N" %then %do;
18864 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18865 +        %end;
18866 +        %else %do;
18867 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18868 +        %end;
18869 +        by node;
18870 +        id statname;
18871 +      run;
18872 +      %if &em_profitflag ne 0 %then %do;
18873 +        proc transpose data=tempprofit out=tempprofit;
18874 +          by node category;
18875 +          id statname ;
18876 +        run;
18877 +      %end;
18878 +      %if &em_lossflag ne 0 %then %do;
18879 +        proc transpose data=temploss out=temploss;
18880 +          by node category;
18881 +          id statname ;
18882 +        run;
18883 +      %end;
18884 +      data tempprob;
18885 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18886 +        by node
18887 +        %if &multipleTar eq Y %then %do;
18888 +          target
18889 +        %end;
18890 +        category;
18891 +      run;
18892 +    %end;
18894 +    /* store percentcorrect value */
18895 +    data temppredict;
18896 +      merge tempprob temppredict(in=_a);
18897 +      by node category;
18898 +      if _a then do;
18899 +        percentCorrect = statvalue;
18900 +        %if &validFlag eq Y %then %do;
18901 +          vpercentCorrect= vstatvalue;
18902 +        %end;
18903 +      end;
18904 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18905 +      %if &validFlag eq Y %then %do;
18906 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18907 +      %end;
18908 +      ;
18909 +      if missing(percentCorrect) then delete;
18910 +      drop target;
18911 +    run;
18913 +    /* build profittext */
18914 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18915 +      data tempprofittext(keep= node profittext profitloss);
18916 +        length profittext $800 profitloss 8.;
18917 +        retain profittext profitloss;
18919 +        merge tempprob
18920 +        %if &em_profitflag ne 0 %then %do;
18921 +          tempprofit
18922 +        %end;
18923 +        %else %if &em_lossflag ne 0 %then %do;
18924 +          temploss
18925 +        %end;
18926 +        ;
18927 +        by node category;
18929 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18930 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18931 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18932 +          %let profittype = ALL;
18933 +        %end;
18935 +        /* create the profitloss variable for nodecolor if selected */
18936 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18938 +        %if "&profittype" eq "ALL" %then %do;
18939 +          if strip(CATEGORY)="&targetEvent" then do;
18940 +            profitloss=statvalue;
18941 +          end;
18942 +          if first.node then do;
18943 +            %if &validFlag eq N %then %do;
18944 +             %if &em_profitflag ne 0 %then %do;
18945 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18946 +             %end;
18947 +             %if &em_lossflag ne 0 %then %do;
18948 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18949 +             %end;
18950 +            %end;
18951 +            %else %do;
18952 +             %if &em_profitflag ne 0 %then %do;
18953 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18953!+;
18954 +             %end;
18955 +             %if &em_lossflag ne 0 %then %do;
18956 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18957 +             %end;
18958 +            %end;
18959 +          end;
18960 +          else if last.node then do;
18961 +            %if &validFlag eq N %then %do;
18962 +             %if &em_profitflag ne 0 %then %do;
18963 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18964 +             %end;
18965 +             %if &em_lossflag ne 0 %then %do;
18966 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18967 +             %end;
18968 +             /*if CATEGORY="&targetEvent" then do;
18969 +               profitloss=statvalue;
18970 +             end;*/
18971 +            %end;
18972 +            %else %do;
18973 +             %if &em_profitflag ne 0 %then %do;
18974 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18974!+14.&EM_PROPERTY_SPLITPRECISION);
18975 +                if CATEGORY="&targetEvent" then do;
18976 +                 profitloss=ALTERNATIVE_PROFIT;
18977 +                end;
18978 +             %end;
18979 +             %if &em_lossflag ne 0 %then %do;
18980 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18980!+14.&EM_PROPERTY_SPLITPRECISION);
18981 +                if CATEGORY="&targetEvent" then do;
18982 +                  profitloss=ALTERNATIVE_LOSS;
18983 +                end;
18984 +             %end;
18985 +            %end;
18986 +            output;
18987 +          end;
18988 +          else do;
18989 +            %if &validFlag eq N %then %do;
18990 +             %if &em_profitflag ne 0 %then %do;
18991 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18992 +             %end;
18993 +             %if &em_lossflag ne 0 %then %do;
18994 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18995 +             %end;
18996 +            %end;
18997 +            %else %do;
18998 +             %if &em_profitflag ne 0 %then %do;
18999 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18999!+14.&EM_PROPERTY_SPLITPRECISION);
19000 +             %end;
19001 +             %if &em_lossflag ne 0 %then %do;
19002 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19002!+14.&EM_PROPERTY_SPLITPRECISION);
19003 +             %end;
19004 +            %end;
19005 +          end;
19006 +        %end;
19007 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19008 +          if strip(CATEGORY) = "&targetevent" then do;
19009 +            %if &validFlag eq N %then %do;
19010 +             %if &em_profitflag ne 0 %then %do;
19011 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19012 +             %end;
19013 +             %if &em_lossflag ne 0 %then %do;
19014 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19015 +             %end;
19016 +             profitloss=statvalue;
19017 +            %end;
19018 +            %else %do;
19019 +             %if &em_profitflag ne 0 %then %do;
19020 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19020!+;
19021 +                profitloss=ALTERNATIVE_PROFIT;
19022 +             %end;
19023 +             %if &em_lossflag ne 0 %then %do;
19024 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19025 +                profitloss=ALTERNATIVE_LOSS;
19026 +             %end;
19027 +            %end;
19028 +            output;
19029 +          end;
19030 +        %end;
19031 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19032 +          if strip(CATEGORY) = "&targetevent" then do;
19033 +            %if &validFlag eq N %then %do;
19034 +             profitloss=statvalue;
19035 +            %end;
19036 +            %else %do;
19037 +             %if &em_profitflag ne 0 %then %do;
19038 +                profitloss=ALTERNATIVE_PROFIT;
19039 +             %end;
19040 +             %if &em_lossflag ne 0 %then %do;
19041 +                profitloss=ALTERNATIVE_LOSS;
19042 +             %end;
19043 +            %end;
19044 +            output;
19045 +          end;
19046 +        %end;
19047 +      run;
19048 +    %end;
19050 +    data tempprob(keep= node probtext);
19051 +      length probtext $800;
19052 +      retain probtext;
19053 +      set tempprob ;
19054 +      by node;
19056 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19057 +      %let probtype = &EM_PROPERTY_TARGET;
19058 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19059 +        %let probtype = ALL;
19060 +      %end;
19062 +      %if "&probtype" eq "ALL" %then %do;
19063 +        if first.node then do;
19064 +          %if &validFlag eq N %then %do;
19065 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19066 +          %end;
19067 +          %else %do;
19068 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19069 +          %end;
19070 +        end;
19071 +        else if last.node then do;
19072 +          %if &validFlag eq N %then %do;
19073 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19074 +          %end;
19075 +          %else %do;
19076 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19077 +          %end;
19078 +          output;
19079 +        end;
19080 +        else do;
19081 +          %if &validFlag eq N %then %do;
19082 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19083 +          %end;
19084 +          %else %do;
19085 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19086 +          %end;
19087 +        end;
19088 +      %end;
19089 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19090 +        if strip(CATEGORY) = "&targetevent" then do;
19091 +          %if &validFlag eq N %then %do;
19092 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19093 +          %end;
19094 +          %else %do;
19095 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19096 +          %end;
19097 +          output;
19098 +        end;
19099 +      %end;
19100 +      %else %if "&probtype" eq "NONE" %then %do;
19101 +        if last.node then do;
19102 +          output;
19103 +        end;
19104 +      %end;
19105 +    run;
19106 +  %end;
19108 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19110 +  %let oldexists=0;
19111 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19112 +     data old_tree_plot;
19113 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19114 +        rename nodecolor=oldnodecolor;
19115 +     run;
19117 +     proc sort data=old_tree_plot;
19118 +        by node;
19119 +     run;
19121 +     %let oldexists=1;
19122 +  %end;
19124 +  data &EM_USER_TREE_PLOT;
19125 +    length textall $800;
19126 +    merge tempoutnodes temptargetused
19128 +    %if &em_intTarget eq Y %then %do;
19129 +      tempinterval
19130 +    %end;
19132 +    %if &em_classTarget eq Y %then %do;
19134 +      %if &validFlag eq N %then %do;
19135 +        tempn(rename=(statvalue=N))
19136 +      %end;
19137 +      %else %do;
19138 +        tempn
19139 +      %end;
19141 +      temppredict tempprob
19143 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19144 +        tempprofittext
19145 +      %end;
19146 +    %end;
19147 +    ;
19148 +    by node;
19150 +    /* build nodetext based on user selection */
19151 +    textall="";
19153 +    %if &em_intTarget eq Y %then %do;
19154 +    if tarlevel="INTERVAL" then do;
19155 +      /* Nodeid */
19156 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19157 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19158 +      %end;
19160 +      /* Target identifier if multiple targets are used */
19161 +      %if "&multipleTar" eq "Y" %then %do;
19162 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19163 +      %end;
19165 +      %if &validFlag eq Y %then %do;
19166 +         /* Column labels displayed in validflag eq Y only */
19167 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19168 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19168!+noquote ))";
19169 +         %end;
19171 +         /* Average values */
19172 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19173 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19174 +         %end;
19176 +         /* RASE */
19177 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19178 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19179 +         %end;
19181 +         /* Count */
19182 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19183 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19184 +         %end;
19185 +      %end;
19186 +      %else %do;
19187 +         /* Average values */
19188 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19189 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19190 +         %end;
19192 +         /* RASE */
19193 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19194 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19195 +         %end;
19197 +         /* Count */
19198 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19199 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19200 +         %end;
19201 +      %end;
19203 +      /* nodecolor */
19204 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19205 +        nodecolor=PREDICTION;
19206 +      %end;
19207 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19208 +        nodecolor=RASE;
19209 +      %end;
19210 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19211 +        nodecolor=1;
19212 +      %end;
19214 +    end;
19215 +    %end;
19216 +    %if &em_classTarget eq Y %then %do;
19217 +    if tarlevel^="INTERVAL" then  do;
19219 +      /* Nodeid */
19220 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19221 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19222 +      %end;
19223 +      /* Target identifier if multiple targets are used */
19224 +      %if "&multipleTar" eq "Y" %then %do;
19225 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19226 +      %end;
19228 +      /* Predicted values */
19229 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19230 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19231 +      %end;
19233 +      /* Column labels displayed in validflag eq Y only */
19234 +      %if "&ValidFlag" eq "Y" %then %do;
19235 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19236 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19236!+noquote ))";
19237 +        %end;
19238 +      %end;
19240 +      /* Target Values */
19241 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19242 +        textall=strip(textall)||"0A"x||strip(probtext);
19243 +      %end;
19245 +      /* include profit or loss for all target levels */
19246 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19247 +        textall=strip(textall)||"0A"x||strip(profittext);
19248 +      %end;
19250 +      %if &validFlag eq N %then %do;
19251 +        /* Percent Correct */
19252 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19253 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19254 +        %end;
19256 +         /* Count */
19257 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19258 +          %if "&adjusted" eq "N" %then %do;
19259 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19260 +          %end;
19261 +          %else %do;
19262 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19263 +          %end;
19264 +         %end;
19265 +      %end;
19266 +      %else %do;
19267 +        /* Percent Correct */
19268 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19269 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19270 +        %end;
19272 +         /* Count */
19273 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19274 +          %if "&adjusted" eq "N" %then %do;
19275 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19276 +          %end;
19277 +          %else %do;
19278 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19279 +          %end;
19280 +         %end;
19281 +      %end;
19283 +      /* nodecolor */
19284 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19285 +       %if &multipleTar ne Y %then %do;
19286 +        nodecolor=&predTarget;
19287 +       %end;
19288 +       %else %do;
19289 +         nodecolor=percentcorrect;
19290 +       %end;
19291 +      %end;
19292 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19293 +        nodecolor=percentcorrect;
19294 +      %end;
19295 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19296 +        nodecolor=1;
19297 +      %end;
19298 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19299 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19300 +          nodecolor=percentcorrect;
19301 +        %end;
19302 +        %else %do;
19303 +          nodecolor=profitloss;
19304 +        %end;
19305 +      %end;
19307 +    end;
19308 +    %end;
19309 +    %if &em_intTarget eq Y %then %do;
19310 +     drop  PREDICTION  TARGET TARLEVEL
19311 +     %if &ValidFlag eq Y %then %do;
19312 +         VPREDICTION
19313 +     %end;
19314 +     ;
19315 +    %end;
19316 +    %if &em_classTarget eq Y %then %do;
19317 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19318 +     %if &ValidFlag eq Y %then %do;
19319 +         VSTATVALUE
19320 +     %end;
19321 +     ;
19322 +    %end;
19324 +  run;
19326 +  /* add leaf index information to plotds - based on primary target only*/
19327 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19328 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19329 +      set &EM_USER_OUTSTATS;
19330 +      if ((statname="PROBABILITY"
19331 +      %if &validexist %then %do;
19332 +       or statname="VALID: PROBABILITY"
19333 +      %end;
19334 +      ) AND (CATEGORY="&TARGETEVENT")
19335 +      %if "&multipleTar" eq "Y" %then %do;
19336 +        AND (Target="%EM_TARGET")
19337 +      %end;
19338 +      );
19339 +    run;
19341 +    %if &validexist %then %do;
19342 +      proc sort data=tempprob; by node; run;
19343 +      %let vpredTarget = V%substr(&predTarget, 2);
19344 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19345 +         by node;
19346 +         id statname;
19347 +      run;
19348 +    %end;
19349 +  %end;
19350 +  %else %do;
19351 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19352 +      set &EM_USER_OUTSTATS;
19353 +      if ((statname="PREDICTION"
19354 +      %if &validexist %then %do;
19355 +       or statname="VALID: PREDICTION"
19356 +      %end;
19357 +      )
19358 +      %if "&multipleTar" eq "Y" %then %do;
19359 +        AND (Target="%EM_TARGET")
19360 +      %end;
19361 +      );
19362 +    run;
19363 +    %if &validexist %then %do;
19364 +      proc sort data=tempprob; by node; run;
19365 +      %let vpredTarget = V%substr(&predTarget, 2);
19366 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19367 +         by node;
19368 +         id statname;
19369 +      run;
19370 +    %end;
19371 +  %end;
19373 +  proc sort data=tempprob; by node; run;
19374 +  data tempoutnodes;
19375 +    merge tempoutnodes tempprob;
19376 +    by node;
19377 +  run;
19379 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19380 +  data tempnodes;
19381 +    retain traintotal validtotal;
19382 +    set tempnodes(where=(leaf ne . ));
19383 +    tprob=round(&predTarget, .01);
19384 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19385 +      percevent_train=round(tprob*100, .01);
19386 +    %end;
19387 +    %else %do;
19388 +      percevent_train=tprob;
19389 +    %end;
19391 +    perc_train=round((n/traintotal)*100, 0.01);
19392 +    /* leafwidth already has a *10 multiplier */
19393 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19395 +    %if &validexist %then %do;
19396 +      %let vpredTarget = V%substr(&predTarget,2);
19397 +      vprob=round(&vpredTarget, .01);
19398 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19399 +        percevent_valid=round(vprob*100, .01);
19400 +      %end;
19401 +      %else %do;
19402 +        percevent_valid=vprob;
19403 +      %end;
19404 +      perc_valid=round((vn/validtotal)*100, .01);
19405 +    %end;
19407 +    index=_N_;
19408 +    keep node index tprob perc_train percevent_train
19409 +    %if &validexist %then %do;
19410 +        vprob percevent_valid perc_valid
19411 +    %end;
19412 +    ;
19413 +  run;
19414 +  proc sort data=tempnodes; by node; run;
19415 +  data &EM_USER_TREE_PLOT;
19416 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19417 +    by node;
19418 +    if missing(node) then delete;
19419 +    %if &oldexists %then %do;
19420 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19421 +      drop oldnodecolor;
19422 +    %end;
19423 +    abovetext = compbl(abovetext);
19425 +    /* add variable labels */
19426 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19427 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19428 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19429 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19430 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19431 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19433 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19434 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19435 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19436 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19437 +          %end;
19438 +          %else %do;
19439 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19440 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19441 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19442 +          %end;
19443 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19445 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19446 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19447 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19448 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19449 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19450 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19451 +          %end;
19452 +          %else %do;
19453 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19454 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19455 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19456 +          %end;
19457 +    ;
19458 +  run;
19460 +  /* delete temporary tables */
19461 +  proc datasets lib=work nolist;
19462 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19463 +  run;
19465 +%mend em_tree_makePlotDs;
19469 +%macro em_tree_report;
19471 +   /* report properties */
19472 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19473 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19474 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19475 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19476 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19477 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19478 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19479 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19480 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19481 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19482 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19483 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19484 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19486 +   %let validexist=0;
19487 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19488 +     %let validexist=1;
19489 +   %end;
19491 +   /* determine if multiple targets will be processed */
19492 +   %let em_tree_multipleTargets=N;
19493 +   %let em_tree_numTarget=1;
19494 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19495 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19496 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19497 +         %let em_tree_multipleTargets=N;
19498 +      %end;
19499 +      %else %do;
19500 +        data _null_;
19501 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19502 +          if eof then
19503 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19504 +        run;
19506 +        %if &em_tree_numTarget gt 1 %then %do;
19507 +           %let em_tree_multipleTargets=Y;
19508 +        %end;
19509 +     %end;
19510 +   %end;
19512 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19514 +   /* variable importance */
19515 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19516 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19518 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19519 +     /* and the columns may not be generated                                                                                 */
19520 +     %let em_tree_cvexists=;
19521 +     %let em_tree_surrexists=.;
19522 +     data _null_;
19523 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19524 +       if eof then do ;
19525 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19526 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19527 +       end;
19528 +     run;
19530 +     data &EM_USER_OUTIMPORT;
19531 +         set &EM_USER_OUTIMPORT;
19532 +         /* format columns based on Precison value specified */
19533 +         format importance 15.&EM_PROPERTY_PRECISION
19534 +              %if &validexist %then %do;
19535 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19536 +              %end;
19537 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19538 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19539 +              %end;
19540 +         ;
19541 +     run;
19543 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19544 +     proc print data=&EM_USER_OUTIMPORT
19545 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19546 +          (where=((nrules>0) OR (nsurrogates>0)))
19547 +        %end;
19548 +        %else %do;
19549 +           (where=(nrules>0))
19550 +        %end;
19551 +        label noobs
19552 +        ;
19553 +     run;
19554 +     title10;
19556 +   %end;
19558 +   /* Sequence */
19559 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19560 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19561 +   data _null_ ;
19562 +      set &EM_USER_outseq (obs=2) end=eof ;
19563 +      if eof then do ;
19564 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19565 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19566 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19567 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19568 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19569 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19570 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19571 +      end;
19572 +    run;
19574 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19575 +      data &EM_USER_OUTSEQ;
19576 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19577 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19578 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19579 +           _XMISC_=_VMISC_
19580 +        %end;
19581 +        %if "&em_tree_aprof" ne "."  %then %do;
19582 +           _XAPROF_=_VAPROF_
19583 +           _XPROF_ = _VPROF_
19584 +        %end;
19585 +        %if "&em_tree_aloss" ne "."  %then %do;
19586 +           _XALOSS_=_VALOSS_
19587 +        %end;
19588 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19589 +           _XPASE_ = _VPASE_
19590 +           _XPMISC_ = _VPMISC_
19591 +        %end;
19593 +        ));
19594 +     %end;
19595 +     %else %do;
19596 +        set &EM_USER_OUTSEQ;
19597 +     %end;
19599 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19600 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19601 +            _MISC_   15.&EM_PROPERTY_PRECISION
19602 +         %end;
19603 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19604 +            _PASE_  15.&EM_PROPERTY_PRECISION
19605 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19606 +         %end;
19607 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19608 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19609 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19610 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19611 +            %end;
19612 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19613 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19614 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19615 +            %end;
19616 +         %end;
19617 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19618 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19619 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19620 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19621 +            %end;
19622 +         %end;
19623 +         %if "&em_tree_seq" ne "." %then %do;
19624 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19625 +         %end;
19626 +         %if "&em_tree_vseq" ne "." %then %do;
19627 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19628 +         %end;
19629 +         %if "&em_tree_aprof" ne "." %then %do;
19630 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19631 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19632 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19633 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19634 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19635 +           %end;
19636 +         %end;
19637 +         %else %if "&em_tree_aloss" ne "." %then %do;
19638 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19639 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19640 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19641 +           %end;
19642 +         %end;
19643 +      ;
19644 +    run;
19645 +   %end;
19647 +   /* Observation Based Importance */
19648 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19650 +      /* need to check for 0 obs */
19651 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19652 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19653 +      %let rc=%sysfunc(close(&dsid));
19655 +      %if &onobs %then %do;
19656 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19657 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19659 +         data &EM_USER_OUTOBSIMP;
19660 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19661 +           if _a;
19662 +           by _INPUT1_;
19663 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19664 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19665 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19666 +                   %end;
19667 +                   ;
19668 +         run;
19669 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19670 +      %end;
19671 +   %end;
19673 +  %end;
19675 +  /* create dataset to support tree diagram and icicle plot */
19676 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19677 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19679 +  /* display tree diagram */
19680 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19681 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19683 +  /* display icicle diagram */
19684 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19685 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19687 +  /* Leaf Statistics Plot */
19688 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19690 +  /* print leaf information to output window */
19691 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19693 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19694 +       by descending N;
19695 +     run;
19697 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19698 +     %local vn;
19699 +     data _null_;
19700 +       set t (obs=2) end=eof;
19701 +       if eof then do;
19702 +         call symput("vn", strip(put(vn, best.)));
19703 +       end;
19704 +     run;
19706 +     data t;
19707 +       set t;
19708 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19709 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19710 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19711 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19712 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19713 +       %end;
19714 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19715 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19716 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19717 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19718 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19719 +          %end;
19720 +       %end;
19721 +       ;
19722 +     run;
19724 +     /* determine if rase is found in t */
19725 +    %let dsid=%sysfunc(open(t,i));
19726 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19727 +    %let rc=%sysfunc(close(&dsid));
19729 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19730 +     proc print data=t noobs label;
19731 +       where tprob ne .;
19732 +       var node depth N tprob
19733 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19734 +         %if "&vn" ne "." %then %do;
19735 +           VN
19736 +         %end;
19737 +         vprob
19738 +       %end;
19739 +       %if &raseexists %then %do;
19740 +            RASE
19741 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19742 +              VRASE
19743 +            %end;
19744 +       %end;
19745 +       ;
19746 +     run;
19747 +     title10;
19748 +  %end;
19750 +  /* create plots that are done during training of node */
19751 +  /* display iterative plot, including reference line */
19752 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19753 +   /* %if &nleaves eq  %then %do; */
19754 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19755 +      data _null_;
19756 +        set &EM_USER_OUTTOPOLOGY end=eof;
19757 +        if eof then do;
19758 +          call symput('nleaves', LEAF);
19759 +        end;
19760 +      run;
19761 +   /* %end; */
19763 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19764 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19765 +  %end;
19767 +  /* display leaf statistics */
19768 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19770 +  /* stats by node if multiple targets = Y */
19771 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19772 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19773 +    data &EM_USER_OUTSTATS;
19774 +      set &EM_USER_OUTSTATS;
19776 +     * if STATNAME="TARGET" then delete;
19777 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19778 +      drop leaf;
19779 +    run;
19780 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19782 +  %end;
19783 +  %else %do;
19784 +    /* add outstats and outdescribe to spk but not results */
19785 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19786 +  %end;
19788 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 38 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 38 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 49 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 49 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_AUDIENCE_SCORE_P_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='TRUE');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 17 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 13 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 20 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 34 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 877 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 17 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 34 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 34 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 17 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 17 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 34 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 17 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 245 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 245 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 210 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 245 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 245 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 245 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 245 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 245 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 245 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 35 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 70 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 35 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      


NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: There were 70 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 70 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: There were 35 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 35 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196   
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 35 observations read from the data set WORK.TEMPN.
NOTE: There were 35 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 35 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      


NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 35 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 18 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 18 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 35 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 35 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      


NOTE: There were 35 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 35 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 35 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 35 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 18 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141   
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

19789  
19790  *------------------------------------------------------------*;
19791  * End REPORT: Tree;
19792  *------------------------------------------------------------*;

19793  /* Reset EM Options */
19794  options formchar="|----|+|---+=|-/\<>*";
19795  options nocenter ls=256 ps=10000;
19796  goptions reset=all device=GIF NODISPLAY;

19797  proc sort data=WORK.EM_USER_REPORT;
19798  by ID VIEW;
19799  run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

19800  proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
19801  by NAME;
19802  run;

NOTE: There were 46 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 46 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

19803  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19804  by NAME;
19805  run;

NOTE: There were 46 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 46 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

19806  data WORK.ASSESS_META;
19807  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19808  by NAME;
19809  run;

NOTE: There were 46 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 46 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 46 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

19810  data EM_temp_assessMeta;
19811  set EMWS1.Tree_CMeta_TRAIN;
19812  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19813  run;

NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

19814  data EM_temp_assessdata;
19815  set EMWS1.Tree_TRAIN(keep=
19816  F_audience_score_positive
19817  I_audience_score_positive
19818  P_audience_score_positiveFalse
19819  P_audience_score_positiveTrue
19820  Q_audience_score_positiveFalse
19821  Q_audience_score_positiveTrue
19822  R_audience_score_positiveFalse
19823  R_audience_score_positiveTrue
19824  U_audience_score_positive
19825  V_audience_score_positiveFalse
19826  V_audience_score_positiveTrue
19827  _WARN_
19828  audience_score_positive
19829  );
19830  run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.25 seconds
      
NOTE: There were 2438 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2438 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2438 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.37 seconds
      cpu time            0.28 seconds
      
















24111   data EM_temp_assessMeta;
24112   set EMWS1.Tree_CMeta_TRAIN;
24113   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24114   run;

NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

24115   data EM_temp_assessdata;
24116   set EMWS1.Tree_VALIDATE(keep=
24117   F_audience_score_positive
24118   I_audience_score_positive
24119   P_audience_score_positiveFalse
24120   P_audience_score_positiveTrue
24121   Q_audience_score_positiveFalse
24122   Q_audience_score_positiveTrue
24123   R_audience_score_positiveFalse
24124   R_audience_score_positiveTrue
24125   U_audience_score_positive
24126   V_audience_score_positiveFalse
24127   V_audience_score_positiveTrue
24128   _WARN_
24129   audience_score_positive
24130   );
24131   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2440 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 2440 observations read from the data set EMWS1.GRFEXPL_VALIDATE.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.29 seconds
      cpu time            0.21 seconds
      
NOTE: There were 2440 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 2440 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2440 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.33 seconds
      cpu time            0.26 seconds
      
















28421   %let _cn = %sysfunc(getoption(CENTER));
28422   options nocenter;
28423   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
28424   var STAT LABEL TRAIN
28425   VALIDATE
28426   ;
28427   by TARGET TARGETLABEL;
28428   title9 ' ';
28429   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28430   run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28431   title10;
28432   options &_cn;

28433   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
28434   by DATAROLE TARGET TARGETLABEL;
28435   run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

28436   %let _cn = %sysfunc(getoption(CENTER));
28437   options nocenter;
28438   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
28439   var from into pct_row pct_col count percent
28440   ;
28441   by DATAROLE TARGET TARGETLABEL;
28442   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28443   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28444   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28445   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28446   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28447   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28448   where _TYPE_='PREDICTION';
28449   title9 ' ';
28450   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28451   run;

NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28452   title9;
28453   title10;
28454   options &_cn;

28455   %let _cn = %sysfunc(getoption(CENTER));
28456   options nocenter;
28457   data EMWS1.Tree_EMEVENTREPORT;
28458   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28458 !  8;
28459   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28459 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28459 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28459 ! FALSEEVENT
28460   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28460 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28460 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28461      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28462   FALSEEVENT=0;
28463   FALSENEVENT=0;
28464   TRUEEVENT=0;
28465   TRUENEVENT=0;
28466   set EMWS1.Tree_EMEVENTREPORT;
28467   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

28468   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
28469   title9 ' ';
28470   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28471   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28472   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28473   title10;
28474   options &_cn;

28475   proc datasets library=EMWS1 nolist;
28476   modify Tree_EMRANK;
28477   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28478   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28479   run;

NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
28480   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

28481   %let _cn = %sysfunc(getoption(CENTER));
28482   options nocenter;
28483   proc print data=EMWS1.Tree_EMRANK label noobs;
28484   var
28485   decile gain lift liftc resp respc N _meanP_;
28486   by
28487   notsorted DATAROLE
28488   notsorted TARGET
28489   notsorted TARGETLABEL
28490   ;
28491   title9 ' ';
28492   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28493   run;

NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28494   title10;
28495   options &_cn;

28496   proc datasets library=EMWS1 nolist;
28497   modify Tree_EMSCOREDIST;
28498   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28499   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28500   run;

NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
28501   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
      

