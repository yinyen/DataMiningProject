NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


19082      %let em_filemodtime=;
19083      data _null_;
19084      format modate best.;
19085      set sashelp.Vextfl;
19086      where fileref eq "#LN00147";
19087      call symput('EM_FILEMODTIME', put(modate, best.));
19088      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00147';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19089      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19090      %let em_Train = N;
19091      %let em_Score = N;
19092      %let em_Report = N;
19093      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
19095     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
19096     +  %global &nLevel;
19097     +  proc dmdb batch data=&indata
19098     +    classout=_tmp_dmdbout;
19099     +    class &target;
19100     +  run;
19101     +  data _tmp_dmdbout;
19102     +    set _tmp_dmdbout;
19103     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
19104     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
19105     +  run;
19106     +  data _null_;
19107     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
19108     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
19109     +    %let dsid = %sysfunc(close(&dsid));
19110     +     call symput("&nLevel", put(&_obs, Best12.));
19111     +  run;
19113     +  proc datasets lib=work nolist;
19114     +     delete _tmp_dmdbout;
19115     +  run;
19116     +  quit;
19117     +%Mend EM_CheckBinaryTargetLevel;
19120     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
19122     +  /* determine the number of obs in training data */
19123     +  proc sql;
19124     +    reset noprint;
19125     +    select count(*) into :em_nobs from &indata;
19126     +  quit;
19128     +  /* determine the number of input variables */
19129     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
19130     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
19132     +  /* retrieve targetEvent from decmeta */
19133     +  %let targetEvent=;
19134     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19135     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
19136     +      data _null_;
19137     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
19138     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19139     +      run;
19140     +    %end;
19141     +  %end;
19143     +  /* create targetTable if multipleTar eq Y */
19144     +  data temptarget;
19145     +    set &EM_DATA_VARIABLESET;
19146     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
19147     +  run;
19149     + /* data sets */
19150     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
19151     + %EM_GETNAME(key=EMTREE,        type=DATA);
19152     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
19153     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
19154     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
19155     + %EM_GETNAME(key=OUTNODES,      type=DATA);
19156     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
19157     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
19158     + %EM_GETNAME(key=OUTPATH,       type=DATA);
19159     + %EM_GETNAME(key=OUTRULES,      type=DATA);
19161     + /* files */
19162     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19163     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19165     + /* turn on pmml if requested */
19166     + %let nnpmml=0;
19167     + %if %symexist(EM_PMML) %then %do;
19168     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19169     +       %let nnpmml=1;
19171     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19172     +%end;
19174     + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
19176     + %if &nnpmml or &numClassTarget %then %do;
19178     +       /* create dmdb needed for pmml generation */
19179     +       %let tree_maxlevel = 512;
19180     +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19181     +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
19182     +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19183     +         %end;
19184     +       %end;
19185     +       %if &tree_maxlevel gt 0 %then %do;
19186     +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19187     +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19188     +       %end;
19190     +       %let targetOrderString =;
19191     +       %let targetString = ;
19192     +       data _null_;
19193     +          length orderString nameString $10000;
19194     +          retain orderString nameString;
19195     +          set &em_data_variableset end=eof;
19196     +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19197     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19198     +          %end;
19199     +          %else %do;
19200     +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19201     +          %end;          select(order);
19202     +            when('')        order ='DESC';
19203     +            when('FMTASC')  order='ASCFMT';
19204     +            when('FMTDESC') order='DESFMT';
19205     +            otherwise;
19206     +          end;
19207     +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19208     +          nameString = trim(nameString)!!' '!!trim(NAME);
19210     +          if eof then do;
19211     +             call symput('targetOrderString', trim(orderString));
19212     +             call symput('targetString', trim(nameString));
19213     +          end;
19214     +       run;
19216     +       %let arborkluge= "work._treeDMDB";
19218     +       proc dmdb batch data=&indata
19219     +       %if &nnpmml %then %do;
19220     +           PMML
19221     +       %end;
19222     +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19225     +   %if &nnpmml %then %do;
19226     +        %if "%EM_ID" ne "" %then %do;
19227     +          id %EM_ID;
19228     +        %end;
19229     +        %if &EM_NUM_CLASS gt 0 %then %do;
19230     +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19231     +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19232     +               &targetOrderString;
19233     +        %end;
19234     +        %if &EM_NUM_INTERVAL gt 0 %then %do;
19235     +          var %EM_INTERVAL;
19236     +        %end;
19237     +        target &targetString %EM_INTERVAL_TARGET;
19238     +        %if "%EM_FREQ" ne "" %then %do;
19239     +          freq %EM_FREQ;
19240     +        %end;
19241     +  %end;
19242     +  %else %do;
19243     +      class  &targetOrderString;
19244     +      target &targetString %EM_INTERVAL_TARGET;
19245     +  %end;
19246     +       run;
19247     +       quit;
19249     +       proc datasets lib=work nolist;
19250     +          delete classout varout;
19251     +       run;
19252     +       quit;
19254     +    %end;
19255     + %end;
19257     + /* run Arbor procedure */
19258     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19259     +  proc arbor data=&INDATA
19261     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
19262     +    Leafsize = &EM_PROPERTY_LEAFSIZE
19263     +  %end;
19265     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
19266     +    Splitsize = &EM_PROPERTY_SPLITSIZE
19267     +  %end;
19269     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
19270     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
19271     +  %end;
19273     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
19274     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
19275     +  %end;
19277     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
19278     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
19279     +  %end;
19281     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
19282     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
19283     +  %end;
19284     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
19285     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
19286     +  %end;
19287     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19288     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
19289     +  %end;
19291     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
19292     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
19293     +      alpha = &EM_PROPERTY_SIGLEVEL
19294     +    %end;
19295     +  %end;
19297     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
19298     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19299     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
19300     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
19301     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
19303     +        padjust =
19304     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
19305     +          &chaid
19306     +        %end;
19307     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
19308     +          DEPTH
19309     +        %end;
19310     +      %end;
19311     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
19312     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
19313     +         pvars = &num_inputs
19314     +      %end;
19315     +    %end;
19316     +  %end;
19317     +  %else %do;
19318     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19319     +         padjust = NONE
19320     +      %end;
19321     +  %end;
19323     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
19324     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
19325     +    Maxrules = &num_nrules
19326     +  %end;
19328     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
19329     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
19330     +    Maxsurrs = &num_nsurrs
19331     +  %end;
19333     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
19334     +     Missing=&EM_PROPERTY_MISSINGVALUE
19335     +  %end;
19337     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
19338     +     USEVARONCE
19339     +  %end;
19341     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
19342     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
19343     +  %end;
19346     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
19347     +    event = "&targetEvent"
19348     +  %end;
19350     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
19351     +     DECSEARCH
19352     +  %end;
19354     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
19355     +     PRIORSSEARCH
19356     +  %end;
19358     +  %if &arbor_1 ne %then %do;
19359     +    &arbor_1
19360     +  %end;
19362     +  %if &em_arbor ne %then %do;
19363     +     &em_arbor
19364     +  %end;
19365     +  ;
19366     + %end;
19367     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
19368     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
19369     +       interact;
19370     + %end;
19371     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
19372     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
19373     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19374     +    %put &em_codebar;
19375     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19376     +    %put &errormsg;
19377     +    %put &em_codebar;
19378     +    %goto doendm;
19379     +   %end;
19380     +   %else %do;
19381     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
19382     +       interact;
19383     +   %end;
19384     + %end;
19386     + %else %do;
19387     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
19388     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19389     +    %put &em_codebar;
19390     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19391     +    %put &errormsg;
19392     +    %put &em_codebar;
19393     +    %goto doendm;
19394     +   %end;
19395     +   %else %do;
19396     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
19397     +        interact;
19398     +   %end;
19399     + %end;
19401     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19402     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
19403     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
19404     +    %end;
19406     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
19407     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
19408     +    %end;
19410     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
19411     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
19412     +    %end;
19414     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
19415     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
19416     +    %end;
19418     +    %if "%EM_FREQ" ne "" %then %do;
19419     +       freq %EM_FREQ;
19420     +    %end;
19422     +    %if "&multipleTar" eq "Y" %then %do;
19423     +       /* cycle through all target vars in variableset */
19424     +       %let tdsid = %sysfunc(open(temptarget));
19425     +       %if &tdsid %then %do;
19426     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
19427     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
19428     +          %do %while(^ %sysfunc(fetch(&tdsid)));
19429     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
19430     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
19431     +             target &var / level = &lvl
19432     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
19433     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
19434     +             %end;
19435     +             %else %if "&lvl" eq "INTERVAL" %then %do;
19436     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
19437     +             %end;
19438     +             %else %if "&lvl" eq "ORDINAL" %then %do;
19439     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
19440     +             %end;
19441     +          %end;
19442     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
19443     +       %end;
19444     +       useTarget variable = %EM_TARGET;
19445     +    %end;
19446     +    %else %do;
19447     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
19448     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
19449     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
19450     +      %end;
19451     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19452     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
19453     +      %end;
19454     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
19455     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
19456     +      %end;
19457     +    %end;
19459     +    %if "&multipleTar" eq "N" %then %do;
19460     +      &EM_DEC_STATEMENT;
19461     +    %end;
19463     +    Performance &EM_PROPERTY_PERFORMANCE
19464     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19465     +      nodesize=&EM_PROPERTY_NODESAMPLE
19466     +    %end;
19467     +    ;
19469     +    %if "&intFlag" eq "Y" %then %do;
19470     +       INTERACT Largest;
19471     +       Train maxnewdepth=0;
19472     +    %end;
19474     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
19475     +         Assess
19476     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19477     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
19478     +              %put &em_codebar;
19479     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
19480     +              %put &errormsg;
19481     +              %put &em_codebar;
19482     +            %end;
19483     +            %else %do;
19484     +               Validata=&EM_IMPORT_VALIDATE
19485     +            %end;
19486     +         %end;
19487     +         %else %do;
19488     +           NoValidata
19489     +         %end;
19490     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
19491     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
19492     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
19493     +               %if &dsid %then %do;
19494     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
19495     +                 %do %while(^ %sysfunc(fetch(&dsid)));
19496     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
19497     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
19498     +                   %else %do;
19499     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
19500     +                      %else %let measure= MISC;
19501     +                   %end;
19502     +                 %end;
19503     +               %end;
19504     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
19505     +            %end;
19506     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
19507     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
19508     +                 %let measure=ASE;
19509     +              %end;
19510     +              %else %do;
19511     +                 %let measure=MISC;
19512     +              %end;
19513     +            %end;
19514     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
19515     +              %let measure=ASE;
19516     +            %end;
19517     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
19518     +               %let measure = LIFT;
19519     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
19520     +               %if &dsid %then %do;
19521     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
19522     +                 %do %while(^ %sysfunc(fetch(&dsid)));
19523     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
19524     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
19525     +                 %end;
19526     +               %end;
19527     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
19528     +            %end;
19529     +            measure=&measure
19530     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
19531     +               event = "&targetEvent"
19532     +            %end;
19533     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
19534     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
19535     +            %end;
19536     +         %end;
19537     +         %if "&multipleTar" eq "N" %then %do;
19538     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
19539     +               CV
19540     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
19541     +                 CVNITer = &EM_PROPERTY_CVNITER
19542     +               %end;
19543     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
19544     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
19545     +               %end;
19546     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
19547     +                 CVSeed = &EM_PROPERTY_CVSEED
19548     +               %end;
19549     +            %end;
19550     +         %end;
19551     +       %end;
19552     +      ;
19554     +      %if "&intFlag" ne "Y" %then %do;
19555     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
19556     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
19557     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
19558     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
19560     +          SUBTREE &subtree
19561     +          %if "&subtree" eq "NLEAVES" %then %do;
19562     +            =&EM_PROPERTY_NSUBTREE
19563     +          %end;
19564     +          ;
19565     +        %end;
19567     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
19568     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
19569     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
19570     +          %end;
19571     +       %end;
19572     +      %end;
19573     + %end;
19576     + MakeMacro nleaves = nleaves;
19577     + save
19578     + %if "&EM_USER_EMTREE" ne "" %then %do;
19579     +   MODEL=&EM_USER_EMTREE
19580     + %end;
19581     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
19582     +   SEQUENCE=&EM_USER_OUTSEQ
19583     + %end;
19584     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
19585     +   IMPORTANCE=&EM_USER_OUTIMPORT
19586     + %end;
19587     + %if "&EM_USER_OUTNODES" ne "" %then %do;
19588     +   NODESTAT=&EM_USER_OUTNODES
19589     + %end;
19590     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
19591     +   SUMMARY=&EM_USER_OUTSUMMARY
19592     + %end;
19593     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
19594     +   STATSBYNODE=&EM_USER_OUTSTATS
19595     + %end;
19596     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
19597     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
19598     + %end;
19599     + %if "&EM_USER_OUTPATH" ne "" %then %do;
19600     +   Pathlistnonmissing=&EM_USER_OUTPATH
19601     + %end;
19602     + %if "&EM_USER_OUTRULES" ne "" %then %do;
19603     +   RULES = &EM_USER_OUTRULES
19604     + %end;
19605     + ;
19607     + %if "&intFlag" ne "Y" %then %do;
19609     +   %let lookupString = ;
19610     +   %if ^%symexist(EM_OPTION) %then
19611     +      %let EM_OPTION=;
19613     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
19614     +      %let lookupString = LOOKUP=SELECT;
19615     +   %end;
19617     +   %let codetext=;
19618     +   %let norescodetxt=;
19620     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
19621     +     %let codetext=&codetext DUMMY;
19622     +     %let norescodetxt=&norescodetxt DUMMY;
19623     +   %end;
19624     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
19625     +     %let codetext=&codetext NOLEAFID;
19626     +     %let norescodetxt=&norescodetxt NOLEAFID;
19627     +   %end;
19628     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
19629     +     %let norescodetxt=&norescodetxt NOPRED;
19630     +   %end;
19632     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
19633     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
19635     +   %if &nnpmml %then %do;
19636     +     code pmml;
19637     +   %end;
19639     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
19640     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19641     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
19642     +   %end;
19643     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
19644     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
19645     +   %end;
19646     + %end;
19648     + run;
19649     + quit;
19651     + /*%em_checkerror(); */
19652     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
19653     +   /* Delete DMDB catalog */
19654     +   proc datasets lib=work nolist;
19655     +       delete _treeDMDB / mt=cat;
19656     +  run;
19657     +  %end;
19659     + %if &nnpmml %then %do;
19660     +    ods pmml close;
19661     + %end;
19663     +  %doendm:
19665     +%mend em_tree_runTreeProcedure;
19667     +%macro em_tree_createFitStats( multipleTar= );
19670     +  /* create targetTable is multipleTar eq Y */
19671     +  data temptarget;
19672     +    set &EM_DATA_VARIABLESET;
19673     +    where ROLE="TARGET";
19674     +  run;
19676     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
19677     +   data &EM_USER_EMOUTFIT;
19678     +     length target $32;
19679     +     merge work.fit_train
19680     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19681     +       work.fit_valid
19682     +     %end;
19683     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
19684     +       work.fit_test
19685     +     %end;
19686     +     ;
19687     +     %if "&multipleTar" eq "N" %then %do;
19688     +       target="%EM_TARGET";
19689     +     %end;
19690     +     %else %do;
19691     +       target = _TARGET_;
19692     +     %end;
19693     +     drop _NW_ _SUMW_
19694     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19695     +        _VSUMW_
19696     +     %end;
19697     +     ;
19698     +   run;
19700     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
19701     +     proc datasets library=work nolist;
19702     +       delete fit_valid;
19703     +     run;
19704     +   %end;
19705     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
19706     +     proc datasets library=work nolist;
19707     +       delete fit_test;
19708     +     run;
19709     +   %end;
19711     +%mend em_tree_createFitStats;
19714     +%macro em_tree_makeEnglishRules;
19716     +  %EM_GETNAME(key=OUTNODES, type=DATA);
19717     +  %EM_GETNAME(key=OUTPATH, type=DATA);
19719     +  /* verify that necessary tables exist and if not, skip processing */
19720     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
19721     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19722     +    %goto doendm;
19723     +  %end;
19724     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
19725     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19726     +    %goto doendm;
19727     +  %end;
19729     +  /* determine length of variable in outpath dataset */
19730     +  %let vlength= ;
19731     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
19732     +  %if &dsid ne %then %do;
19733     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
19734     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
19735     +  %end;
19736     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
19738     +  data tempoutpath;
19739     +    length varname $&vlength;
19740     +    retain varname;
19741     +    set &EM_USER_OUTPATH;
19743     +    if ^missing(variable) then varname=variable;
19744     +    else if ^missing(var_name) then varname=var_name;
19745     +    output;
19746     +  run;
19748     +  /* create an array of generated predicted variable names */
19749     +  %let tree_pred_vars = ;
19750     +  %let tree_pred_label = ;
19751     +  %let numpred= 0;
19752     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
19754     +    data _null_;
19755     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
19756     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
19757     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
19758     +     if eof then
19759     +       call symput('numpred', strip(put(_N_, BEST.)));
19760     +    run;
19761     +  %end;
19763     +  /* determine if NPRIORS exists in outnodes  */
19764     +  %local nprior_flag;
19765     +  data _null_;
19766     +    set &EM_USER_OUTNODES(obs=2) end=eof;
19767     +    if eof then do;
19768     +      call symput('nprior_flag', strip(put(npriors, best.)));
19769     +    end;
19770     +  run;
19772     +  proc sort data=tempoutpath; by node; run;
19773     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
19775     +  data tempoutpath;
19776     +    merge tempoutpath(in=_a) outnodes(keep= node
19777     +    %if "&nprior_flag" ne "." %then %do;
19778     +      NPRIORS
19779     +    %end;
19780     +    %else %do;
19781     +      N
19782     +    %end;
19783     +    %if &numpred gt 0 %then %do;
19784     +      %do i=1 %to &numpred;
19785     +        &&tree_pred_vars&i
19786     +      %end;
19787     +    %end;
19788     +    );
19789     +    by node;
19790     +    if _a;
19791     +  run;
19793     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
19795     +  data _null_;
19796     +    file x;
19797     +    set tempoutpath;
19798     +    by node descending varname;
19799     +    retain origvar oldnode string;
19800     +    length origvar $32 oldnode 8 string $200;
19802     +    if _N_ = 1 then do;
19803     +      origvar = varname;
19804     +      oldnode = node;
19805     +    end;
19807     +    if first.node then do;
19808     +       put "&EM_CODEBAR";
19809     +       put " Node = " node;
19810     +       put "&EM_CODEBAR";
19811     +    end;
19813     +      if first.varname then do;
19814     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
19815     +            if MISSING(CHARACTER_VALUE) then do;
19816     +             if NUMERIC_VALUE ne .  then do;
19817     +              if ^first.node then do;
19818     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19819     +              end;
19820     +              else do;
19821     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19822     +              end;
19823     +             end;
19824     +            end;
19825     +            else do;
19826     +              if ^first.node then do;
19827     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19828     +              end;
19829     +              else do;
19830     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19831     +              end;
19832     +             end;
19833     +         end;
19834     +         else if RELATION in ("=") then do;
19835     +            if ^first.node then do;
19836     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
19837     +            end;
19838     +            else do;
19839     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
19840     +            end;
19841     +         end;
19842     +         else if RELATION in ("ISMISSING") then do;
19843     +            if ^first.node then do;
19844     +              string = " AND "|| strip(varname) || " equals Missing";
19845     +            end;
19846     +            else do;
19847     +              string = "if "|| strip(varname) ||" equals Missing";
19848     +            end;
19849     +         end;
19850     +         else if RELATION in ("ISNOTMISSING") then do;
19851     +            if ^first.node then do;
19852     +              string = " AND "|| strip(varname) || " equals All Values";
19853     +            end;
19854     +            else do;
19855     +              string = "if "|| strip(varname) ||" equals All Values";
19856     +            end;
19857     +         end;
19858     +         if ^missing(varname) then origvar = varname;
19859     +         oldnode=node;
19861     +      end;
19862     +      else do;
19863     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
19864     +          if MISSING(CHARACTER_VALUE) then do;
19865     +           if  NUMERIC_VALUE ne .  then do;
19866     +            if ^MISSING(string) then
19867     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19868     +            else
19869     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
19870     +           end;
19871     +          end;
19872     +          else do;
19873     +            if ^MISSING(string) then
19874     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19875     +            else
19876     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
19877     +          end;
19879     +         end;
19880     +         else if RELATION in ("=") then do;
19881     +           string = strip(string)||", "||strip(character_value);
19882     +         end;
19883     +         else if RELATION in ("ISMISSING") then do;
19885     +         end;
19886     +         if ^missing(varname) then origvar = varname;
19887     +         oldnode=node;
19888     +      end;
19889     +      if last.varname then do;
19890     +         if RELATION in ("ISMISSING") then do;
19891     +           if ^first.varname then do;
19892     +             string = strip(string) || " or MISSING";
19893     +           end;
19894     +         end;
19895     +         put string;
19896     +         if ^missing(varname) then origvar = varname;
19897     +         oldnode=node;
19898     +      end;
19900     +      if last.node then do;
19901     +         put "then ";
19902     +         put " Tree Node Identifier   = " node;
19904     +         %if "&nprior_flag" ne "." %then %do;
19905     +           put " Number of Observations = " NPRIORS;
19906     +         %end;
19907     +         %else %do;
19908     +           put " Number of Observations = " N;
19909     +         %end;
19911     +         %if &numpred gt 0 %then %do;
19912     +           %do i=1 %to &numpred;
19913     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
19914     +           %end;
19915     +         %end;
19917     +         put " ";
19918     +         if ^missing(varname) then origvar = varname;
19919     +         oldnode=node;
19920     +      end;
19922     +  run;
19924     +  proc datasets lib=work nolist;
19925     +    delete tempoutpath outnodes;
19926     +  run;
19928     +  %doendm:
19929     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2438 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.12 seconds
      
NOTE: There were 2438 observations read from the data set EMWS1.GRFEXPL_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.18 seconds
      cpu time            0.14 seconds
      

NOTE: EXPLOREOBS EMWS1.Impt_TRAIN : vars= 59 : recl= 676 : max=20000 : def= 2000

NOTE: There were 660 observations read from the data set EMWS1.TREE_EMTREE.
NOTE: The data set EMWS1.TREE_BROWSETREE has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


